
ADAS_Features_GP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004400  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08004530  08004530  00014530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004798  08004798  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08004798  08004798  00014798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047a0  080047a0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047a4  080047a4  000147a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080047a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  200001f0  08004994  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08004994  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008075  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001348  00000000  00000000  0002828a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000100e  00000000  00000000  000295d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002d8  00000000  00000000  0002a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000230  00000000  00000000  0002a8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000036e9  00000000  00000000  0002aae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00004168  00000000  00000000  0002e1d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c1e4  00000000  00000000  00032339  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003e51d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000012b0  00000000  00000000  0003e598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001f0 	.word	0x200001f0
 800014c:	00000000 	.word	0x00000000
 8000150:	08004518 	.word	0x08004518

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001f4 	.word	0x200001f4
 800016c:	08004518 	.word	0x08004518

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_frsub>:
 8000aa8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aac:	e002      	b.n	8000ab4 <__addsf3>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_fsub>:
 8000ab0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab4 <__addsf3>:
 8000ab4:	0042      	lsls	r2, r0, #1
 8000ab6:	bf1f      	itttt	ne
 8000ab8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000abc:	ea92 0f03 	teqne	r2, r3
 8000ac0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac8:	d06a      	beq.n	8000ba0 <__addsf3+0xec>
 8000aca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ace:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad2:	bfc1      	itttt	gt
 8000ad4:	18d2      	addgt	r2, r2, r3
 8000ad6:	4041      	eorgt	r1, r0
 8000ad8:	4048      	eorgt	r0, r1
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	bfb8      	it	lt
 8000ade:	425b      	neglt	r3, r3
 8000ae0:	2b19      	cmp	r3, #25
 8000ae2:	bf88      	it	hi
 8000ae4:	4770      	bxhi	lr
 8000ae6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000afe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4249      	negne	r1, r1
 8000b06:	ea92 0f03 	teq	r2, r3
 8000b0a:	d03f      	beq.n	8000b8c <__addsf3+0xd8>
 8000b0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b10:	fa41 fc03 	asr.w	ip, r1, r3
 8000b14:	eb10 000c 	adds.w	r0, r0, ip
 8000b18:	f1c3 0320 	rsb	r3, r3, #32
 8000b1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	d502      	bpl.n	8000b2c <__addsf3+0x78>
 8000b26:	4249      	negs	r1, r1
 8000b28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b30:	d313      	bcc.n	8000b5a <__addsf3+0xa6>
 8000b32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b36:	d306      	bcc.n	8000b46 <__addsf3+0x92>
 8000b38:	0840      	lsrs	r0, r0, #1
 8000b3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b3e:	f102 0201 	add.w	r2, r2, #1
 8000b42:	2afe      	cmp	r2, #254	; 0xfe
 8000b44:	d251      	bcs.n	8000bea <__addsf3+0x136>
 8000b46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4e:	bf08      	it	eq
 8000b50:	f020 0001 	biceq.w	r0, r0, #1
 8000b54:	ea40 0003 	orr.w	r0, r0, r3
 8000b58:	4770      	bx	lr
 8000b5a:	0049      	lsls	r1, r1, #1
 8000b5c:	eb40 0000 	adc.w	r0, r0, r0
 8000b60:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b64:	f1a2 0201 	sub.w	r2, r2, #1
 8000b68:	d1ed      	bne.n	8000b46 <__addsf3+0x92>
 8000b6a:	fab0 fc80 	clz	ip, r0
 8000b6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b72:	ebb2 020c 	subs.w	r2, r2, ip
 8000b76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7a:	bfaa      	itet	ge
 8000b7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b80:	4252      	neglt	r2, r2
 8000b82:	4318      	orrge	r0, r3
 8000b84:	bfbc      	itt	lt
 8000b86:	40d0      	lsrlt	r0, r2
 8000b88:	4318      	orrlt	r0, r3
 8000b8a:	4770      	bx	lr
 8000b8c:	f092 0f00 	teq	r2, #0
 8000b90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b94:	bf06      	itte	eq
 8000b96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9a:	3201      	addeq	r2, #1
 8000b9c:	3b01      	subne	r3, #1
 8000b9e:	e7b5      	b.n	8000b0c <__addsf3+0x58>
 8000ba0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba8:	bf18      	it	ne
 8000baa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bae:	d021      	beq.n	8000bf4 <__addsf3+0x140>
 8000bb0:	ea92 0f03 	teq	r2, r3
 8000bb4:	d004      	beq.n	8000bc0 <__addsf3+0x10c>
 8000bb6:	f092 0f00 	teq	r2, #0
 8000bba:	bf08      	it	eq
 8000bbc:	4608      	moveq	r0, r1
 8000bbe:	4770      	bx	lr
 8000bc0:	ea90 0f01 	teq	r0, r1
 8000bc4:	bf1c      	itt	ne
 8000bc6:	2000      	movne	r0, #0
 8000bc8:	4770      	bxne	lr
 8000bca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bce:	d104      	bne.n	8000bda <__addsf3+0x126>
 8000bd0:	0040      	lsls	r0, r0, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bd8:	4770      	bx	lr
 8000bda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bde:	bf3c      	itt	cc
 8000be0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bxcc	lr
 8000be6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	4770      	bx	lr
 8000bf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bf8:	bf16      	itet	ne
 8000bfa:	4608      	movne	r0, r1
 8000bfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c00:	4601      	movne	r1, r0
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	bf06      	itte	eq
 8000c06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0a:	ea90 0f01 	teqeq	r0, r1
 8000c0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c12:	4770      	bx	lr

08000c14 <__aeabi_ui2f>:
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e004      	b.n	8000c24 <__aeabi_i2f+0x8>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_i2f>:
 8000c1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c20:	bf48      	it	mi
 8000c22:	4240      	negmi	r0, r0
 8000c24:	ea5f 0c00 	movs.w	ip, r0
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c30:	4601      	mov	r1, r0
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	e01c      	b.n	8000c72 <__aeabi_l2f+0x2a>

08000c38 <__aeabi_ul2f>:
 8000c38:	ea50 0201 	orrs.w	r2, r0, r1
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e00a      	b.n	8000c5c <__aeabi_l2f+0x14>
 8000c46:	bf00      	nop

08000c48 <__aeabi_l2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__aeabi_l2f+0x14>
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	ea5f 0c01 	movs.w	ip, r1
 8000c60:	bf02      	ittt	eq
 8000c62:	4684      	moveq	ip, r0
 8000c64:	4601      	moveq	r1, r0
 8000c66:	2000      	moveq	r0, #0
 8000c68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c6c:	bf08      	it	eq
 8000c6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c76:	fabc f28c 	clz	r2, ip
 8000c7a:	3a08      	subs	r2, #8
 8000c7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c80:	db10      	blt.n	8000ca4 <__aeabi_l2f+0x5c>
 8000c82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c86:	4463      	add	r3, ip
 8000c88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c94:	fa20 f202 	lsr.w	r2, r0, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ca2:	4770      	bx	lr
 8000ca4:	f102 0220 	add.w	r2, r2, #32
 8000ca8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_fmul>:
 8000cc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ccc:	bf1e      	ittt	ne
 8000cce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd2:	ea92 0f0c 	teqne	r2, ip
 8000cd6:	ea93 0f0c 	teqne	r3, ip
 8000cda:	d06f      	beq.n	8000dbc <__aeabi_fmul+0xf8>
 8000cdc:	441a      	add	r2, r3
 8000cde:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce2:	0240      	lsls	r0, r0, #9
 8000ce4:	bf18      	it	ne
 8000ce6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cea:	d01e      	beq.n	8000d2a <__aeabi_fmul+0x66>
 8000cec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cf0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cf4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cf8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d04:	bf3e      	ittt	cc
 8000d06:	0049      	lslcc	r1, r1, #1
 8000d08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	ea40 0001 	orr.w	r0, r0, r1
 8000d12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d16:	2afd      	cmp	r2, #253	; 0xfd
 8000d18:	d81d      	bhi.n	8000d56 <__aeabi_fmul+0x92>
 8000d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d22:	bf08      	it	eq
 8000d24:	f020 0001 	biceq.w	r0, r0, #1
 8000d28:	4770      	bx	lr
 8000d2a:	f090 0f00 	teq	r0, #0
 8000d2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d32:	bf08      	it	eq
 8000d34:	0249      	lsleq	r1, r1, #9
 8000d36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d3e:	3a7f      	subs	r2, #127	; 0x7f
 8000d40:	bfc2      	ittt	gt
 8000d42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4a:	4770      	bxgt	lr
 8000d4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	3a01      	subs	r2, #1
 8000d56:	dc5d      	bgt.n	8000e14 <__aeabi_fmul+0x150>
 8000d58:	f112 0f19 	cmn.w	r2, #25
 8000d5c:	bfdc      	itt	le
 8000d5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d62:	4770      	bxle	lr
 8000d64:	f1c2 0200 	rsb	r2, r2, #0
 8000d68:	0041      	lsls	r1, r0, #1
 8000d6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d6e:	f1c2 0220 	rsb	r2, r2, #32
 8000d72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d7a:	f140 0000 	adc.w	r0, r0, #0
 8000d7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d82:	bf08      	it	eq
 8000d84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d88:	4770      	bx	lr
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fmul+0xce>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fmul+0xe6>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e78f      	b.n	8000cdc <__aeabi_fmul+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	bf18      	it	ne
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d00a      	beq.n	8000de2 <__aeabi_fmul+0x11e>
 8000dcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd0:	bf18      	it	ne
 8000dd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd6:	d1d8      	bne.n	8000d8a <__aeabi_fmul+0xc6>
 8000dd8:	ea80 0001 	eor.w	r0, r0, r1
 8000ddc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	bf17      	itett	ne
 8000de8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dec:	4608      	moveq	r0, r1
 8000dee:	f091 0f00 	teqne	r1, #0
 8000df2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000df6:	d014      	beq.n	8000e22 <__aeabi_fmul+0x15e>
 8000df8:	ea92 0f0c 	teq	r2, ip
 8000dfc:	d101      	bne.n	8000e02 <__aeabi_fmul+0x13e>
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	d10f      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e02:	ea93 0f0c 	teq	r3, ip
 8000e06:	d103      	bne.n	8000e10 <__aeabi_fmul+0x14c>
 8000e08:	024b      	lsls	r3, r1, #9
 8000e0a:	bf18      	it	ne
 8000e0c:	4608      	movne	r0, r1
 8000e0e:	d108      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e10:	ea80 0001 	eor.w	r0, r0, r1
 8000e14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e20:	4770      	bx	lr
 8000e22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e2a:	4770      	bx	lr

08000e2c <__aeabi_fdiv>:
 8000e2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e34:	bf1e      	ittt	ne
 8000e36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3a:	ea92 0f0c 	teqne	r2, ip
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d069      	beq.n	8000f18 <__aeabi_fdiv+0xec>
 8000e44:	eba2 0203 	sub.w	r2, r2, r3
 8000e48:	ea80 0c01 	eor.w	ip, r0, r1
 8000e4c:	0249      	lsls	r1, r1, #9
 8000e4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e52:	d037      	beq.n	8000ec4 <__aeabi_fdiv+0x98>
 8000e54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e64:	428b      	cmp	r3, r1
 8000e66:	bf38      	it	cc
 8000e68:	005b      	lslcc	r3, r3, #1
 8000e6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e72:	428b      	cmp	r3, r1
 8000e74:	bf24      	itt	cs
 8000e76:	1a5b      	subcs	r3, r3, r1
 8000e78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e80:	bf24      	itt	cs
 8000e82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e8e:	bf24      	itt	cs
 8000e90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e9c:	bf24      	itt	cs
 8000e9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ea2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	bf18      	it	ne
 8000eaa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eae:	d1e0      	bne.n	8000e72 <__aeabi_fdiv+0x46>
 8000eb0:	2afd      	cmp	r2, #253	; 0xfd
 8000eb2:	f63f af50 	bhi.w	8000d56 <__aeabi_fmul+0x92>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ec8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ecc:	327f      	adds	r2, #127	; 0x7f
 8000ece:	bfc2      	ittt	gt
 8000ed0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ed8:	4770      	bxgt	lr
 8000eda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	3a01      	subs	r2, #1
 8000ee4:	e737      	b.n	8000d56 <__aeabi_fmul+0x92>
 8000ee6:	f092 0f00 	teq	r2, #0
 8000eea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eee:	bf02      	ittt	eq
 8000ef0:	0040      	lsleq	r0, r0, #1
 8000ef2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef6:	3a01      	subeq	r2, #1
 8000ef8:	d0f9      	beq.n	8000eee <__aeabi_fdiv+0xc2>
 8000efa:	ea40 000c 	orr.w	r0, r0, ip
 8000efe:	f093 0f00 	teq	r3, #0
 8000f02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0049      	lsleq	r1, r1, #1
 8000f0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0e:	3b01      	subeq	r3, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fdiv+0xda>
 8000f12:	ea41 010c 	orr.w	r1, r1, ip
 8000f16:	e795      	b.n	8000e44 <__aeabi_fdiv+0x18>
 8000f18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	d108      	bne.n	8000f34 <__aeabi_fdiv+0x108>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	f47f af7d 	bne.w	8000e22 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	f47f af70 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f30:	4608      	mov	r0, r1
 8000f32:	e776      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f34:	ea93 0f0c 	teq	r3, ip
 8000f38:	d104      	bne.n	8000f44 <__aeabi_fdiv+0x118>
 8000f3a:	024b      	lsls	r3, r1, #9
 8000f3c:	f43f af4c 	beq.w	8000dd8 <__aeabi_fmul+0x114>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e76e      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f48:	bf18      	it	ne
 8000f4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f4e:	d1ca      	bne.n	8000ee6 <__aeabi_fdiv+0xba>
 8000f50:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f54:	f47f af5c 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f58:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f5c:	f47f af3c 	bne.w	8000dd8 <__aeabi_fmul+0x114>
 8000f60:	e75f      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f62:	bf00      	nop

08000f64 <__gesf2>:
 8000f64:	f04f 3cff 	mov.w	ip, #4294967295
 8000f68:	e006      	b.n	8000f78 <__cmpsf2+0x4>
 8000f6a:	bf00      	nop

08000f6c <__lesf2>:
 8000f6c:	f04f 0c01 	mov.w	ip, #1
 8000f70:	e002      	b.n	8000f78 <__cmpsf2+0x4>
 8000f72:	bf00      	nop

08000f74 <__cmpsf2>:
 8000f74:	f04f 0c01 	mov.w	ip, #1
 8000f78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f88:	bf18      	it	ne
 8000f8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f8e:	d011      	beq.n	8000fb4 <__cmpsf2+0x40>
 8000f90:	b001      	add	sp, #4
 8000f92:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f96:	bf18      	it	ne
 8000f98:	ea90 0f01 	teqne	r0, r1
 8000f9c:	bf58      	it	pl
 8000f9e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fa2:	bf88      	it	hi
 8000fa4:	17c8      	asrhi	r0, r1, #31
 8000fa6:	bf38      	it	cc
 8000fa8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fac:	bf18      	it	ne
 8000fae:	f040 0001 	orrne.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	d102      	bne.n	8000fc0 <__cmpsf2+0x4c>
 8000fba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fbe:	d105      	bne.n	8000fcc <__cmpsf2+0x58>
 8000fc0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fc4:	d1e4      	bne.n	8000f90 <__cmpsf2+0x1c>
 8000fc6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fca:	d0e1      	beq.n	8000f90 <__cmpsf2+0x1c>
 8000fcc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_cfrcmple>:
 8000fd4:	4684      	mov	ip, r0
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	4661      	mov	r1, ip
 8000fda:	e7ff      	b.n	8000fdc <__aeabi_cfcmpeq>

08000fdc <__aeabi_cfcmpeq>:
 8000fdc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fde:	f7ff ffc9 	bl	8000f74 <__cmpsf2>
 8000fe2:	2800      	cmp	r0, #0
 8000fe4:	bf48      	it	mi
 8000fe6:	f110 0f00 	cmnmi.w	r0, #0
 8000fea:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fec <__aeabi_fcmpeq>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff fff4 	bl	8000fdc <__aeabi_cfcmpeq>
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2001      	moveq	r0, #1
 8000ff8:	2000      	movne	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmplt>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffea 	bl	8000fdc <__aeabi_cfcmpeq>
 8001008:	bf34      	ite	cc
 800100a:	2001      	movcc	r0, #1
 800100c:	2000      	movcs	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_fcmple>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff ffe0 	bl	8000fdc <__aeabi_cfcmpeq>
 800101c:	bf94      	ite	ls
 800101e:	2001      	movls	r0, #1
 8001020:	2000      	movhi	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_fcmpge>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff ffd2 	bl	8000fd4 <__aeabi_cfrcmple>
 8001030:	bf94      	ite	ls
 8001032:	2001      	movls	r0, #1
 8001034:	2000      	movhi	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmpgt>:
 800103c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001040:	f7ff ffc8 	bl	8000fd4 <__aeabi_cfrcmple>
 8001044:	bf34      	ite	cc
 8001046:	2001      	movcc	r0, #1
 8001048:	2000      	movcs	r0, #0
 800104a:	f85d fb08 	ldr.w	pc, [sp], #8
 800104e:	bf00      	nop

08001050 <__aeabi_uldivmod>:
 8001050:	b953      	cbnz	r3, 8001068 <__aeabi_uldivmod+0x18>
 8001052:	b94a      	cbnz	r2, 8001068 <__aeabi_uldivmod+0x18>
 8001054:	2900      	cmp	r1, #0
 8001056:	bf08      	it	eq
 8001058:	2800      	cmpeq	r0, #0
 800105a:	bf1c      	itt	ne
 800105c:	f04f 31ff 	movne.w	r1, #4294967295
 8001060:	f04f 30ff 	movne.w	r0, #4294967295
 8001064:	f000 b974 	b.w	8001350 <__aeabi_idiv0>
 8001068:	f1ad 0c08 	sub.w	ip, sp, #8
 800106c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001070:	f000 f806 	bl	8001080 <__udivmoddi4>
 8001074:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107c:	b004      	add	sp, #16
 800107e:	4770      	bx	lr

08001080 <__udivmoddi4>:
 8001080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001084:	468c      	mov	ip, r1
 8001086:	4604      	mov	r4, r0
 8001088:	9e08      	ldr	r6, [sp, #32]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d14b      	bne.n	8001126 <__udivmoddi4+0xa6>
 800108e:	428a      	cmp	r2, r1
 8001090:	4615      	mov	r5, r2
 8001092:	d967      	bls.n	8001164 <__udivmoddi4+0xe4>
 8001094:	fab2 f282 	clz	r2, r2
 8001098:	b14a      	cbz	r2, 80010ae <__udivmoddi4+0x2e>
 800109a:	f1c2 0720 	rsb	r7, r2, #32
 800109e:	fa01 f302 	lsl.w	r3, r1, r2
 80010a2:	fa20 f707 	lsr.w	r7, r0, r7
 80010a6:	4095      	lsls	r5, r2
 80010a8:	ea47 0c03 	orr.w	ip, r7, r3
 80010ac:	4094      	lsls	r4, r2
 80010ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010b2:	fbbc f7fe 	udiv	r7, ip, lr
 80010b6:	fa1f f885 	uxth.w	r8, r5
 80010ba:	fb0e c317 	mls	r3, lr, r7, ip
 80010be:	fb07 f908 	mul.w	r9, r7, r8
 80010c2:	0c21      	lsrs	r1, r4, #16
 80010c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80010c8:	4599      	cmp	r9, r3
 80010ca:	d909      	bls.n	80010e0 <__udivmoddi4+0x60>
 80010cc:	18eb      	adds	r3, r5, r3
 80010ce:	f107 31ff 	add.w	r1, r7, #4294967295
 80010d2:	f080 811c 	bcs.w	800130e <__udivmoddi4+0x28e>
 80010d6:	4599      	cmp	r9, r3
 80010d8:	f240 8119 	bls.w	800130e <__udivmoddi4+0x28e>
 80010dc:	3f02      	subs	r7, #2
 80010de:	442b      	add	r3, r5
 80010e0:	eba3 0309 	sub.w	r3, r3, r9
 80010e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80010e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80010ec:	fb00 f108 	mul.w	r1, r0, r8
 80010f0:	b2a4      	uxth	r4, r4
 80010f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010f6:	42a1      	cmp	r1, r4
 80010f8:	d909      	bls.n	800110e <__udivmoddi4+0x8e>
 80010fa:	192c      	adds	r4, r5, r4
 80010fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8001100:	f080 8107 	bcs.w	8001312 <__udivmoddi4+0x292>
 8001104:	42a1      	cmp	r1, r4
 8001106:	f240 8104 	bls.w	8001312 <__udivmoddi4+0x292>
 800110a:	3802      	subs	r0, #2
 800110c:	442c      	add	r4, r5
 800110e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001112:	2700      	movs	r7, #0
 8001114:	1a64      	subs	r4, r4, r1
 8001116:	b11e      	cbz	r6, 8001120 <__udivmoddi4+0xa0>
 8001118:	2300      	movs	r3, #0
 800111a:	40d4      	lsrs	r4, r2
 800111c:	e9c6 4300 	strd	r4, r3, [r6]
 8001120:	4639      	mov	r1, r7
 8001122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001126:	428b      	cmp	r3, r1
 8001128:	d909      	bls.n	800113e <__udivmoddi4+0xbe>
 800112a:	2e00      	cmp	r6, #0
 800112c:	f000 80ec 	beq.w	8001308 <__udivmoddi4+0x288>
 8001130:	2700      	movs	r7, #0
 8001132:	e9c6 0100 	strd	r0, r1, [r6]
 8001136:	4638      	mov	r0, r7
 8001138:	4639      	mov	r1, r7
 800113a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113e:	fab3 f783 	clz	r7, r3
 8001142:	2f00      	cmp	r7, #0
 8001144:	d148      	bne.n	80011d8 <__udivmoddi4+0x158>
 8001146:	428b      	cmp	r3, r1
 8001148:	d302      	bcc.n	8001150 <__udivmoddi4+0xd0>
 800114a:	4282      	cmp	r2, r0
 800114c:	f200 80fb 	bhi.w	8001346 <__udivmoddi4+0x2c6>
 8001150:	1a84      	subs	r4, r0, r2
 8001152:	eb61 0303 	sbc.w	r3, r1, r3
 8001156:	2001      	movs	r0, #1
 8001158:	469c      	mov	ip, r3
 800115a:	2e00      	cmp	r6, #0
 800115c:	d0e0      	beq.n	8001120 <__udivmoddi4+0xa0>
 800115e:	e9c6 4c00 	strd	r4, ip, [r6]
 8001162:	e7dd      	b.n	8001120 <__udivmoddi4+0xa0>
 8001164:	b902      	cbnz	r2, 8001168 <__udivmoddi4+0xe8>
 8001166:	deff      	udf	#255	; 0xff
 8001168:	fab2 f282 	clz	r2, r2
 800116c:	2a00      	cmp	r2, #0
 800116e:	f040 808f 	bne.w	8001290 <__udivmoddi4+0x210>
 8001172:	2701      	movs	r7, #1
 8001174:	1b49      	subs	r1, r1, r5
 8001176:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800117a:	fa1f f985 	uxth.w	r9, r5
 800117e:	fbb1 fef8 	udiv	lr, r1, r8
 8001182:	fb08 111e 	mls	r1, r8, lr, r1
 8001186:	fb09 f00e 	mul.w	r0, r9, lr
 800118a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800118e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8001192:	4298      	cmp	r0, r3
 8001194:	d907      	bls.n	80011a6 <__udivmoddi4+0x126>
 8001196:	18eb      	adds	r3, r5, r3
 8001198:	f10e 31ff 	add.w	r1, lr, #4294967295
 800119c:	d202      	bcs.n	80011a4 <__udivmoddi4+0x124>
 800119e:	4298      	cmp	r0, r3
 80011a0:	f200 80cd 	bhi.w	800133e <__udivmoddi4+0x2be>
 80011a4:	468e      	mov	lr, r1
 80011a6:	1a1b      	subs	r3, r3, r0
 80011a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80011ac:	fb08 3310 	mls	r3, r8, r0, r3
 80011b0:	fb09 f900 	mul.w	r9, r9, r0
 80011b4:	b2a4      	uxth	r4, r4
 80011b6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011ba:	45a1      	cmp	r9, r4
 80011bc:	d907      	bls.n	80011ce <__udivmoddi4+0x14e>
 80011be:	192c      	adds	r4, r5, r4
 80011c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80011c4:	d202      	bcs.n	80011cc <__udivmoddi4+0x14c>
 80011c6:	45a1      	cmp	r9, r4
 80011c8:	f200 80b6 	bhi.w	8001338 <__udivmoddi4+0x2b8>
 80011cc:	4618      	mov	r0, r3
 80011ce:	eba4 0409 	sub.w	r4, r4, r9
 80011d2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80011d6:	e79e      	b.n	8001116 <__udivmoddi4+0x96>
 80011d8:	f1c7 0520 	rsb	r5, r7, #32
 80011dc:	40bb      	lsls	r3, r7
 80011de:	fa22 fc05 	lsr.w	ip, r2, r5
 80011e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80011e6:	fa21 f405 	lsr.w	r4, r1, r5
 80011ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80011ee:	fbb4 f9fe 	udiv	r9, r4, lr
 80011f2:	fa1f f88c 	uxth.w	r8, ip
 80011f6:	fb0e 4419 	mls	r4, lr, r9, r4
 80011fa:	fa20 f305 	lsr.w	r3, r0, r5
 80011fe:	40b9      	lsls	r1, r7
 8001200:	fb09 fa08 	mul.w	sl, r9, r8
 8001204:	4319      	orrs	r1, r3
 8001206:	0c0b      	lsrs	r3, r1, #16
 8001208:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800120c:	45a2      	cmp	sl, r4
 800120e:	fa02 f207 	lsl.w	r2, r2, r7
 8001212:	fa00 f307 	lsl.w	r3, r0, r7
 8001216:	d90b      	bls.n	8001230 <__udivmoddi4+0x1b0>
 8001218:	eb1c 0404 	adds.w	r4, ip, r4
 800121c:	f109 30ff 	add.w	r0, r9, #4294967295
 8001220:	f080 8088 	bcs.w	8001334 <__udivmoddi4+0x2b4>
 8001224:	45a2      	cmp	sl, r4
 8001226:	f240 8085 	bls.w	8001334 <__udivmoddi4+0x2b4>
 800122a:	f1a9 0902 	sub.w	r9, r9, #2
 800122e:	4464      	add	r4, ip
 8001230:	eba4 040a 	sub.w	r4, r4, sl
 8001234:	fbb4 f0fe 	udiv	r0, r4, lr
 8001238:	fb0e 4410 	mls	r4, lr, r0, r4
 800123c:	fb00 fa08 	mul.w	sl, r0, r8
 8001240:	b289      	uxth	r1, r1
 8001242:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8001246:	45a2      	cmp	sl, r4
 8001248:	d908      	bls.n	800125c <__udivmoddi4+0x1dc>
 800124a:	eb1c 0404 	adds.w	r4, ip, r4
 800124e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001252:	d26b      	bcs.n	800132c <__udivmoddi4+0x2ac>
 8001254:	45a2      	cmp	sl, r4
 8001256:	d969      	bls.n	800132c <__udivmoddi4+0x2ac>
 8001258:	3802      	subs	r0, #2
 800125a:	4464      	add	r4, ip
 800125c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001260:	fba0 8902 	umull	r8, r9, r0, r2
 8001264:	eba4 040a 	sub.w	r4, r4, sl
 8001268:	454c      	cmp	r4, r9
 800126a:	4641      	mov	r1, r8
 800126c:	46ce      	mov	lr, r9
 800126e:	d354      	bcc.n	800131a <__udivmoddi4+0x29a>
 8001270:	d051      	beq.n	8001316 <__udivmoddi4+0x296>
 8001272:	2e00      	cmp	r6, #0
 8001274:	d069      	beq.n	800134a <__udivmoddi4+0x2ca>
 8001276:	1a5a      	subs	r2, r3, r1
 8001278:	eb64 040e 	sbc.w	r4, r4, lr
 800127c:	fa04 f505 	lsl.w	r5, r4, r5
 8001280:	fa22 f307 	lsr.w	r3, r2, r7
 8001284:	40fc      	lsrs	r4, r7
 8001286:	431d      	orrs	r5, r3
 8001288:	e9c6 5400 	strd	r5, r4, [r6]
 800128c:	2700      	movs	r7, #0
 800128e:	e747      	b.n	8001120 <__udivmoddi4+0xa0>
 8001290:	4095      	lsls	r5, r2
 8001292:	f1c2 0320 	rsb	r3, r2, #32
 8001296:	fa21 f003 	lsr.w	r0, r1, r3
 800129a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800129e:	fbb0 f7f8 	udiv	r7, r0, r8
 80012a2:	fa1f f985 	uxth.w	r9, r5
 80012a6:	fb08 0017 	mls	r0, r8, r7, r0
 80012aa:	fa24 f303 	lsr.w	r3, r4, r3
 80012ae:	4091      	lsls	r1, r2
 80012b0:	fb07 fc09 	mul.w	ip, r7, r9
 80012b4:	430b      	orrs	r3, r1
 80012b6:	0c19      	lsrs	r1, r3, #16
 80012b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012bc:	458c      	cmp	ip, r1
 80012be:	fa04 f402 	lsl.w	r4, r4, r2
 80012c2:	d907      	bls.n	80012d4 <__udivmoddi4+0x254>
 80012c4:	1869      	adds	r1, r5, r1
 80012c6:	f107 30ff 	add.w	r0, r7, #4294967295
 80012ca:	d231      	bcs.n	8001330 <__udivmoddi4+0x2b0>
 80012cc:	458c      	cmp	ip, r1
 80012ce:	d92f      	bls.n	8001330 <__udivmoddi4+0x2b0>
 80012d0:	3f02      	subs	r7, #2
 80012d2:	4429      	add	r1, r5
 80012d4:	eba1 010c 	sub.w	r1, r1, ip
 80012d8:	fbb1 f0f8 	udiv	r0, r1, r8
 80012dc:	fb08 1c10 	mls	ip, r8, r0, r1
 80012e0:	fb00 fe09 	mul.w	lr, r0, r9
 80012e4:	b299      	uxth	r1, r3
 80012e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80012ea:	458e      	cmp	lr, r1
 80012ec:	d907      	bls.n	80012fe <__udivmoddi4+0x27e>
 80012ee:	1869      	adds	r1, r5, r1
 80012f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80012f4:	d218      	bcs.n	8001328 <__udivmoddi4+0x2a8>
 80012f6:	458e      	cmp	lr, r1
 80012f8:	d916      	bls.n	8001328 <__udivmoddi4+0x2a8>
 80012fa:	3802      	subs	r0, #2
 80012fc:	4429      	add	r1, r5
 80012fe:	eba1 010e 	sub.w	r1, r1, lr
 8001302:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001306:	e73a      	b.n	800117e <__udivmoddi4+0xfe>
 8001308:	4637      	mov	r7, r6
 800130a:	4630      	mov	r0, r6
 800130c:	e708      	b.n	8001120 <__udivmoddi4+0xa0>
 800130e:	460f      	mov	r7, r1
 8001310:	e6e6      	b.n	80010e0 <__udivmoddi4+0x60>
 8001312:	4618      	mov	r0, r3
 8001314:	e6fb      	b.n	800110e <__udivmoddi4+0x8e>
 8001316:	4543      	cmp	r3, r8
 8001318:	d2ab      	bcs.n	8001272 <__udivmoddi4+0x1f2>
 800131a:	ebb8 0102 	subs.w	r1, r8, r2
 800131e:	eb69 020c 	sbc.w	r2, r9, ip
 8001322:	3801      	subs	r0, #1
 8001324:	4696      	mov	lr, r2
 8001326:	e7a4      	b.n	8001272 <__udivmoddi4+0x1f2>
 8001328:	4618      	mov	r0, r3
 800132a:	e7e8      	b.n	80012fe <__udivmoddi4+0x27e>
 800132c:	4608      	mov	r0, r1
 800132e:	e795      	b.n	800125c <__udivmoddi4+0x1dc>
 8001330:	4607      	mov	r7, r0
 8001332:	e7cf      	b.n	80012d4 <__udivmoddi4+0x254>
 8001334:	4681      	mov	r9, r0
 8001336:	e77b      	b.n	8001230 <__udivmoddi4+0x1b0>
 8001338:	3802      	subs	r0, #2
 800133a:	442c      	add	r4, r5
 800133c:	e747      	b.n	80011ce <__udivmoddi4+0x14e>
 800133e:	f1ae 0e02 	sub.w	lr, lr, #2
 8001342:	442b      	add	r3, r5
 8001344:	e72f      	b.n	80011a6 <__udivmoddi4+0x126>
 8001346:	4638      	mov	r0, r7
 8001348:	e707      	b.n	800115a <__udivmoddi4+0xda>
 800134a:	4637      	mov	r7, r6
 800134c:	e6e8      	b.n	8001120 <__udivmoddi4+0xa0>
 800134e:	bf00      	nop

08001350 <__aeabi_idiv0>:
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <blindSpotWarning>:
#include "UART.h"
#include "GPIO_Driver.h"
uint8_t ch1 = 'S';


BlindSpotState blindSpotWarning(uint32_t leftDistance, uint32_t rightDistance){
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
	if(leftDistance <= 100 && rightDistance <= 100){
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b64      	cmp	r3, #100	; 0x64
 8001362:	d80d      	bhi.n	8001380 <blindSpotWarning+0x2c>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d80a      	bhi.n	8001380 <blindSpotWarning+0x2c>
		// uart send alert left and right blind spot detected.
		ch1 = 'D';
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <blindSpotWarning+0x70>)
 800136c:	2244      	movs	r2, #68	; 0x44
 800136e:	701a      	strb	r2, [r3, #0]
		MCAL_UART_SendData(UART2, (uint16_t*)&ch1,1, enable);
 8001370:	2300      	movs	r3, #0
 8001372:	2201      	movs	r2, #1
 8001374:	4913      	ldr	r1, [pc, #76]	; (80013c4 <blindSpotWarning+0x70>)
 8001376:	4814      	ldr	r0, [pc, #80]	; (80013c8 <blindSpotWarning+0x74>)
 8001378:	f000 ff8a 	bl	8002290 <MCAL_UART_SendData>
		return BLINDSPOT_RIGHT_LEFT_STATE;
 800137c:	2303      	movs	r3, #3
 800137e:	e01c      	b.n	80013ba <blindSpotWarning+0x66>
	}else if(leftDistance <= 100){
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d80a      	bhi.n	800139c <blindSpotWarning+0x48>
		// uart send alert left blind spot detected.
		ch1 = 'L';
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <blindSpotWarning+0x70>)
 8001388:	224c      	movs	r2, #76	; 0x4c
 800138a:	701a      	strb	r2, [r3, #0]
		MCAL_UART_SendData(UART2, (uint16_t*)&ch1,1, enable);
 800138c:	2300      	movs	r3, #0
 800138e:	2201      	movs	r2, #1
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <blindSpotWarning+0x70>)
 8001392:	480d      	ldr	r0, [pc, #52]	; (80013c8 <blindSpotWarning+0x74>)
 8001394:	f000 ff7c 	bl	8002290 <MCAL_UART_SendData>
		return BLINDSPOT_LEFT_STATE;
 8001398:	2302      	movs	r3, #2
 800139a:	e00e      	b.n	80013ba <blindSpotWarning+0x66>
	}else if(rightDistance <= 100){
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2b64      	cmp	r3, #100	; 0x64
 80013a0:	d80a      	bhi.n	80013b8 <blindSpotWarning+0x64>
		// uart send alert right blind spot detected.
		ch1 = 'R';
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <blindSpotWarning+0x70>)
 80013a4:	2252      	movs	r2, #82	; 0x52
 80013a6:	701a      	strb	r2, [r3, #0]
		MCAL_UART_SendData(UART2, (uint16_t*)&ch1,1, enable);
 80013a8:	2300      	movs	r3, #0
 80013aa:	2201      	movs	r2, #1
 80013ac:	4905      	ldr	r1, [pc, #20]	; (80013c4 <blindSpotWarning+0x70>)
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <blindSpotWarning+0x74>)
 80013b0:	f000 ff6e 	bl	8002290 <MCAL_UART_SendData>
		return BLINDSPOT_RIGHT_STATE;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <blindSpotWarning+0x66>
	}
	return BLINDSPOT_SAFE_STATE;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000000 	.word	0x20000000
 80013c8:	40004400 	.word	0x40004400

080013cc <getRelativeSpeed>:
#include "RearCollision.h"
#include "UART.h"
uint8_t ch2 = 'S';


float getRelativeSpeed(uint32_t prevDistance, uint32_t currDistance, float timeDiff){
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	float relativeSpeed = 0;
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
	if(prevDistance > currDistance){
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d912      	bls.n	800140c <getRelativeSpeed+0x40>
		// Acceleration Case
		relativeSpeed = (prevDistance - currDistance) / ((timeDiff) / 1000000);
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fc11 	bl	8000c14 <__aeabi_ui2f>
 80013f2:	4604      	mov	r4, r0
 80013f4:	490e      	ldr	r1, [pc, #56]	; (8001430 <getRelativeSpeed+0x64>)
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fd18 	bl	8000e2c <__aeabi_fdiv>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4619      	mov	r1, r3
 8001400:	4620      	mov	r0, r4
 8001402:	f7ff fd13 	bl	8000e2c <__aeabi_fdiv>
 8001406:	4603      	mov	r3, r0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e002      	b.n	8001412 <getRelativeSpeed+0x46>
	}else{
		// Decelration.
//		relativeSpeed =  (currDistance - prevDistance) / ((timeDiff) / 1000000);
		relativeSpeed = 0;
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
	}
	if(relativeSpeed > 1000){
 8001412:	4908      	ldr	r1, [pc, #32]	; (8001434 <getRelativeSpeed+0x68>)
 8001414:	6978      	ldr	r0, [r7, #20]
 8001416:	f7ff fe11 	bl	800103c <__aeabi_fcmpgt>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d002      	beq.n	8001426 <getRelativeSpeed+0x5a>
		relativeSpeed = 0;
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
	}
	return relativeSpeed;
 8001426:	697b      	ldr	r3, [r7, #20]
}
 8001428:	4618      	mov	r0, r3
 800142a:	371c      	adds	r7, #28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	49742400 	.word	0x49742400
 8001434:	447a0000 	.word	0x447a0000

08001438 <rearCollisionWarning>:


RearCollisionState rearCollisionWarning(float relativeSpeed, uint32_t rearDistance){
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
	if(relativeSpeed >= 400 && rearDistance < 90){
 8001442:	491d      	ldr	r1, [pc, #116]	; (80014b8 <rearCollisionWarning+0x80>)
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff fdef 	bl	8001028 <__aeabi_fcmpge>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00d      	beq.n	800146c <rearCollisionWarning+0x34>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2b59      	cmp	r3, #89	; 0x59
 8001454:	d80a      	bhi.n	800146c <rearCollisionWarning+0x34>
		// send uart alert rear distance and speed limit exceeded.
		ch2 = 'R';
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <rearCollisionWarning+0x84>)
 8001458:	2252      	movs	r2, #82	; 0x52
 800145a:	701a      	strb	r2, [r3, #0]
		MCAL_UART_SendData(UART2, (uint16_t*)&ch2,1, enable);
 800145c:	2300      	movs	r3, #0
 800145e:	2201      	movs	r2, #1
 8001460:	4916      	ldr	r1, [pc, #88]	; (80014bc <rearCollisionWarning+0x84>)
 8001462:	4817      	ldr	r0, [pc, #92]	; (80014c0 <rearCollisionWarning+0x88>)
 8001464:	f000 ff14 	bl	8002290 <MCAL_UART_SendData>
		return REAR_DANGER_SPEED_DISTANCE_STATE;
 8001468:	2303      	movs	r3, #3
 800146a:	e020      	b.n	80014ae <rearCollisionWarning+0x76>
	}else if(rearDistance < 90){
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2b59      	cmp	r3, #89	; 0x59
 8001470:	d80a      	bhi.n	8001488 <rearCollisionWarning+0x50>
		// send uart alert rear distance limit exceeded.
		ch2 = 'R';
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <rearCollisionWarning+0x84>)
 8001474:	2252      	movs	r2, #82	; 0x52
 8001476:	701a      	strb	r2, [r3, #0]
		MCAL_UART_SendData(UART2, (uint16_t*)&ch2,1, enable);
 8001478:	2300      	movs	r3, #0
 800147a:	2201      	movs	r2, #1
 800147c:	490f      	ldr	r1, [pc, #60]	; (80014bc <rearCollisionWarning+0x84>)
 800147e:	4810      	ldr	r0, [pc, #64]	; (80014c0 <rearCollisionWarning+0x88>)
 8001480:	f000 ff06 	bl	8002290 <MCAL_UART_SendData>
		return REAR_DANGER_DISTANCE_STATE;
 8001484:	2302      	movs	r3, #2
 8001486:	e012      	b.n	80014ae <rearCollisionWarning+0x76>
	}else if(relativeSpeed >= 400 ){
 8001488:	490b      	ldr	r1, [pc, #44]	; (80014b8 <rearCollisionWarning+0x80>)
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fdcc 	bl	8001028 <__aeabi_fcmpge>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00a      	beq.n	80014ac <rearCollisionWarning+0x74>
		// send uart alert relative speed limit exceeded.
		ch2 = 'R';
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <rearCollisionWarning+0x84>)
 8001498:	2252      	movs	r2, #82	; 0x52
 800149a:	701a      	strb	r2, [r3, #0]
		MCAL_UART_SendData(UART2, (uint16_t*)&ch2,1, enable);
 800149c:	2300      	movs	r3, #0
 800149e:	2201      	movs	r2, #1
 80014a0:	4906      	ldr	r1, [pc, #24]	; (80014bc <rearCollisionWarning+0x84>)
 80014a2:	4807      	ldr	r0, [pc, #28]	; (80014c0 <rearCollisionWarning+0x88>)
 80014a4:	f000 fef4 	bl	8002290 <MCAL_UART_SendData>
		return REAR_DANGER_SPEED_STATE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <rearCollisionWarning+0x76>
	}

	return REAR_SAFE_STATE;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	43c80000 	.word	0x43c80000
 80014bc:	20000001 	.word	0x20000001
 80014c0:	40004400 	.word	0x40004400

080014c4 <ultraSonicInit>:
 */

#include "US_Driver.h"


void ultraSonicInit(US_TypeDef* us){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	// configure trigger pin
	GPIO_PinConfig_t gpio_cfg;
	gpio_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80014cc:	2304      	movs	r3, #4
 80014ce:	77bb      	strb	r3, [r7, #30]
	gpio_cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2M;
 80014d0:	2302      	movs	r3, #2
 80014d2:	77fb      	strb	r3, [r7, #31]
	gpio_cfg.GPIO_PinNumber = us->trigPin;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	83bb      	strh	r3, [r7, #28]
	MCAL_GPIO_Init(us->port, &gpio_cfg);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	f107 021c 	add.w	r2, r7, #28
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fb78 	bl	8001bda <MCAL_GPIO_Init>

	// Configure External Interrupt for Echo pin
	EXTI_PinConfig_t exti_cfg;
	exti_cfg.EXTI_PIN = us->echoPin;
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	3204      	adds	r2, #4
 80014f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	exti_cfg.Trigger_Case = EXTI_Trigger_RisingAndFalling;
 80014f8:	2302      	movs	r3, #2
 80014fa:	753b      	strb	r3, [r7, #20]
	exti_cfg.IRQ_EN = EXTI_IRQ_Enable;
 80014fc:	2301      	movs	r3, #1
 80014fe:	757b      	strb	r3, [r7, #21]
	exti_cfg.P_IRQ_Callback = us->P_IRQ_Callback;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	61bb      	str	r3, [r7, #24]
	MCAL_EXTI_GPIO_Init(&exti_cfg);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f9d6 	bl	80018bc <MCAL_EXTI_GPIO_Init>
}
 8001510:	bf00      	nop
 8001512:	3720      	adds	r7, #32
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <triggerUltraSonic>:


void triggerUltraSonic(US_TypeDef* us, uint32_t clk){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
	MCAL_GPIO_WritePin(us->port, us->trigPin, GPIO_PIN_HIGH);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6918      	ldr	r0, [r3, #16]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	4619      	mov	r1, r3
 800152e:	f000 fbdf 	bl	8001cf0 <MCAL_GPIO_WritePin>
	delay(10, U_ms, clk);
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	2100      	movs	r1, #0
 8001536:	200a      	movs	r0, #10
 8001538:	f000 fc56 	bl	8001de8 <delay>
	MCAL_GPIO_WritePin(us->port, us->trigPin, GPIO_PIN_LOW);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6918      	ldr	r0, [r3, #16]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	4619      	mov	r1, r3
 8001548:	f000 fbd2 	bl	8001cf0 <MCAL_GPIO_WritePin>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <Enable_NVIC>:
 * ===================================================================
 * 							Generic Functions
 * ===================================================================
 */

void Enable_NVIC(uint16_t IRQ){
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	2b0f      	cmp	r3, #15
 8001562:	d854      	bhi.n	800160e <Enable_NVIC+0xba>
 8001564:	a201      	add	r2, pc, #4	; (adr r2, 800156c <Enable_NVIC+0x18>)
 8001566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156a:	bf00      	nop
 800156c:	080015ad 	.word	0x080015ad
 8001570:	080015bb 	.word	0x080015bb
 8001574:	080015c9 	.word	0x080015c9
 8001578:	080015d7 	.word	0x080015d7
 800157c:	080015e5 	.word	0x080015e5
 8001580:	080015f3 	.word	0x080015f3
 8001584:	080015f3 	.word	0x080015f3
 8001588:	080015f3 	.word	0x080015f3
 800158c:	080015f3 	.word	0x080015f3
 8001590:	080015f3 	.word	0x080015f3
 8001594:	08001601 	.word	0x08001601
 8001598:	08001601 	.word	0x08001601
 800159c:	08001601 	.word	0x08001601
 80015a0:	08001601 	.word	0x08001601
 80015a4:	08001601 	.word	0x08001601
 80015a8:	08001601 	.word	0x08001601
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <Enable_NVIC+0xc4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a19      	ldr	r2, [pc, #100]	; (8001618 <Enable_NVIC+0xc4>)
 80015b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b6:	6013      	str	r3, [r2, #0]
		break;
 80015b8:	e029      	b.n	800160e <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <Enable_NVIC+0xc4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a16      	ldr	r2, [pc, #88]	; (8001618 <Enable_NVIC+0xc4>)
 80015c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c4:	6013      	str	r3, [r2, #0]
		break;
 80015c6:	e022      	b.n	800160e <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <Enable_NVIC+0xc4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a12      	ldr	r2, [pc, #72]	; (8001618 <Enable_NVIC+0xc4>)
 80015ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d2:	6013      	str	r3, [r2, #0]
		break;
 80015d4:	e01b      	b.n	800160e <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <Enable_NVIC+0xc4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <Enable_NVIC+0xc4>)
 80015dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e0:	6013      	str	r3, [r2, #0]
		break;
 80015e2:	e014      	b.n	800160e <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <Enable_NVIC+0xc4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <Enable_NVIC+0xc4>)
 80015ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ee:	6013      	str	r3, [r2, #0]
		break;
 80015f0:	e00d      	b.n	800160e <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <Enable_NVIC+0xc4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <Enable_NVIC+0xc4>)
 80015f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015fc:	6013      	str	r3, [r2, #0]
		break;
 80015fe:	e006      	b.n	800160e <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <Enable_NVIC+0xc8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <Enable_NVIC+0xc8>)
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	6013      	str	r3, [r2, #0]
		break;
 800160c:	bf00      	nop
	}
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	e000e100 	.word	0xe000e100
 800161c:	e000e104 	.word	0xe000e104

08001620 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ){
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	2b0e      	cmp	r3, #14
 800162e:	d852      	bhi.n	80016d6 <Disable_NVIC+0xb6>
 8001630:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <Disable_NVIC+0x18>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	08001675 	.word	0x08001675
 800163c:	08001683 	.word	0x08001683
 8001640:	08001691 	.word	0x08001691
 8001644:	0800169f 	.word	0x0800169f
 8001648:	080016ad 	.word	0x080016ad
 800164c:	080016bb 	.word	0x080016bb
 8001650:	080016bb 	.word	0x080016bb
 8001654:	080016bb 	.word	0x080016bb
 8001658:	080016bb 	.word	0x080016bb
 800165c:	080016bb 	.word	0x080016bb
 8001660:	080016c9 	.word	0x080016c9
 8001664:	080016c9 	.word	0x080016c9
 8001668:	080016c9 	.word	0x080016c9
 800166c:	080016c9 	.word	0x080016c9
 8001670:	080016c9 	.word	0x080016c9
		case 0:
			NVIC_IRQ6_EXTI0_Disable;
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <Disable_NVIC+0xc0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a19      	ldr	r2, [pc, #100]	; (80016e0 <Disable_NVIC+0xc0>)
 800167a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800167e:	6013      	str	r3, [r2, #0]
			break;
 8001680:	e029      	b.n	80016d6 <Disable_NVIC+0xb6>
		case 1:
			NVIC_IRQ7_EXTI1_Disable;
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <Disable_NVIC+0xc0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <Disable_NVIC+0xc0>)
 8001688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800168c:	6013      	str	r3, [r2, #0]
			break;
 800168e:	e022      	b.n	80016d6 <Disable_NVIC+0xb6>
		case 2:
			NVIC_IRQ8_EXTI2_Disable;
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <Disable_NVIC+0xc0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <Disable_NVIC+0xc0>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169a:	6013      	str	r3, [r2, #0]
			break;
 800169c:	e01b      	b.n	80016d6 <Disable_NVIC+0xb6>
		case 3:
			NVIC_IRQ9_EXTI3_Disable;
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <Disable_NVIC+0xc0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <Disable_NVIC+0xc0>)
 80016a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a8:	6013      	str	r3, [r2, #0]
			break;
 80016aa:	e014      	b.n	80016d6 <Disable_NVIC+0xb6>
		case 4:
			NVIC_IRQ10_EXTI4_Disable;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <Disable_NVIC+0xc0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <Disable_NVIC+0xc0>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b6:	6013      	str	r3, [r2, #0]
			break;
 80016b8:	e00d      	b.n	80016d6 <Disable_NVIC+0xb6>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI5_9_Disable;
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <Disable_NVIC+0xc0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <Disable_NVIC+0xc0>)
 80016c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016c4:	6013      	str	r3, [r2, #0]
			break;
 80016c6:	e006      	b.n	80016d6 <Disable_NVIC+0xb6>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
			NVIC_IRQ40_EXTI10_15_Disable;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <Disable_NVIC+0xc4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <Disable_NVIC+0xc4>)
 80016ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d2:	6013      	str	r3, [r2, #0]
			break;
 80016d4:	bf00      	nop
		}
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	e000e180 	.word	0xe000e180
 80016e4:	e000e184 	.word	0xe000e184

080016e8 <Update_EXTI>:

void Update_EXTI(EXTI_PinConfig_t* EXTI_Config){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	// Configure GPIO to be AF Input -> Floating Input.
	GPIO_PinConfig_t pinCfg;
	pinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	891b      	ldrh	r3, [r3, #8]
 80016f4:	813b      	strh	r3, [r7, #8]
	pinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80016f6:	2301      	movs	r3, #1
 80016f8:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &pinCfg);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f107 0208 	add.w	r2, r7, #8
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f000 fa68 	bl	8001bda <MCAL_GPIO_Init>
	//===================================================

	// Update AFIO to Route between EXTI Line with port A, B, C, D.
	uint8_t AFIO_EXTICR_Index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	b29b      	uxth	r3, r3
 8001712:	73fb      	strb	r3, [r7, #15]

	uint8_t AFIO_EXTICR_Pos = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) * 4;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	73bb      	strb	r3, [r7, #14]

	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Pos);
 8001724:	4a5e      	ldr	r2, [pc, #376]	; (80018a0 <Update_EXTI+0x1b8>)
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	3302      	adds	r3, #2
 800172a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800172e:	7bbb      	ldrb	r3, [r7, #14]
 8001730:	210f      	movs	r1, #15
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	4959      	ldr	r1, [pc, #356]	; (80018a0 <Update_EXTI+0x1b8>)
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	4002      	ands	r2, r0
 8001740:	3302      	adds	r3, #2
 8001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) & 0xF) << AFIO_EXTICR_Pos);
 8001746:	4a56      	ldr	r2, [pc, #344]	; (80018a0 <Update_EXTI+0x1b8>)
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	3302      	adds	r3, #2
 800174c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4953      	ldr	r1, [pc, #332]	; (80018a4 <Update_EXTI+0x1bc>)
 8001756:	428b      	cmp	r3, r1
 8001758:	d016      	beq.n	8001788 <Update_EXTI+0xa0>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4952      	ldr	r1, [pc, #328]	; (80018a8 <Update_EXTI+0x1c0>)
 8001760:	428b      	cmp	r3, r1
 8001762:	d00f      	beq.n	8001784 <Update_EXTI+0x9c>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4950      	ldr	r1, [pc, #320]	; (80018ac <Update_EXTI+0x1c4>)
 800176a:	428b      	cmp	r3, r1
 800176c:	d008      	beq.n	8001780 <Update_EXTI+0x98>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	494f      	ldr	r1, [pc, #316]	; (80018b0 <Update_EXTI+0x1c8>)
 8001774:	428b      	cmp	r3, r1
 8001776:	d101      	bne.n	800177c <Update_EXTI+0x94>
 8001778:	2303      	movs	r3, #3
 800177a:	e006      	b.n	800178a <Update_EXTI+0xa2>
 800177c:	2300      	movs	r3, #0
 800177e:	e004      	b.n	800178a <Update_EXTI+0xa2>
 8001780:	2302      	movs	r3, #2
 8001782:	e002      	b.n	800178a <Update_EXTI+0xa2>
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <Update_EXTI+0xa2>
 8001788:	2300      	movs	r3, #0
 800178a:	7bb9      	ldrb	r1, [r7, #14]
 800178c:	408b      	lsls	r3, r1
 800178e:	4618      	mov	r0, r3
 8001790:	4943      	ldr	r1, [pc, #268]	; (80018a0 <Update_EXTI+0x1b8>)
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	4302      	orrs	r2, r0
 8001796:	3302      	adds	r3, #2
 8001798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//=====================================================

	// Update Rising And Falling Edge.
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800179c:	4b45      	ldr	r3, [pc, #276]	; (80018b4 <Update_EXTI+0x1cc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	8812      	ldrh	r2, [r2, #0]
 80017a4:	4611      	mov	r1, r2
 80017a6:	2201      	movs	r2, #1
 80017a8:	408a      	lsls	r2, r1
 80017aa:	43d2      	mvns	r2, r2
 80017ac:	4611      	mov	r1, r2
 80017ae:	4a41      	ldr	r2, [pc, #260]	; (80018b4 <Update_EXTI+0x1cc>)
 80017b0:	400b      	ands	r3, r1
 80017b2:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80017b4:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <Update_EXTI+0x1cc>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	8812      	ldrh	r2, [r2, #0]
 80017bc:	4611      	mov	r1, r2
 80017be:	2201      	movs	r2, #1
 80017c0:	408a      	lsls	r2, r1
 80017c2:	43d2      	mvns	r2, r2
 80017c4:	4611      	mov	r1, r2
 80017c6:	4a3b      	ldr	r2, [pc, #236]	; (80018b4 <Update_EXTI+0x1cc>)
 80017c8:	400b      	ands	r3, r1
 80017ca:	60d3      	str	r3, [r2, #12]

	switch(EXTI_Config->Trigger_Case){
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7b1b      	ldrb	r3, [r3, #12]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d00f      	beq.n	80017f4 <Update_EXTI+0x10c>
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d019      	beq.n	800180c <Update_EXTI+0x124>
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d12e      	bne.n	800183a <Update_EXTI+0x152>
	case EXTI_Trigger_Rising:
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80017dc:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <Update_EXTI+0x1cc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	8812      	ldrh	r2, [r2, #0]
 80017e4:	4611      	mov	r1, r2
 80017e6:	2201      	movs	r2, #1
 80017e8:	408a      	lsls	r2, r1
 80017ea:	4611      	mov	r1, r2
 80017ec:	4a31      	ldr	r2, [pc, #196]	; (80018b4 <Update_EXTI+0x1cc>)
 80017ee:	430b      	orrs	r3, r1
 80017f0:	6093      	str	r3, [r2, #8]
		break;
 80017f2:	e022      	b.n	800183a <Update_EXTI+0x152>
	case EXTI_Trigger_Falling:
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80017f4:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <Update_EXTI+0x1cc>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	8812      	ldrh	r2, [r2, #0]
 80017fc:	4611      	mov	r1, r2
 80017fe:	2201      	movs	r2, #1
 8001800:	408a      	lsls	r2, r1
 8001802:	4611      	mov	r1, r2
 8001804:	4a2b      	ldr	r2, [pc, #172]	; (80018b4 <Update_EXTI+0x1cc>)
 8001806:	430b      	orrs	r3, r1
 8001808:	60d3      	str	r3, [r2, #12]
		break;
 800180a:	e016      	b.n	800183a <Update_EXTI+0x152>
	case EXTI_Trigger_RisingAndFalling:
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800180c:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <Update_EXTI+0x1cc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	8812      	ldrh	r2, [r2, #0]
 8001814:	4611      	mov	r1, r2
 8001816:	2201      	movs	r2, #1
 8001818:	408a      	lsls	r2, r1
 800181a:	4611      	mov	r1, r2
 800181c:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <Update_EXTI+0x1cc>)
 800181e:	430b      	orrs	r3, r1
 8001820:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8001822:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <Update_EXTI+0x1cc>)
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	8812      	ldrh	r2, [r2, #0]
 800182a:	4611      	mov	r1, r2
 800182c:	2201      	movs	r2, #1
 800182e:	408a      	lsls	r2, r1
 8001830:	4611      	mov	r1, r2
 8001832:	4a20      	ldr	r2, [pc, #128]	; (80018b4 <Update_EXTI+0x1cc>)
 8001834:	430b      	orrs	r3, r1
 8001836:	60d3      	str	r3, [r2, #12]
		break;
 8001838:	bf00      	nop
	}
	//===============================================================

	// Update IRQ Handling CallBack.
	GP_IRQ_Callback[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_Callback;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	4619      	mov	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <Update_EXTI+0x1d0>)
 8001846:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//===============================================================

	// Enable/Disable IRQ EXTI & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable){
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7b5b      	ldrb	r3, [r3, #13]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d110      	bne.n	8001874 <Update_EXTI+0x18c>
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <Update_EXTI+0x1cc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	8812      	ldrh	r2, [r2, #0]
 800185a:	4611      	mov	r1, r2
 800185c:	2201      	movs	r2, #1
 800185e:	408a      	lsls	r2, r1
 8001860:	4611      	mov	r1, r2
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <Update_EXTI+0x1cc>)
 8001864:	430b      	orrs	r3, r1
 8001866:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fe71 	bl	8001554 <Enable_NVIC>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);

	}

}
 8001872:	e010      	b.n	8001896 <Update_EXTI+0x1ae>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <Update_EXTI+0x1cc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	8812      	ldrh	r2, [r2, #0]
 800187c:	4611      	mov	r1, r2
 800187e:	2201      	movs	r2, #1
 8001880:	408a      	lsls	r2, r1
 8001882:	43d2      	mvns	r2, r2
 8001884:	4611      	mov	r1, r2
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <Update_EXTI+0x1cc>)
 8001888:	400b      	ands	r3, r1
 800188a:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fec5 	bl	8001620 <Disable_NVIC>
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40010000 	.word	0x40010000
 80018a4:	40010800 	.word	0x40010800
 80018a8:	40010c00 	.word	0x40010c00
 80018ac:	40011000 	.word	0x40011000
 80018b0:	40011400 	.word	0x40011400
 80018b4:	40010400 	.word	0x40010400
 80018b8:	2000028c 	.word	0x2000028c

080018bc <MCAL_EXTI_GPIO_Init>:
 * 				  has only GPIO A, B, PART of C/D exported as external From the MCU.
 * 				- Also Mandatory to Enable RCC Clock for AFIO and the corresponding GPIO.
 */


void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff0f 	bl	80016e8 <Update_EXTI>
  }
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <EXTI0_IRQHandler>:
 * ===================================================================
 * 							ISR Functions
 * ===================================================================
 */

void EXTI0_IRQHandler(void){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <EXTI0_IRQHandler+0x1c>)
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <EXTI0_IRQHandler+0x1c>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[0]();
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <EXTI0_IRQHandler+0x20>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4798      	blx	r3
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40010400 	.word	0x40010400
 80018f4:	2000028c 	.word	0x2000028c

080018f8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <EXTI1_IRQHandler+0x1c>)
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <EXTI1_IRQHandler+0x1c>)
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[1]();
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <EXTI1_IRQHandler+0x20>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4798      	blx	r3
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40010400 	.word	0x40010400
 8001918:	2000028c 	.word	0x2000028c

0800191c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <EXTI2_IRQHandler+0x1c>)
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	4a04      	ldr	r2, [pc, #16]	; (8001938 <EXTI2_IRQHandler+0x1c>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[2]();
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <EXTI2_IRQHandler+0x20>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4798      	blx	r3
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40010400 	.word	0x40010400
 800193c:	2000028c 	.word	0x2000028c

08001940 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <EXTI3_IRQHandler+0x1c>)
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <EXTI3_IRQHandler+0x1c>)
 800194a:	f043 0308 	orr.w	r3, r3, #8
 800194e:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[3]();
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <EXTI3_IRQHandler+0x20>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4798      	blx	r3
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40010400 	.word	0x40010400
 8001960:	2000028c 	.word	0x2000028c

08001964 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <EXTI4_IRQHandler+0x1c>)
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <EXTI4_IRQHandler+0x1c>)
 800196e:	f043 0310 	orr.w	r3, r3, #16
 8001972:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[4]();
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <EXTI4_IRQHandler+0x20>)
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	4798      	blx	r3
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40010400 	.word	0x40010400
 8001984:	2000028c 	.word	0x2000028c

08001988 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5){
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <EXTI9_5_IRQHandler+0xa0>)
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	f003 0320 	and.w	r3, r3, #32
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= 1 << 5;
 8001998:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <EXTI9_5_IRQHandler+0xa0>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	4a22      	ldr	r2, [pc, #136]	; (8001a28 <EXTI9_5_IRQHandler+0xa0>)
 800199e:	f043 0320 	orr.w	r3, r3, #32
 80019a2:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[5]();
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <EXTI9_5_IRQHandler+0xa4>)
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 6){
 80019aa:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <EXTI9_5_IRQHandler+0xa0>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d008      	beq.n	80019c8 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= 1 << 6;
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <EXTI9_5_IRQHandler+0xa0>)
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	4a1b      	ldr	r2, [pc, #108]	; (8001a28 <EXTI9_5_IRQHandler+0xa0>)
 80019bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019c0:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[6]();
 80019c2:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <EXTI9_5_IRQHandler+0xa4>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 7){
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <EXTI9_5_IRQHandler+0xa0>)
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= 1 << 7;
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <EXTI9_5_IRQHandler+0xa0>)
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <EXTI9_5_IRQHandler+0xa0>)
 80019da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019de:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[7]();
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <EXTI9_5_IRQHandler+0xa4>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 8){
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <EXTI9_5_IRQHandler+0xa0>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d008      	beq.n	8001a04 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= 1 << 8;
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <EXTI9_5_IRQHandler+0xa0>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <EXTI9_5_IRQHandler+0xa0>)
 80019f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fc:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[8]();
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <EXTI9_5_IRQHandler+0xa4>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 9){
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <EXTI9_5_IRQHandler+0xa0>)
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= 1 << 9;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <EXTI9_5_IRQHandler+0xa0>)
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <EXTI9_5_IRQHandler+0xa0>)
 8001a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1a:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[9]();
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <EXTI9_5_IRQHandler+0xa4>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	4798      	blx	r3
	}
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40010400 	.word	0x40010400
 8001a2c:	2000028c 	.word	0x2000028c

08001a30 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10){
 8001a34:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= 1 << 10;
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	4a31      	ldr	r2, [pc, #196]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4a:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 8001a4c:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <EXTI15_10_IRQHandler+0xe0>)
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 10){
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d008      	beq.n	8001a70 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= 1 << 10;
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	4a2a      	ldr	r2, [pc, #168]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001a64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a68:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <EXTI15_10_IRQHandler+0xe0>)
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 11){
 8001a70:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= 1 << 11;
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	4a22      	ldr	r2, [pc, #136]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001a82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a86:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[11]();
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <EXTI15_10_IRQHandler+0xe0>)
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 12){
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= 1 << 12;
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001aa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aa4:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[12]();
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <EXTI15_10_IRQHandler+0xe0>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 13){
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= 1 << 13;
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001abe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ac2:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[13]();
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <EXTI15_10_IRQHandler+0xe0>)
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac8:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 14){
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d008      	beq.n	8001ae8 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= 1 << 14;
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	4a0c      	ldr	r2, [pc, #48]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae0:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[14]();
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <EXTI15_10_IRQHandler+0xe0>)
 8001ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae6:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 15){
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <EXTI15_10_IRQHandler+0xd6>
		EXTI->PR |= 1 << 15;
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <EXTI15_10_IRQHandler+0xdc>)
 8001afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001afe:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[15]();
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <EXTI15_10_IRQHandler+0xe0>)
 8001b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b04:	4798      	blx	r3
	}
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40010400 	.word	0x40010400
 8001b10:	2000028c 	.word	0x2000028c

08001b14 <getCRLHPinPos>:
// Includes
// ------------------------------------------------------------------

#include "GPIO_Driver.h"

int getCRLHPinPos(uint16_t pinNum){
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80fb      	strh	r3, [r7, #6]
	switch(pinNum){
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	2b80      	cmp	r3, #128	; 0x80
 8001b22:	d042      	beq.n	8001baa <getCRLHPinPos+0x96>
 8001b24:	2b80      	cmp	r3, #128	; 0x80
 8001b26:	dc11      	bgt.n	8001b4c <getCRLHPinPos+0x38>
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d036      	beq.n	8001b9a <getCRLHPinPos+0x86>
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	dc06      	bgt.n	8001b3e <getCRLHPinPos+0x2a>
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d02e      	beq.n	8001b92 <getCRLHPinPos+0x7e>
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d02e      	beq.n	8001b96 <getCRLHPinPos+0x82>
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d028      	beq.n	8001b8e <getCRLHPinPos+0x7a>
 8001b3c:	e047      	b.n	8001bce <getCRLHPinPos+0xba>
 8001b3e:	2b20      	cmp	r3, #32
 8001b40:	d02f      	beq.n	8001ba2 <getCRLHPinPos+0x8e>
 8001b42:	2b40      	cmp	r3, #64	; 0x40
 8001b44:	d02f      	beq.n	8001ba6 <getCRLHPinPos+0x92>
 8001b46:	2b10      	cmp	r3, #16
 8001b48:	d029      	beq.n	8001b9e <getCRLHPinPos+0x8a>
 8001b4a:	e040      	b.n	8001bce <getCRLHPinPos+0xba>
 8001b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b50:	d033      	beq.n	8001bba <getCRLHPinPos+0xa6>
 8001b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b56:	dc09      	bgt.n	8001b6c <getCRLHPinPos+0x58>
 8001b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b5c:	d029      	beq.n	8001bb2 <getCRLHPinPos+0x9e>
 8001b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b62:	d028      	beq.n	8001bb6 <getCRLHPinPos+0xa2>
 8001b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b68:	d021      	beq.n	8001bae <getCRLHPinPos+0x9a>
 8001b6a:	e030      	b.n	8001bce <getCRLHPinPos+0xba>
 8001b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b70:	d027      	beq.n	8001bc2 <getCRLHPinPos+0xae>
 8001b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b76:	dc03      	bgt.n	8001b80 <getCRLHPinPos+0x6c>
 8001b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b7c:	d01f      	beq.n	8001bbe <getCRLHPinPos+0xaa>
 8001b7e:	e026      	b.n	8001bce <getCRLHPinPos+0xba>
 8001b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b84:	d01f      	beq.n	8001bc6 <getCRLHPinPos+0xb2>
 8001b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b8a:	d01e      	beq.n	8001bca <getCRLHPinPos+0xb6>
 8001b8c:	e01f      	b.n	8001bce <getCRLHPinPos+0xba>
	case (GPIO_PIN_0):
											return 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e01e      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_1):
											return 4;
 8001b92:	2304      	movs	r3, #4
 8001b94:	e01c      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_2):
											return 8;
 8001b96:	2308      	movs	r3, #8
 8001b98:	e01a      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_3):
											return 12;
 8001b9a:	230c      	movs	r3, #12
 8001b9c:	e018      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_4):
											return 16;
 8001b9e:	2310      	movs	r3, #16
 8001ba0:	e016      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_5):
											return 20;
 8001ba2:	2314      	movs	r3, #20
 8001ba4:	e014      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_6):
											return 24;
 8001ba6:	2318      	movs	r3, #24
 8001ba8:	e012      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_7):
											return 28;
 8001baa:	231c      	movs	r3, #28
 8001bac:	e010      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_8):
											return 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e00e      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_9):
											return 4;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	e00c      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_10):
											return 8;
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	e00a      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_11):
											return 12;
 8001bba:	230c      	movs	r3, #12
 8001bbc:	e008      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_12):
											return 16;
 8001bbe:	2310      	movs	r3, #16
 8001bc0:	e006      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_13):
											return 20;
 8001bc2:	2314      	movs	r3, #20
 8001bc4:	e004      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_14):
											return 24;
 8001bc6:	2318      	movs	r3, #24
 8001bc8:	e002      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_15):
											return 28;
 8001bca:	231c      	movs	r3, #28
 8001bcc:	e000      	b.n	8001bd0 <getCRLHPinPos+0xbc>
	break;
	}

	return 0;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <MCAL_GPIO_Init>:
 * @retval 		- none
 * Note 		- STM32F103C6 MCU has GPIO A, B, C, D, E modules but LQFP48 package
 * 				  has only GPIO A, B, PART of C/D exported as external From the MCU.
 */

void MCAL_GPIO_Init(GPIO_TYPE_DEF* gpiox, GPIO_PinConfig_t* pinConfig){
 8001bda:	b590      	push	{r4, r7, lr}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL), Configures pins from 0 >>> 7.
	// Port configuration register low (GPIOx_CRH), Configures pins from 8 >>> 15.

	volatile uint32_t* configReg = NULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
	uint8_t pin_CNF_MODE = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]

	// Configure if We are in CRL or CRH.
	configReg = (pinConfig->GPIO_PinNumber > GPIO_PIN_7) ? (&gpiox->CRH) : (&gpiox->CRL);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	2b80      	cmp	r3, #128	; 0x80
 8001bf2:	d902      	bls.n	8001bfa <MCAL_GPIO_Init+0x20>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	e000      	b.n	8001bfc <MCAL_GPIO_Init+0x22>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	60bb      	str	r3, [r7, #8]

	// Clear CNFy[1:0] MODEy[1:0];
	(*configReg) &= ~(0xf << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff86 	bl	8001b14 <getCRLHPinPos>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	230f      	movs	r3, #15
 8001c0c:	4093      	lsls	r3, r2
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	401a      	ands	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	601a      	str	r2, [r3, #0]

	// If PIN Is OUPUT.
	if(pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD){
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	789b      	ldrb	r3, [r3, #2]
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d00b      	beq.n	8001c3a <MCAL_GPIO_Init+0x60>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	789b      	ldrb	r3, [r3, #2]
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	d007      	beq.n	8001c3a <MCAL_GPIO_Init+0x60>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	789b      	ldrb	r3, [r3, #2]
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d003      	beq.n	8001c3a <MCAL_GPIO_Init+0x60>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	789b      	ldrb	r3, [r3, #2]
 8001c36:	2b07      	cmp	r3, #7
 8001c38:	d10e      	bne.n	8001c58 <MCAL_GPIO_Init+0x7e>

		pin_CNF_MODE = ((pinConfig->GPIO_MODE - 4) << 2) | (pinConfig->GPIO_OUTPUT_SPEED & 0x0f);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	789b      	ldrb	r3, [r3, #2]
 8001c3e:	3b04      	subs	r3, #4
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	b25a      	sxtb	r2, r3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	78db      	ldrb	r3, [r3, #3]
 8001c48:	b25b      	sxtb	r3, r3
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	73fb      	strb	r3, [r7, #15]
 8001c56:	e039      	b.n	8001ccc <MCAL_GPIO_Init+0xf2>
	}
	// If PIN Is INPUT.
	else {	// MODE = 00: Input mode (reset state).
		if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinConfig->GPIO_MODE == GPIO_MODE_ANALOG){
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	789b      	ldrb	r3, [r3, #2]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d003      	beq.n	8001c68 <MCAL_GPIO_Init+0x8e>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	789b      	ldrb	r3, [r3, #2]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10c      	bne.n	8001c82 <MCAL_GPIO_Init+0xa8>
			pin_CNF_MODE |= ((pinConfig->GPIO_MODE << 2)) & 0x0f;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	789b      	ldrb	r3, [r3, #2]
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	b25b      	sxtb	r3, r3
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	b25a      	sxtb	r2, r3
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	b25b      	sxtb	r3, r3
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e024      	b.n	8001ccc <MCAL_GPIO_Init+0xf2>

		} else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF){
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	789b      	ldrb	r3, [r3, #2]
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d104      	bne.n	8001c94 <MCAL_GPIO_Init+0xba>
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_FLO << 2)) & 0x0f;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	f043 0304 	orr.w	r3, r3, #4
 8001c90:	73fb      	strb	r3, [r7, #15]
 8001c92:	e01b      	b.n	8001ccc <MCAL_GPIO_Init+0xf2>
		}else{
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_PU << 2)) & 0x0f;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	f043 0308 	orr.w	r3, r3, #8
 8001c9a:	73fb      	strb	r3, [r7, #15]

			// Table 20. Port bit configuration table PxODR configure if pull-up or down.
			if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	789b      	ldrb	r3, [r3, #2]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d107      	bne.n	8001cb4 <MCAL_GPIO_Init+0xda>
				gpiox->ODR |= pinConfig->GPIO_PinNumber;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	8812      	ldrh	r2, [r2, #0]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	e00b      	b.n	8001ccc <MCAL_GPIO_Init+0xf2>
			}else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PD) {
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	789b      	ldrb	r3, [r3, #2]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d107      	bne.n	8001ccc <MCAL_GPIO_Init+0xf2>
				gpiox->ODR &= ~(pinConfig->GPIO_PinNumber);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	8812      	ldrh	r2, [r2, #0]
 8001cc4:	43d2      	mvns	r2, r2
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	60da      	str	r2, [r3, #12]
			}
		}


	}
	*configReg |= (pin_CNF_MODE << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 8001ccc:	7bfc      	ldrb	r4, [r7, #15]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ff1e 	bl	8001b14 <getCRLHPinPos>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	fa04 f203 	lsl.w	r2, r4, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	601a      	str	r2, [r3, #0]

}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd90      	pop	{r4, r7, pc}

08001cf0 <MCAL_GPIO_WritePin>:
 * @param [in]	- value: Set pin to a specific value.
 * @retval 		- none.
 * Note 		- none
 */

void MCAL_GPIO_WritePin(GPIO_TYPE_DEF* gpiox, uint16_t pinNum, uint8_t value){
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	707b      	strb	r3, [r7, #1]
	if(value == GPIO_PIN_HIGH){
 8001d00:	787b      	ldrb	r3, [r7, #1]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d106      	bne.n	8001d14 <MCAL_GPIO_WritePin+0x24>
		gpiox->ODR |= (uint32_t)pinNum;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	887b      	ldrh	r3, [r7, #2]
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60da      	str	r2, [r3, #12]
	}else {
		gpiox->ODR &= (uint32_t)(~pinNum);
		// OR
		// gpiox->BRR = (uint32_t)pinNum;
	}
}
 8001d12:	e006      	b.n	8001d22 <MCAL_GPIO_WritePin+0x32>
		gpiox->ODR &= (uint32_t)(~pinNum);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	887a      	ldrh	r2, [r7, #2]
 8001d1a:	43d2      	mvns	r2, r2
 8001d1c:	401a      	ands	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	60da      	str	r2, [r3, #12]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <MCAL_RCC_GET_SYS_CLKFreq>:
//1101: SYSCLK divided by 128
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHBPreSCTable[17U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

uint32_t MCAL_RCC_GET_SYS_CLKFreq(void){
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
	switch(RCC->CFGR >> 2 & 0b11){
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MCAL_RCC_GET_SYS_CLKFreq+0x34>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d006      	beq.n	8001d4c <MCAL_RCC_GET_SYS_CLKFreq+0x20>
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d302      	bcc.n	8001d48 <MCAL_RCC_GET_SYS_CLKFreq+0x1c>
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d004      	beq.n	8001d50 <MCAL_RCC_GET_SYS_CLKFreq+0x24>
 8001d46:	e005      	b.n	8001d54 <MCAL_RCC_GET_SYS_CLKFreq+0x28>
	case 0:
		return HSI_RC_CLK;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MCAL_RCC_GET_SYS_CLKFreq+0x38>)
 8001d4a:	e004      	b.n	8001d56 <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	case 1:
		// ToDo and you need to calculate it.
		return HSE_CLK;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <MCAL_RCC_GET_SYS_CLKFreq+0x3c>)
 8001d4e:	e002      	b.n	8001d56 <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	case 2:
		// ToDo and you need to calculate it.
		return 16000000;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MCAL_RCC_GET_SYS_CLKFreq+0x40>)
 8001d52:	e000      	b.n	8001d56 <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	}

	return 0;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000
 8001d64:	007a1200 	.word	0x007a1200
 8001d68:	00186a00 	.word	0x00186a00
 8001d6c:	00f42400 	.word	0x00f42400

08001d70 <MCAL_RCC_GET_HCLKFreq>:
uint32_t MCAL_RCC_GET_HCLKFreq(void){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYS_CLKFreq() >> (AHBPreSCTable[RCC->CFGR >> 4 & 0xF]));
 8001d74:	f7ff ffda 	bl	8001d2c <MCAL_RCC_GET_SYS_CLKFreq>
 8001d78:	4601      	mov	r1, r0
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <MCAL_RCC_GET_HCLKFreq+0x20>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <MCAL_RCC_GET_HCLKFreq+0x24>)
 8001d86:	5cd3      	ldrb	r3, [r2, r3]
 8001d88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	0800455c 	.word	0x0800455c

08001d98 <MCAL_RCC_GET_PCLK1Freq>:
uint32_t MCAL_RCC_GET_PCLK1Freq(void){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	// Bits 10:8  PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 8 & 0b111]));
 8001d9c:	f7ff ffe8 	bl	8001d70 <MCAL_RCC_GET_HCLKFreq>
 8001da0:	4601      	mov	r1, r0
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <MCAL_RCC_GET_PCLK1Freq+0x20>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <MCAL_RCC_GET_PCLK1Freq+0x24>)
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
 8001db0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	08004554 	.word	0x08004554

08001dc0 <MCAL_RCC_GET_PCLK2Freq>:
uint32_t MCAL_RCC_GET_PCLK2Freq(void){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	// Bits 13:11  PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 11 & 0b111]));
 8001dc4:	f7ff ffd4 	bl	8001d70 <MCAL_RCC_GET_HCLKFreq>
 8001dc8:	4601      	mov	r1, r0
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <MCAL_RCC_GET_PCLK2Freq+0x20>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	0adb      	lsrs	r3, r3, #11
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	4a03      	ldr	r2, [pc, #12]	; (8001de4 <MCAL_RCC_GET_PCLK2Freq+0x24>)
 8001dd6:	5cd3      	ldrb	r3, [r2, r3]
 8001dd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08004554 	.word	0x08004554

08001de8 <delay>:
}




void delay(uint16_t time, uint8_t unit, uint32_t clk){
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	603a      	str	r2, [r7, #0]
 8001df2:	80fb      	strh	r3, [r7, #6]
 8001df4:	460b      	mov	r3, r1
 8001df6:	717b      	strb	r3, [r7, #5]
	delayFlag = 1;
 8001df8:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <delay+0x150>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
	// disable NVIC Interrupt
	//NVIC_IRQ28_TIM2_Disable;
	// Enable Clock For Selected Timer
	RCC_TIM2_CLk_EN();
 8001dfe:	4b4f      	ldr	r3, [pc, #316]	; (8001f3c <delay+0x154>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	4a4e      	ldr	r2, [pc, #312]	; (8001f3c <delay+0x154>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	61d3      	str	r3, [r2, #28]

	// Timer off (be sure that is configured from the off state (Optional))
	TIM2->CR1 &= ~(1 << 0);
 8001e0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	6013      	str	r3, [r2, #0]

	uint8_t  userFlag = 1;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	77fb      	strb	r3, [r7, #31]
	uint32_t userTop  = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
	uint32_t userPre  = 1;
 8001e22:	2301      	movs	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
	uint32_t timeUnit = 1000;
 8001e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2a:	613b      	str	r3, [r7, #16]
	uint8_t  increase = 2;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	73fb      	strb	r3, [r7, #15]

	if(unit == 0){
 8001e30:	797b      	ldrb	r3, [r7, #5]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10d      	bne.n	8001e52 <delay+0x6a>
		timeUnit = 1000;
 8001e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3a:	613b      	str	r3, [r7, #16]
		if(time > 3000){
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d902      	bls.n	8001e4c <delay+0x64>
			increase = 100;
 8001e46:	2364      	movs	r3, #100	; 0x64
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	e030      	b.n	8001eae <delay+0xc6>
		}else{
			increase = 10;
 8001e4c:	230a      	movs	r3, #10
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e02d      	b.n	8001eae <delay+0xc6>
		}
	}else {
		timeUnit = 1000000;
 8001e52:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <delay+0x158>)
 8001e54:	613b      	str	r3, [r7, #16]
		if(time > 3000){
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d902      	bls.n	8001e66 <delay+0x7e>
			increase = 10;
 8001e60:	230a      	movs	r3, #10
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	e023      	b.n	8001eae <delay+0xc6>
		}else {
			increase = 5;
 8001e66:	2305      	movs	r3, #5
 8001e68:	73fb      	strb	r3, [r7, #15]
		}
	}

	while(userFlag == 1){
 8001e6a:	e020      	b.n	8001eae <delay+0xc6>

		userTop = (clk/timeUnit*time)/(userPre);
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	88fa      	ldrh	r2, [r7, #6]
 8001e76:	fb02 f203 	mul.w	r2, r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	61bb      	str	r3, [r7, #24]
		//7272 = (8000000/1000*time)/10;
		//7272 = (8000 * time)/10;
		//72720 / 8000 =

		if(userTop >= 32000){
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001e88:	d30f      	bcc.n	8001eaa <delay+0xc2>
			if(userPre > 65530){
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d905      	bls.n	8001ea0 <delay+0xb8>
				userPre = 65530;
 8001e94:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8001e98:	617b      	str	r3, [r7, #20]
				userFlag = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	77fb      	strb	r3, [r7, #31]
 8001e9e:	e006      	b.n	8001eae <delay+0xc6>
			}else {
				userPre += increase;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	e001      	b.n	8001eae <delay+0xc6>
			}
		}else {
			userFlag = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	77fb      	strb	r3, [r7, #31]
	while(userFlag == 1){
 8001eae:	7ffb      	ldrb	r3, [r7, #31]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d0db      	beq.n	8001e6c <delay+0x84>
		}
	}

	// Timer Off
	TIM2->CR1 &= ~(1<<CEN);
 8001eb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ebe:	f023 0301 	bic.w	r3, r3, #1
 8001ec2:	6013      	str	r3, [r2, #0]
	 * 0: Any of the following events generate an update interrupt or DMA request if enabled.
	 * These events can be:
	 * Counter overflow/underflow
	 */
	// Only counter overflow/underflow generates an update
	TIM2->CR1 |= (1 << URS);
 8001ec4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	6013      	str	r3, [r2, #0]
	 * Bit 0  UIE: Update interrupt enable
	 *0: Update interrupt disabled.
	 *1: Update interrupt enabled.
	 */
	// update interrupt enabled
	TIM2->DIER |= (1 << UIE);
 8001ed4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	60d3      	str	r3, [r2, #12]

	TIM2->ARR = userTop;
 8001ee4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->PSC = (userPre - 1);
 8001eec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6293      	str	r3, [r2, #40]	; 0x28
	// Re-Initialize the counter and generates an update of the registers.
	TIM2->EGR |= (1 << 0);
 8001ef6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6153      	str	r3, [r2, #20]
	// Enable Timer
	TIM2->CR1 |= (1 << CEN);
 8001f06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6013      	str	r3, [r2, #0]

	NVIC_IRQ28_TIM2_Enable; 
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <delay+0x15c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <delay+0x15c>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f20:	6013      	str	r3, [r2, #0]

	while(delayFlag);
 8001f22:	bf00      	nop
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <delay+0x150>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1fb      	bne.n	8001f24 <delay+0x13c>
}
 8001f2c:	bf00      	nop
 8001f2e:	3724      	adds	r7, #36	; 0x24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000002 	.word	0x20000002
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	000f4240 	.word	0x000f4240
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <TIM1CalcMicrosInit>:
		return x;
	}
}


void TIM1CalcMicrosInit(void){
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
	// Enable Clock For Timer 1
	RCC_TIM1_CLk_EN();
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <TIM1CalcMicrosInit+0x70>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <TIM1CalcMicrosInit+0x70>)
 8001f52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f56:	6193      	str	r3, [r2, #24]

	TIM1 -> CR1 &= ~(1<<CEN);
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <TIM1CalcMicrosInit+0x74>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <TIM1CalcMicrosInit+0x74>)
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	6013      	str	r3, [r2, #0]
	TIM1 -> CR1 |= (1 << URS);
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <TIM1CalcMicrosInit+0x74>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <TIM1CalcMicrosInit+0x74>)
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	6013      	str	r3, [r2, #0]
	TIM1 -> DIER |= (1 << UIE);
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <TIM1CalcMicrosInit+0x74>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <TIM1CalcMicrosInit+0x74>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	60d3      	str	r3, [r2, #12]

	TIM1->ARR = 64000; // Peak value to get delay of 8ms at freq = 8000000hz
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <TIM1CalcMicrosInit+0x74>)
 8001f7e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->PSC = 0;
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <TIM1CalcMicrosInit+0x74>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->EGR |= (1<<0);
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <TIM1CalcMicrosInit+0x74>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <TIM1CalcMicrosInit+0x74>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6153      	str	r3, [r2, #20]
	// Enable Timer
	TIM1->CR1 |= (1 << 0);
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <TIM1CalcMicrosInit+0x74>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a08      	ldr	r2, [pc, #32]	; (8001fbc <TIM1CalcMicrosInit+0x74>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6013      	str	r3, [r2, #0]

	NVIC_IRQ25_TIM1_Enable;
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <TIM1CalcMicrosInit+0x78>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <TIM1CalcMicrosInit+0x78>)
 8001fa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fac:	6013      	str	r3, [r2, #0]
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40012c00 	.word	0x40012c00
 8001fc0:	e000e100 	.word	0xe000e100

08001fc4 <TIM1CalcMicros>:


uint64_t TIM1CalcMicros(uint32_t clk){
 8001fc4:	b490      	push	{r4, r7}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	timerTicksTIM1 = TIM1->CNT;
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <TIM1CalcMicros+0x54>)
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <TIM1CalcMicros+0x58>)
 8001fd4:	801a      	strh	r2, [r3, #0]
	xMicros = ((timerTicksTIM1 + overflowTimsTIM1 * 64000)) / (clk/1000000); // (time in micro-seconds)
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <TIM1CalcMicros+0x58>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b10      	ldr	r3, [pc, #64]	; (8002020 <TIM1CalcMicros+0x5c>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8001fe6:	fb03 f301 	mul.w	r3, r3, r1
 8001fea:	4413      	add	r3, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a0c      	ldr	r2, [pc, #48]	; (8002024 <TIM1CalcMicros+0x60>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0c9b      	lsrs	r3, r3, #18
 8001ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ffc:	f04f 0400 	mov.w	r4, #0
 8002000:	4a09      	ldr	r2, [pc, #36]	; (8002028 <TIM1CalcMicros+0x64>)
 8002002:	e9c2 3400 	strd	r3, r4, [r2]
	return xMicros;
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <TIM1CalcMicros+0x64>)
 8002008:	cb18      	ldmia	r3, {r3, r4}
}
 800200a:	4618      	mov	r0, r3
 800200c:	4621      	mov	r1, r4
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bc90      	pop	{r4, r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40012c00 	.word	0x40012c00
 800201c:	20000212 	.word	0x20000212
 8002020:	20000210 	.word	0x20000210
 8002024:	431bde83 	.word	0x431bde83
 8002028:	20000218 	.word	0x20000218

0800202c <TIM2_IRQHandler>:


// Timer ISR() Handler

// IRQ for delay Function with Timer2
void TIM2_IRQHandler(){
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(1 << 0); // Update Interrupt Flag
 8002030:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	6113      	str	r3, [r2, #16]
	delayFlag = 0;
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <TIM2_IRQHandler+0x34>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]

	TIM2->CR1 &= ~(1<<CEN);
 8002046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6013      	str	r3, [r2, #0]
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000002 	.word	0x20000002

08002064 <TIM1_UP_IRQHandler>:


void TIM1_UP_IRQHandler() {
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
        // Clear the update interrupt flag
        TIM1->SR &= ~(1 << 0);
 8002068:	4b07      	ldr	r3, [pc, #28]	; (8002088 <TIM1_UP_IRQHandler+0x24>)
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	4a06      	ldr	r2, [pc, #24]	; (8002088 <TIM1_UP_IRQHandler+0x24>)
 800206e:	f023 0301 	bic.w	r3, r3, #1
 8002072:	6113      	str	r3, [r2, #16]
    	overflowTimsTIM1++;
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <TIM1_UP_IRQHandler+0x28>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	3301      	adds	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <TIM1_UP_IRQHandler+0x28>)
 800207e:	801a      	strh	r2, [r3, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	40012c00 	.word	0x40012c00
 800208c:	20000210 	.word	0x20000210

08002090 <TIM3_IRQHandler>:


void TIM3_IRQHandler(){
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
	TIM3->SR &= ~(1 << 0);
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <TIM3_IRQHandler+0x24>)
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	4a06      	ldr	r2, [pc, #24]	; (80020b4 <TIM3_IRQHandler+0x24>)
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	6113      	str	r3, [r2, #16]
	overflowTimsTIM3++;
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <TIM3_IRQHandler+0x28>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <TIM3_IRQHandler+0x28>)
 80020aa:	801a      	strh	r2, [r3, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	40000400 	.word	0x40000400
 80020b8:	2000020e 	.word	0x2000020e

080020bc <TIM4_IRQHandler>:
// IRQ for timeCalc function with Timer4.
void TIM4_IRQHandler(){
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
	TIM4->SR &= ~(1 << 0);
 80020c0:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <TIM4_IRQHandler+0x24>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	4a06      	ldr	r2, [pc, #24]	; (80020e0 <TIM4_IRQHandler+0x24>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	6113      	str	r3, [r2, #16]
	overflowTimsTIM4++;
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <TIM4_IRQHandler+0x28>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <TIM4_IRQHandler+0x28>)
 80020d6:	801a      	strh	r2, [r3, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	40000800 	.word	0x40000800
 80020e4:	2000020c 	.word	0x2000020c

080020e8 <MCAL_UART_Init>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Support for now Asynchronous mode & clock 8 MHZ.
 */

void MCAL_UART_Init(UART_TYPE_DEF* uartx, UART_Config_t* uartCfg){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]

	// Enable Clock for given uart peripheral.
	if(uartx == UART1){
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a5d      	ldr	r2, [pc, #372]	; (800226c <MCAL_UART_Init+0x184>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d109      	bne.n	800210e <MCAL_UART_Init+0x26>
		UARTGlobalCfg[0] = uartCfg;
 80020fa:	4a5d      	ldr	r2, [pc, #372]	; (8002270 <MCAL_UART_Init+0x188>)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6013      	str	r3, [r2, #0]
		RCC_UART1_CLk_EN();
 8002100:	4b5c      	ldr	r3, [pc, #368]	; (8002274 <MCAL_UART_Init+0x18c>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a5b      	ldr	r2, [pc, #364]	; (8002274 <MCAL_UART_Init+0x18c>)
 8002106:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	e01a      	b.n	8002144 <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART2){
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a59      	ldr	r2, [pc, #356]	; (8002278 <MCAL_UART_Init+0x190>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d109      	bne.n	800212a <MCAL_UART_Init+0x42>
		UARTGlobalCfg[1] = uartCfg;
 8002116:	4a56      	ldr	r2, [pc, #344]	; (8002270 <MCAL_UART_Init+0x188>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6053      	str	r3, [r2, #4]
		RCC_UART2_CLk_EN();
 800211c:	4b55      	ldr	r3, [pc, #340]	; (8002274 <MCAL_UART_Init+0x18c>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	4a54      	ldr	r2, [pc, #336]	; (8002274 <MCAL_UART_Init+0x18c>)
 8002122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002126:	61d3      	str	r3, [r2, #28]
 8002128:	e00c      	b.n	8002144 <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART3){
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a53      	ldr	r2, [pc, #332]	; (800227c <MCAL_UART_Init+0x194>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d108      	bne.n	8002144 <MCAL_UART_Init+0x5c>
		UARTGlobalCfg[2] = uartCfg;
 8002132:	4a4f      	ldr	r2, [pc, #316]	; (8002270 <MCAL_UART_Init+0x188>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6093      	str	r3, [r2, #8]
		RCC_UART3_CLk_EN();
 8002138:	4b4e      	ldr	r3, [pc, #312]	; (8002274 <MCAL_UART_Init+0x18c>)
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	4a4d      	ldr	r2, [pc, #308]	; (8002274 <MCAL_UART_Init+0x18c>)
 800213e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002142:	61d3      	str	r3, [r2, #28]
	}

	// Enable UART Module
	uartx->CR1 |= 1 << 13;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	60da      	str	r2, [r3, #12]

	// Enable UART tx and rx
	uartx->CR1 |= uartCfg->Mode;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	7812      	ldrb	r2, [r2, #0]
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60da      	str	r2, [r3, #12]

	// Payload width
	uartx->CR1 |= uartCfg->Payload;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	7a12      	ldrb	r2, [r2, #8]
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	60da      	str	r2, [r3, #12]

	// Configuration of parity control bit fields.
	uartx->CR2 |= uartCfg->Parity;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	7a52      	ldrb	r2, [r2, #9]
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	611a      	str	r2, [r3, #16]

	// configure number of stop bits
	uartx->CR2 |= uartCfg->StopBits;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	7a92      	ldrb	r2, [r2, #10]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	611a      	str	r2, [r3, #16]

	// uart Hardware Flow Control.
	uartx->CR3 |= uartCfg->HwFlowCtl;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	7ad2      	ldrb	r2, [r2, #11]
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	615a      	str	r2, [r3, #20]

	// Configuration of BRR.
	// PCLK1 for USART2, 3.
	// PCLK2 for USART1.

	if(uartx == UART1){
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a34      	ldr	r2, [pc, #208]	; (800226c <MCAL_UART_Init+0x184>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d105      	bne.n	80021aa <MCAL_UART_Init+0xc2>
		pclk = MCAL_RCC_GET_PCLK2Freq();
 800219e:	f7ff fe0f 	bl	8001dc0 <MCAL_RCC_GET_PCLK2Freq>
 80021a2:	4602      	mov	r2, r0
 80021a4:	4b36      	ldr	r3, [pc, #216]	; (8002280 <MCAL_UART_Init+0x198>)
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	e004      	b.n	80021b4 <MCAL_UART_Init+0xcc>
	}else {
		pclk = MCAL_RCC_GET_PCLK1Freq();
 80021aa:	f7ff fdf5 	bl	8001d98 <MCAL_RCC_GET_PCLK1Freq>
 80021ae:	4602      	mov	r2, r0
 80021b0:	4b33      	ldr	r3, [pc, #204]	; (8002280 <MCAL_UART_Init+0x198>)
 80021b2:	601a      	str	r2, [r3, #0]
	}

	BRR = UART_BRR_REG(pclk, uartCfg->BaudRate);
 80021b4:	4b32      	ldr	r3, [pc, #200]	; (8002280 <MCAL_UART_Init+0x198>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	0119      	lsls	r1, r3, #4
 80021c4:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <MCAL_UART_Init+0x198>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	009a      	lsls	r2, r3, #2
 80021d0:	441a      	add	r2, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021dc:	4b28      	ldr	r3, [pc, #160]	; (8002280 <MCAL_UART_Init+0x198>)
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ea:	2064      	movs	r0, #100	; 0x64
 80021ec:	fb00 f303 	mul.w	r3, r0, r3
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	4a23      	ldr	r2, [pc, #140]	; (8002284 <MCAL_UART_Init+0x19c>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	430b      	orrs	r3, r1
 8002202:	4a21      	ldr	r2, [pc, #132]	; (8002288 <MCAL_UART_Init+0x1a0>)
 8002204:	6013      	str	r3, [r2, #0]
	uartx->BRR = BRR;
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <MCAL_UART_Init+0x1a0>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	609a      	str	r2, [r3, #8]

	// Enable / Disable Interrupt.
	if(uartCfg->IRQ_Enable != UART_IRQ_Eanble_NONE){
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	7b1b      	ldrb	r3, [r3, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d026      	beq.n	8002264 <MCAL_UART_Init+0x17c>
		uartx->CR1 |= (uartCfg->IRQ_Enable);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	7b12      	ldrb	r2, [r2, #12]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	60da      	str	r2, [r3, #12]
		// Enable NVIC for uartx IRQ.
		if(uartx == UART1){
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a11      	ldr	r2, [pc, #68]	; (800226c <MCAL_UART_Init+0x184>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d106      	bne.n	800223a <MCAL_UART_Init+0x152>
			NVIC_IRQ37_UART1_Enable;
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <MCAL_UART_Init+0x1a4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a16      	ldr	r2, [pc, #88]	; (800228c <MCAL_UART_Init+0x1a4>)
 8002232:	f043 0320 	orr.w	r3, r3, #32
 8002236:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_UART2_Enable;
		}else if(uartx == UART3){
			NVIC_IRQ39_UART3_Enable;
		}
	}
}
 8002238:	e014      	b.n	8002264 <MCAL_UART_Init+0x17c>
		}else if(uartx == UART2){
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <MCAL_UART_Init+0x190>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d106      	bne.n	8002250 <MCAL_UART_Init+0x168>
			NVIC_IRQ38_UART2_Enable;
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <MCAL_UART_Init+0x1a4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a11      	ldr	r2, [pc, #68]	; (800228c <MCAL_UART_Init+0x1a4>)
 8002248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800224c:	6013      	str	r3, [r2, #0]
}
 800224e:	e009      	b.n	8002264 <MCAL_UART_Init+0x17c>
		}else if(uartx == UART3){
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a0a      	ldr	r2, [pc, #40]	; (800227c <MCAL_UART_Init+0x194>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d105      	bne.n	8002264 <MCAL_UART_Init+0x17c>
			NVIC_IRQ39_UART3_Enable;
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <MCAL_UART_Init+0x1a4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0b      	ldr	r2, [pc, #44]	; (800228c <MCAL_UART_Init+0x1a4>)
 800225e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40013800 	.word	0x40013800
 8002270:	200002d4 	.word	0x200002d4
 8002274:	40021000 	.word	0x40021000
 8002278:	40004400 	.word	0x40004400
 800227c:	40014800 	.word	0x40014800
 8002280:	200002d0 	.word	0x200002d0
 8002284:	51eb851f 	.word	0x51eb851f
 8002288:	200002cc 	.word	0x200002cc
 800228c:	e000e104 	.word	0xe000e104

08002290 <MCAL_UART_SendData>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- none
 */

void MCAL_UART_SendData	(UART_TYPE_DEF* uartx, uint16_t* pTxBuffer, uint8_t len, enum Polling_Mechanism pollingEn){
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	4611      	mov	r1, r2
 800229c:	461a      	mov	r2, r3
 800229e:	460b      	mov	r3, r1
 80022a0:	71fb      	strb	r3, [r7, #7]
 80022a2:	4613      	mov	r3, r2
 80022a4:	71bb      	strb	r3, [r7, #6]

	uint8_t *p8DataBits = (uint8_t*)pTxBuffer;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	61fb      	str	r3, [r7, #28]

	// Wait until TXE flag is set in the SR.
	if (pollingEn == enable) {
 80022aa:	79bb      	ldrb	r3, [r7, #6]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d106      	bne.n	80022be <MCAL_UART_SendData+0x2e>
		while (!(uartx->SR & 1 << 7));
 80022b0:	bf00      	nop
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f9      	beq.n	80022b2 <MCAL_UART_SendData+0x22>
	}

	// Check the usart word length item for 9 BIT or 8 BIT in a frame.
	uint8_t payloadLength = uartx == UART1 ? UARTGlobalCfg[0]->Payload : uartx == UART2 ? UARTGlobalCfg[1]->Payload : UARTGlobalCfg[2]->Payload;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4a20      	ldr	r2, [pc, #128]	; (8002344 <MCAL_UART_SendData+0xb4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d103      	bne.n	80022ce <MCAL_UART_SendData+0x3e>
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <MCAL_UART_SendData+0xb8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	7a1b      	ldrb	r3, [r3, #8]
 80022cc:	e00a      	b.n	80022e4 <MCAL_UART_SendData+0x54>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4a1e      	ldr	r2, [pc, #120]	; (800234c <MCAL_UART_SendData+0xbc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d103      	bne.n	80022de <MCAL_UART_SendData+0x4e>
 80022d6:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <MCAL_UART_SendData+0xb8>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	7a1b      	ldrb	r3, [r3, #8]
 80022dc:	e002      	b.n	80022e4 <MCAL_UART_SendData+0x54>
 80022de:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <MCAL_UART_SendData+0xb8>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	7a1b      	ldrb	r3, [r3, #8]
 80022e4:	75fb      	strb	r3, [r7, #23]
	uint8_t parity = uartx == UART1 ? UARTGlobalCfg[0]->Parity : uartx == UART2 ? UARTGlobalCfg[1]->Parity : UARTGlobalCfg[2]->Parity;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4a16      	ldr	r2, [pc, #88]	; (8002344 <MCAL_UART_SendData+0xb4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d103      	bne.n	80022f6 <MCAL_UART_SendData+0x66>
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <MCAL_UART_SendData+0xb8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	7a5b      	ldrb	r3, [r3, #9]
 80022f4:	e00a      	b.n	800230c <MCAL_UART_SendData+0x7c>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <MCAL_UART_SendData+0xbc>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d103      	bne.n	8002306 <MCAL_UART_SendData+0x76>
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <MCAL_UART_SendData+0xb8>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	7a5b      	ldrb	r3, [r3, #9]
 8002304:	e002      	b.n	800230c <MCAL_UART_SendData+0x7c>
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <MCAL_UART_SendData+0xb8>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	7a5b      	ldrb	r3, [r3, #9]
 800230c:	75bb      	strb	r3, [r7, #22]

	if (payloadLength == UART_PayloadLength_9B) {
		// Handle 9-bit data transmission (if supported)
	} else if (payloadLength == UART_PayloadLength_8B) {
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d112      	bne.n	800233a <MCAL_UART_SendData+0xaa>
		for (int i = 0; i < len; i++) {
 8002314:	2300      	movs	r3, #0
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	e00b      	b.n	8002332 <MCAL_UART_SendData+0xa2>
			// Calculate parity bit if enabled
			uint8_t data = *p8DataBits;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	757b      	strb	r3, [r7, #21]
			if (parity != UART_Parity_NONE) {
				// Implement parity bit calculation logic here based on parity configuration
			}

			uartx->DR = data;
 8002320:	7d7a      	ldrb	r2, [r7, #21]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	605a      	str	r2, [r3, #4]
			p8DataBits++;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3301      	adds	r3, #1
 800232a:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < len; i++) {
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	3301      	adds	r3, #1
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	429a      	cmp	r2, r3
 8002338:	dbef      	blt.n	800231a <MCAL_UART_SendData+0x8a>
		}
	}

}
 800233a:	bf00      	nop
 800233c:	3724      	adds	r7, #36	; 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	40013800 	.word	0x40013800
 8002348:	200002d4 	.word	0x200002d4
 800234c:	40004400 	.word	0x40004400

08002350 <MCAL_UART_GPIO_SetPins>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Those GPIO pins clock must be enabled after initialization.
 */

void MCAL_UART_GPIO_SetPins	(UART_TYPE_DEF* uartx){
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pinCfg;

	if(uartx == UART1){
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a2b      	ldr	r2, [pc, #172]	; (8002408 <MCAL_UART_GPIO_SetPins+0xb8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d118      	bne.n	8002392 <MCAL_UART_GPIO_SetPins+0x42>
		// PA10 RX
		// PA11 CTS
		// PA12 RTS

		// PA9 TX
		pinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8002360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002364:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8002366:	2306      	movs	r3, #6
 8002368:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 800236e:	f107 030c 	add.w	r3, r7, #12
 8002372:	4619      	mov	r1, r3
 8002374:	4825      	ldr	r0, [pc, #148]	; (800240c <MCAL_UART_GPIO_SetPins+0xbc>)
 8002376:	f7ff fc30 	bl	8001bda <MCAL_GPIO_Init>

		// PA10 RX
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800237a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800237e:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8002380:	2308      	movs	r3, #8
 8002382:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	4619      	mov	r1, r3
 800238a:	4820      	ldr	r0, [pc, #128]	; (800240c <MCAL_UART_GPIO_SetPins+0xbc>)
 800238c:	f7ff fc25 	bl	8001bda <MCAL_GPIO_Init>
			pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &pinCfg);
		}
	}
}
 8002390:	e036      	b.n	8002400 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART2){
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <MCAL_UART_GPIO_SetPins+0xc0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d116      	bne.n	80023c8 <MCAL_UART_GPIO_SetPins+0x78>
		pinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800239a:	2304      	movs	r3, #4
 800239c:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800239e:	2306      	movs	r3, #6
 80023a0:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 80023a6:	f107 030c 	add.w	r3, r7, #12
 80023aa:	4619      	mov	r1, r3
 80023ac:	4817      	ldr	r0, [pc, #92]	; (800240c <MCAL_UART_GPIO_SetPins+0xbc>)
 80023ae:	f7ff fc14 	bl	8001bda <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80023b2:	2308      	movs	r3, #8
 80023b4:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 80023b6:	2308      	movs	r3, #8
 80023b8:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	4619      	mov	r1, r3
 80023c0:	4812      	ldr	r0, [pc, #72]	; (800240c <MCAL_UART_GPIO_SetPins+0xbc>)
 80023c2:	f7ff fc0a 	bl	8001bda <MCAL_GPIO_Init>
}
 80023c6:	e01b      	b.n	8002400 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART3){
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a12      	ldr	r2, [pc, #72]	; (8002414 <MCAL_UART_GPIO_SetPins+0xc4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d117      	bne.n	8002400 <MCAL_UART_GPIO_SetPins+0xb0>
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80023d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023d4:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80023d6:	2306      	movs	r3, #6
 80023d8:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	4619      	mov	r1, r3
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <MCAL_UART_GPIO_SetPins+0xc8>)
 80023e6:	f7ff fbf8 	bl	8001bda <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80023ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023ee:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 80023f0:	2308      	movs	r3, #8
 80023f2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	4619      	mov	r1, r3
 80023fa:	4807      	ldr	r0, [pc, #28]	; (8002418 <MCAL_UART_GPIO_SetPins+0xc8>)
 80023fc:	f7ff fbed 	bl	8001bda <MCAL_GPIO_Init>
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40013800 	.word	0x40013800
 800240c:	40010800 	.word	0x40010800
 8002410:	40004400 	.word	0x40004400
 8002414:	40014800 	.word	0x40014800
 8002418:	40010c00 	.word	0x40010c00

0800241c <USART1_IRQHandler>:




// ISR()
void USART1_IRQHandler(){
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
	UARTGlobalCfg[0]->P_IRQ_Callback();
 8002420:	4b02      	ldr	r3, [pc, #8]	; (800242c <USART1_IRQHandler+0x10>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	4798      	blx	r3
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200002d4 	.word	0x200002d4

08002430 <USART2_IRQHandler>:

void USART2_IRQHandler(){
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
	UARTGlobalCfg[1]->P_IRQ_Callback();
 8002434:	4b02      	ldr	r3, [pc, #8]	; (8002440 <USART2_IRQHandler+0x10>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	4798      	blx	r3
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	200002d4 	.word	0x200002d4

08002444 <USART3_IRQHandler>:

void USART3_IRQHandler(){
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	UARTGlobalCfg[2]->P_IRQ_Callback();
 8002448:	4b02      	ldr	r3, [pc, #8]	; (8002454 <USART3_IRQHandler+0x10>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	4798      	blx	r3
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	200002d4 	.word	0x200002d4

08002458 <echoSensorRight>:
	//MCAL_UART_SendData(UART2, (uint8_t*)ch, (uint8_t)3, disable);
	//MCAL_UART_ReceiveData(UART2, &rp, enable);
}


void echoSensorRight(){
 8002458:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
	if(echoFlagRight == 0){
 8002460:	4b30      	ldr	r3, [pc, #192]	; (8002524 <echoSensorRight+0xcc>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <echoSensorRight+0x28>
		//timeCalc(TIM3, clk, TIM_START);
		startTimeRight = TIM1CalcMicros(clk);
 8002468:	482f      	ldr	r0, [pc, #188]	; (8002528 <echoSensorRight+0xd0>)
 800246a:	f7ff fdab 	bl	8001fc4 <TIM1CalcMicros>
 800246e:	4603      	mov	r3, r0
 8002470:	460c      	mov	r4, r1
 8002472:	4a2e      	ldr	r2, [pc, #184]	; (800252c <echoSensorRight+0xd4>)
 8002474:	e9c2 3400 	strd	r3, r4, [r2]
		echoFlagRight = 1;
 8002478:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <echoSensorRight+0xcc>)
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
		endTimeRight  = TIM1CalcMicros(clk);
		uint64_t diff = endTimeRight - startTimeRight;
		distanceRight = (((diff)*170) / 10000);
		echoFlagRight = 0;
	}
}
 800247e:	e04c      	b.n	800251a <echoSensorRight+0xc2>
		endTimeRight  = TIM1CalcMicros(clk);
 8002480:	4829      	ldr	r0, [pc, #164]	; (8002528 <echoSensorRight+0xd0>)
 8002482:	f7ff fd9f 	bl	8001fc4 <TIM1CalcMicros>
 8002486:	4603      	mov	r3, r0
 8002488:	460c      	mov	r4, r1
 800248a:	4a29      	ldr	r2, [pc, #164]	; (8002530 <echoSensorRight+0xd8>)
 800248c:	e9c2 3400 	strd	r3, r4, [r2]
		uint64_t diff = endTimeRight - startTimeRight;
 8002490:	4b27      	ldr	r3, [pc, #156]	; (8002530 <echoSensorRight+0xd8>)
 8002492:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002496:	4b25      	ldr	r3, [pc, #148]	; (800252c <echoSensorRight+0xd4>)
 8002498:	e9d3 5600 	ldrd	r5, r6, [r3]
 800249c:	460b      	mov	r3, r1
 800249e:	4614      	mov	r4, r2
 80024a0:	1b5b      	subs	r3, r3, r5
 80024a2:	eb64 0406 	sbc.w	r4, r4, r6
 80024a6:	e9c7 3400 	strd	r3, r4, [r7]
		distanceRight = (((diff)*170) / 10000);
 80024aa:	e9d7 5600 	ldrd	r5, r6, [r7]
 80024ae:	46ab      	mov	fp, r5
 80024b0:	46b4      	mov	ip, r6
 80024b2:	f04f 0100 	mov.w	r1, #0
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80024be:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80024c2:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80024c6:	468b      	mov	fp, r1
 80024c8:	4694      	mov	ip, r2
 80024ca:	eb1b 0b05 	adds.w	fp, fp, r5
 80024ce:	eb4c 0c06 	adc.w	ip, ip, r6
 80024d2:	f04f 0100 	mov.w	r1, #0
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	ea4f 120c 	mov.w	r2, ip, lsl #4
 80024de:	ea42 721b 	orr.w	r2, r2, fp, lsr #28
 80024e2:	ea4f 110b 	mov.w	r1, fp, lsl #4
 80024e6:	eb1b 0b01 	adds.w	fp, fp, r1
 80024ea:	eb4c 0c02 	adc.w	ip, ip, r2
 80024ee:	eb1b 030b 	adds.w	r3, fp, fp
 80024f2:	eb4c 040c 	adc.w	r4, ip, ip
 80024f6:	469b      	mov	fp, r3
 80024f8:	46a4      	mov	ip, r4
 80024fa:	4658      	mov	r0, fp
 80024fc:	4661      	mov	r1, ip
 80024fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	f7fe fda3 	bl	8001050 <__aeabi_uldivmod>
 800250a:	4603      	mov	r3, r0
 800250c:	460c      	mov	r4, r1
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <echoSensorRight+0xdc>)
 8002510:	e9c2 3400 	strd	r3, r4, [r2]
		echoFlagRight = 0;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <echoSensorRight+0xcc>)
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002524:	20000248 	.word	0x20000248
 8002528:	007a1200 	.word	0x007a1200
 800252c:	20000258 	.word	0x20000258
 8002530:	20000250 	.word	0x20000250
 8002534:	20000010 	.word	0x20000010

08002538 <echoSensorLeft>:

void echoSensorLeft(){
 8002538:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
	if(echoFlagLeft == 0){
 8002540:	4b30      	ldr	r3, [pc, #192]	; (8002604 <echoSensorLeft+0xcc>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10b      	bne.n	8002560 <echoSensorLeft+0x28>
		//timeCalc(TIM4, clk, TIM_START);
		startTimeLeft = TIM1CalcMicros(clk);
 8002548:	482f      	ldr	r0, [pc, #188]	; (8002608 <echoSensorLeft+0xd0>)
 800254a:	f7ff fd3b 	bl	8001fc4 <TIM1CalcMicros>
 800254e:	4603      	mov	r3, r0
 8002550:	460c      	mov	r4, r1
 8002552:	4a2e      	ldr	r2, [pc, #184]	; (800260c <echoSensorLeft+0xd4>)
 8002554:	e9c2 3400 	strd	r3, r4, [r2]
		echoFlagLeft = 1;
 8002558:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <echoSensorLeft+0xcc>)
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
		endTimeLeft = TIM1CalcMicros(clk);
		uint64_t diff = endTimeLeft - startTimeLeft;
		distanceLeft = (((diff)*170) / 10000);
		echoFlagLeft = 0;
	}
}
 800255e:	e04c      	b.n	80025fa <echoSensorLeft+0xc2>
		endTimeLeft = TIM1CalcMicros(clk);
 8002560:	4829      	ldr	r0, [pc, #164]	; (8002608 <echoSensorLeft+0xd0>)
 8002562:	f7ff fd2f 	bl	8001fc4 <TIM1CalcMicros>
 8002566:	4603      	mov	r3, r0
 8002568:	460c      	mov	r4, r1
 800256a:	4a29      	ldr	r2, [pc, #164]	; (8002610 <echoSensorLeft+0xd8>)
 800256c:	e9c2 3400 	strd	r3, r4, [r2]
		uint64_t diff = endTimeLeft - startTimeLeft;
 8002570:	4b27      	ldr	r3, [pc, #156]	; (8002610 <echoSensorLeft+0xd8>)
 8002572:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002576:	4b25      	ldr	r3, [pc, #148]	; (800260c <echoSensorLeft+0xd4>)
 8002578:	e9d3 5600 	ldrd	r5, r6, [r3]
 800257c:	460b      	mov	r3, r1
 800257e:	4614      	mov	r4, r2
 8002580:	1b5b      	subs	r3, r3, r5
 8002582:	eb64 0406 	sbc.w	r4, r4, r6
 8002586:	e9c7 3400 	strd	r3, r4, [r7]
		distanceLeft = (((diff)*170) / 10000);
 800258a:	e9d7 5600 	ldrd	r5, r6, [r7]
 800258e:	46ab      	mov	fp, r5
 8002590:	46b4      	mov	ip, r6
 8002592:	f04f 0100 	mov.w	r1, #0
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800259e:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80025a2:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80025a6:	468b      	mov	fp, r1
 80025a8:	4694      	mov	ip, r2
 80025aa:	eb1b 0b05 	adds.w	fp, fp, r5
 80025ae:	eb4c 0c06 	adc.w	ip, ip, r6
 80025b2:	f04f 0100 	mov.w	r1, #0
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	ea4f 120c 	mov.w	r2, ip, lsl #4
 80025be:	ea42 721b 	orr.w	r2, r2, fp, lsr #28
 80025c2:	ea4f 110b 	mov.w	r1, fp, lsl #4
 80025c6:	eb1b 0b01 	adds.w	fp, fp, r1
 80025ca:	eb4c 0c02 	adc.w	ip, ip, r2
 80025ce:	eb1b 030b 	adds.w	r3, fp, fp
 80025d2:	eb4c 040c 	adc.w	r4, ip, ip
 80025d6:	469b      	mov	fp, r3
 80025d8:	46a4      	mov	ip, r4
 80025da:	4658      	mov	r0, fp
 80025dc:	4661      	mov	r1, ip
 80025de:	f242 7210 	movw	r2, #10000	; 0x2710
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	f7fe fd33 	bl	8001050 <__aeabi_uldivmod>
 80025ea:	4603      	mov	r3, r0
 80025ec:	460c      	mov	r4, r1
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <echoSensorLeft+0xdc>)
 80025f0:	e9c2 3400 	strd	r3, r4, [r2]
		echoFlagLeft = 0;
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <echoSensorLeft+0xcc>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002604:	20000220 	.word	0x20000220
 8002608:	007a1200 	.word	0x007a1200
 800260c:	20000268 	.word	0x20000268
 8002610:	20000260 	.word	0x20000260
 8002614:	20000228 	.word	0x20000228

08002618 <echoSensorRear>:


void echoSensorRear(){
 8002618:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
	if(echoFlagRear == 0){
 8002620:	4b39      	ldr	r3, [pc, #228]	; (8002708 <echoSensorRear+0xf0>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10b      	bne.n	8002640 <echoSensorRear+0x28>
		startTimeRear = TIM1CalcMicros(clk);
 8002628:	4838      	ldr	r0, [pc, #224]	; (800270c <echoSensorRear+0xf4>)
 800262a:	f7ff fccb 	bl	8001fc4 <TIM1CalcMicros>
 800262e:	4603      	mov	r3, r0
 8002630:	460c      	mov	r4, r1
 8002632:	4a37      	ldr	r2, [pc, #220]	; (8002710 <echoSensorRear+0xf8>)
 8002634:	e9c2 3400 	strd	r3, r4, [r2]
		echoFlagRear = 1;
 8002638:	4b33      	ldr	r3, [pc, #204]	; (8002708 <echoSensorRear+0xf0>)
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
		if(distanceRear > 400){
			distanceRear = 0;
		}

	}
}
 800263e:	e05d      	b.n	80026fc <echoSensorRear+0xe4>
		endTimeRear = TIM1CalcMicros(clk);
 8002640:	4832      	ldr	r0, [pc, #200]	; (800270c <echoSensorRear+0xf4>)
 8002642:	f7ff fcbf 	bl	8001fc4 <TIM1CalcMicros>
 8002646:	4603      	mov	r3, r0
 8002648:	460c      	mov	r4, r1
 800264a:	4a32      	ldr	r2, [pc, #200]	; (8002714 <echoSensorRear+0xfc>)
 800264c:	e9c2 3400 	strd	r3, r4, [r2]
		uint64_t diff = endTimeRear - startTimeRear;
 8002650:	4b30      	ldr	r3, [pc, #192]	; (8002714 <echoSensorRear+0xfc>)
 8002652:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002656:	4b2e      	ldr	r3, [pc, #184]	; (8002710 <echoSensorRear+0xf8>)
 8002658:	e9d3 5600 	ldrd	r5, r6, [r3]
 800265c:	460b      	mov	r3, r1
 800265e:	4614      	mov	r4, r2
 8002660:	1b5b      	subs	r3, r3, r5
 8002662:	eb64 0406 	sbc.w	r4, r4, r6
 8002666:	e9c7 3400 	strd	r3, r4, [r7]
		distanceRear = (((diff)*170) / 10000);
 800266a:	e9d7 5600 	ldrd	r5, r6, [r7]
 800266e:	46ab      	mov	fp, r5
 8002670:	46b4      	mov	ip, r6
 8002672:	f04f 0100 	mov.w	r1, #0
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800267e:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 8002682:	ea4f 018b 	mov.w	r1, fp, lsl #2
 8002686:	468b      	mov	fp, r1
 8002688:	4694      	mov	ip, r2
 800268a:	eb1b 0b05 	adds.w	fp, fp, r5
 800268e:	eb4c 0c06 	adc.w	ip, ip, r6
 8002692:	f04f 0100 	mov.w	r1, #0
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	ea4f 120c 	mov.w	r2, ip, lsl #4
 800269e:	ea42 721b 	orr.w	r2, r2, fp, lsr #28
 80026a2:	ea4f 110b 	mov.w	r1, fp, lsl #4
 80026a6:	eb1b 0b01 	adds.w	fp, fp, r1
 80026aa:	eb4c 0c02 	adc.w	ip, ip, r2
 80026ae:	eb1b 030b 	adds.w	r3, fp, fp
 80026b2:	eb4c 040c 	adc.w	r4, ip, ip
 80026b6:	469b      	mov	fp, r3
 80026b8:	46a4      	mov	ip, r4
 80026ba:	4658      	mov	r0, fp
 80026bc:	4661      	mov	r1, ip
 80026be:	f242 7210 	movw	r2, #10000	; 0x2710
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	f7fe fcc3 	bl	8001050 <__aeabi_uldivmod>
 80026ca:	4603      	mov	r3, r0
 80026cc:	460c      	mov	r4, r1
 80026ce:	4a12      	ldr	r2, [pc, #72]	; (8002718 <echoSensorRear+0x100>)
 80026d0:	e9c2 3400 	strd	r3, r4, [r2]
		echoFlagRear = 0;
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <echoSensorRear+0xf0>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
		if(distanceRear > 400){
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <echoSensorRear+0x100>)
 80026dc:	cb18      	ldmia	r3, {r3, r4}
 80026de:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	42a2      	cmp	r2, r4
 80026e8:	bf08      	it	eq
 80026ea:	4299      	cmpeq	r1, r3
 80026ec:	d206      	bcs.n	80026fc <echoSensorRear+0xe4>
			distanceRear = 0;
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <echoSensorRear+0x100>)
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	f04f 0400 	mov.w	r4, #0
 80026f8:	e9c2 3400 	strd	r3, r4, [r2]
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002706:	bf00      	nop
 8002708:	20000230 	.word	0x20000230
 800270c:	007a1200 	.word	0x007a1200
 8002710:	20000240 	.word	0x20000240
 8002714:	20000238 	.word	0x20000238
 8002718:	20000008 	.word	0x20000008

0800271c <main>:


int main(void)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b099      	sub	sp, #100	; 0x64
 8002720:	af00      	add	r7, sp, #0
	RCC_GPIOB_CLk_EN();
 8002722:	4b94      	ldr	r3, [pc, #592]	; (8002974 <main+0x258>)
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	4a93      	ldr	r2, [pc, #588]	; (8002974 <main+0x258>)
 8002728:	f043 0308 	orr.w	r3, r3, #8
 800272c:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLk_EN();
 800272e:	4b91      	ldr	r3, [pc, #580]	; (8002974 <main+0x258>)
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	4a90      	ldr	r2, [pc, #576]	; (8002974 <main+0x258>)
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800273a:	4b8e      	ldr	r3, [pc, #568]	; (8002974 <main+0x258>)
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	4a8d      	ldr	r2, [pc, #564]	; (8002974 <main+0x258>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6193      	str	r3, [r2, #24]
	TIM1CalcMicrosInit();
 8002746:	f7ff fbff 	bl	8001f48 <TIM1CalcMicrosInit>

	// GPIO PIN Configuratoin
	GPIO_PinConfig_t pinCfg;

	pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800274a:	2304      	movs	r3, #4
 800274c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	pinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8002750:	2340      	movs	r3, #64	; 0x40
 8002752:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8002756:	2301      	movs	r3, #1
 8002758:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	MCAL_GPIO_Init(GPIOB, &pinCfg);
 800275c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002760:	4619      	mov	r1, r3
 8002762:	4885      	ldr	r0, [pc, #532]	; (8002978 <main+0x25c>)
 8002764:	f7ff fa39 	bl	8001bda <MCAL_GPIO_Init>

	pinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	MCAL_GPIO_Init(GPIOB, &pinCfg);
 800276e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002772:	4619      	mov	r1, r3
 8002774:	4880      	ldr	r0, [pc, #512]	; (8002978 <main+0x25c>)
 8002776:	f7ff fa30 	bl	8001bda <MCAL_GPIO_Init>
	pinCfg.GPIO_PinNumber = GPIO_PIN_8;
 800277a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800277e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	MCAL_GPIO_Init(GPIOB, &pinCfg);
 8002782:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002786:	4619      	mov	r1, r3
 8002788:	487b      	ldr	r0, [pc, #492]	; (8002978 <main+0x25c>)
 800278a:	f7ff fa26 	bl	8001bda <MCAL_GPIO_Init>


	// Ultra-sonci Sensor Configuration
	US_TypeDef usRight;
	usRight.trigPin = GPIO_PIN_7;
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	usRight.echoPin = EXTI6_PA6;
 8002794:	4a79      	ldr	r2, [pc, #484]	; (800297c <main+0x260>)
 8002796:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800279a:	ca07      	ldmia	r2, {r0, r1, r2}
 800279c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	usRight.port = GPIOA;
 80027a0:	4b77      	ldr	r3, [pc, #476]	; (8002980 <main+0x264>)
 80027a2:	657b      	str	r3, [r7, #84]	; 0x54
	usRight.P_IRQ_Callback = echoSensorRight;
 80027a4:	4b77      	ldr	r3, [pc, #476]	; (8002984 <main+0x268>)
 80027a6:	65bb      	str	r3, [r7, #88]	; 0x58
	ultraSonicInit(&usRight);
 80027a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fe fe89 	bl	80014c4 <ultraSonicInit>

	US_TypeDef usLeft;
	usLeft.trigPin = GPIO_PIN_5;
 80027b2:	2320      	movs	r3, #32
 80027b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	usLeft.echoPin = EXTI4_PA4;
 80027b6:	4a74      	ldr	r2, [pc, #464]	; (8002988 <main+0x26c>)
 80027b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80027be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	usLeft.port = GPIOA;
 80027c2:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <main+0x264>)
 80027c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	usLeft.P_IRQ_Callback = echoSensorLeft;
 80027c6:	4b71      	ldr	r3, [pc, #452]	; (800298c <main+0x270>)
 80027c8:	643b      	str	r3, [r7, #64]	; 0x40
	ultraSonicInit(&usLeft);
 80027ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fe78 	bl	80014c4 <ultraSonicInit>

	US_TypeDef usRear;
	usRear.trigPin = GPIO_PIN_10;
 80027d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027d8:	82bb      	strh	r3, [r7, #20]
	usRear.echoPin = EXTI15_PA15;
 80027da:	4a6d      	ldr	r2, [pc, #436]	; (8002990 <main+0x274>)
 80027dc:	f107 0318 	add.w	r3, r7, #24
 80027e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80027e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	usRear.port = GPIOA;
 80027e6:	4b66      	ldr	r3, [pc, #408]	; (8002980 <main+0x264>)
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
	usRear.P_IRQ_Callback = echoSensorRear;
 80027ea:	4b6a      	ldr	r3, [pc, #424]	; (8002994 <main+0x278>)
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
	ultraSonicInit(&usRear);
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fe66 	bl	80014c4 <ultraSonicInit>

	UART_Config_t uartCfg;
	uartCfg.BaudRate = UART_BaudRate_115200;
 80027f8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80027fc:	607b      	str	r3, [r7, #4]
	uartCfg.IRQ_Enable = UART_IRQ_Eanble_NONE;
 80027fe:	2300      	movs	r3, #0
 8002800:	733b      	strb	r3, [r7, #12]
	uartCfg.HwFlowCtl = UART_HwFlowCtl_NONE;
 8002802:	2300      	movs	r3, #0
 8002804:	72fb      	strb	r3, [r7, #11]
	uartCfg.Parity = UART_Parity_NONE;
 8002806:	2300      	movs	r3, #0
 8002808:	727b      	strb	r3, [r7, #9]
	uartCfg.Mode = UART_Mode_TX_RX;
 800280a:	230c      	movs	r3, #12
 800280c:	703b      	strb	r3, [r7, #0]
	uartCfg.Payload = UART_PayloadLength_8B;
 800280e:	2300      	movs	r3, #0
 8002810:	723b      	strb	r3, [r7, #8]
	uartCfg.StopBits = UART_StopBits_One;
 8002812:	2300      	movs	r3, #0
 8002814:	72bb      	strb	r3, [r7, #10]
	uartCfg.P_IRQ_Callback = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]

	MCAL_UART_Init(UART2, &uartCfg);
 800281a:	463b      	mov	r3, r7
 800281c:	4619      	mov	r1, r3
 800281e:	485e      	ldr	r0, [pc, #376]	; (8002998 <main+0x27c>)
 8002820:	f7ff fc62 	bl	80020e8 <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(UART2);
 8002824:	485c      	ldr	r0, [pc, #368]	; (8002998 <main+0x27c>)
 8002826:	f7ff fd93 	bl	8002350 <MCAL_UART_GPIO_SetPins>

	while(1){
		triggerUltraSonic(&usRear, clk);
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	495b      	ldr	r1, [pc, #364]	; (800299c <main+0x280>)
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe fe71 	bl	8001518 <triggerUltraSonic>
		triggerUltraSonic(&usLeft, clk);
 8002836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800283a:	4958      	ldr	r1, [pc, #352]	; (800299c <main+0x280>)
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fe6b 	bl	8001518 <triggerUltraSonic>
		triggerUltraSonic(&usRight, clk);
 8002842:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002846:	4955      	ldr	r1, [pc, #340]	; (800299c <main+0x280>)
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fe65 	bl	8001518 <triggerUltraSonic>

		// Rear-Collision
		currRearTime = TIM1CalcMicros(clk);
 800284e:	4853      	ldr	r0, [pc, #332]	; (800299c <main+0x280>)
 8002850:	f7ff fbb8 	bl	8001fc4 <TIM1CalcMicros>
 8002854:	4603      	mov	r3, r0
 8002856:	460c      	mov	r4, r1
 8002858:	461a      	mov	r2, r3
 800285a:	4b51      	ldr	r3, [pc, #324]	; (80029a0 <main+0x284>)
 800285c:	601a      	str	r2, [r3, #0]
		timeDiff = currRearTime - prevRearTime;
 800285e:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <main+0x284>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <main+0x288>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe f9d3 	bl	8000c14 <__aeabi_ui2f>
 800286e:	4602      	mov	r2, r0
 8002870:	4b4d      	ldr	r3, [pc, #308]	; (80029a8 <main+0x28c>)
 8002872:	601a      	str	r2, [r3, #0]
		if((timeDiff) >= 200000){
 8002874:	4b4c      	ldr	r3, [pc, #304]	; (80029a8 <main+0x28c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	494c      	ldr	r1, [pc, #304]	; (80029ac <main+0x290>)
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fbd4 	bl	8001028 <__aeabi_fcmpge>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d019      	beq.n	80028ba <main+0x19e>
			relativeSpeed = getRelativeSpeed(prevRearDistance, distanceRear, timeDiff);
 8002886:	4b4a      	ldr	r3, [pc, #296]	; (80029b0 <main+0x294>)
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	4b4a      	ldr	r3, [pc, #296]	; (80029b4 <main+0x298>)
 800288c:	cb18      	ldmia	r3, {r3, r4}
 800288e:	4619      	mov	r1, r3
 8002890:	4b45      	ldr	r3, [pc, #276]	; (80029a8 <main+0x28c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	f7fe fd99 	bl	80013cc <getRelativeSpeed>
 800289a:	4602      	mov	r2, r0
 800289c:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <main+0x29c>)
 800289e:	601a      	str	r2, [r3, #0]
			//relativeSpeed /= 10.0;
			prevRearTime = currRearTime;
 80028a0:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <main+0x284>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a3f      	ldr	r2, [pc, #252]	; (80029a4 <main+0x288>)
 80028a6:	6013      	str	r3, [r2, #0]
			prevRearDistance = distanceRear;
 80028a8:	4b42      	ldr	r3, [pc, #264]	; (80029b4 <main+0x298>)
 80028aa:	cb18      	ldmia	r3, {r3, r4}
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <main+0x294>)
 80028b0:	601a      	str	r2, [r3, #0]
			timeDiff = 0;
 80028b2:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <main+0x28c>)
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
		}

		// Rear-Collsion Send Warning
		if(rearCollisionWarning(relativeSpeed, distanceRear) == REAR_DANGER_DISTANCE_STATE){
 80028ba:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <main+0x29c>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b3d      	ldr	r3, [pc, #244]	; (80029b4 <main+0x298>)
 80028c0:	cb18      	ldmia	r3, {r3, r4}
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f7fe fdb7 	bl	8001438 <rearCollisionWarning>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d105      	bne.n	80028dc <main+0x1c0>
			MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_HIGH);
 80028d0:	2201      	movs	r2, #1
 80028d2:	2140      	movs	r1, #64	; 0x40
 80028d4:	4828      	ldr	r0, [pc, #160]	; (8002978 <main+0x25c>)
 80028d6:	f7ff fa0b 	bl	8001cf0 <MCAL_GPIO_WritePin>
 80028da:	e004      	b.n	80028e6 <main+0x1ca>
		}else {
			MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_LOW);
 80028dc:	2200      	movs	r2, #0
 80028de:	2140      	movs	r1, #64	; 0x40
 80028e0:	4825      	ldr	r0, [pc, #148]	; (8002978 <main+0x25c>)
 80028e2:	f7ff fa05 	bl	8001cf0 <MCAL_GPIO_WritePin>
		}

		// Blind Spot Warning
		switch(blindSpotWarning(distanceLeft, distanceRight)){
 80028e6:	4b35      	ldr	r3, [pc, #212]	; (80029bc <main+0x2a0>)
 80028e8:	cb18      	ldmia	r3, {r3, r4}
 80028ea:	461a      	mov	r2, r3
 80028ec:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <main+0x2a4>)
 80028ee:	cb18      	ldmia	r3, {r3, r4}
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f7fe fd2e 	bl	8001354 <blindSpotWarning>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d004      	beq.n	8002908 <main+0x1ec>
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d01a      	beq.n	8002938 <main+0x21c>
 8002902:	2b01      	cmp	r3, #1
 8002904:	d00c      	beq.n	8002920 <main+0x204>
 8002906:	e023      	b.n	8002950 <main+0x234>
			case BLINDSPOT_LEFT_STATE:
				MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_HIGH);
 8002908:	2201      	movs	r2, #1
 800290a:	2180      	movs	r1, #128	; 0x80
 800290c:	481a      	ldr	r0, [pc, #104]	; (8002978 <main+0x25c>)
 800290e:	f7ff f9ef 	bl	8001cf0 <MCAL_GPIO_WritePin>
				MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_LOW);
 8002912:	2200      	movs	r2, #0
 8002914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002918:	4817      	ldr	r0, [pc, #92]	; (8002978 <main+0x25c>)
 800291a:	f7ff f9e9 	bl	8001cf0 <MCAL_GPIO_WritePin>

				break;
 800291e:	e022      	b.n	8002966 <main+0x24a>
			case BLINDSPOT_RIGHT_STATE:
				MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_HIGH);
 8002920:	2201      	movs	r2, #1
 8002922:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002926:	4814      	ldr	r0, [pc, #80]	; (8002978 <main+0x25c>)
 8002928:	f7ff f9e2 	bl	8001cf0 <MCAL_GPIO_WritePin>
				MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_LOW);
 800292c:	2200      	movs	r2, #0
 800292e:	2180      	movs	r1, #128	; 0x80
 8002930:	4811      	ldr	r0, [pc, #68]	; (8002978 <main+0x25c>)
 8002932:	f7ff f9dd 	bl	8001cf0 <MCAL_GPIO_WritePin>

				break;
 8002936:	e016      	b.n	8002966 <main+0x24a>
			case BLINDSPOT_RIGHT_LEFT_STATE:
				MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_HIGH);
 8002938:	2201      	movs	r2, #1
 800293a:	2180      	movs	r1, #128	; 0x80
 800293c:	480e      	ldr	r0, [pc, #56]	; (8002978 <main+0x25c>)
 800293e:	f7ff f9d7 	bl	8001cf0 <MCAL_GPIO_WritePin>
				MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_HIGH);
 8002942:	2201      	movs	r2, #1
 8002944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002948:	480b      	ldr	r0, [pc, #44]	; (8002978 <main+0x25c>)
 800294a:	f7ff f9d1 	bl	8001cf0 <MCAL_GPIO_WritePin>
				break;
 800294e:	e00a      	b.n	8002966 <main+0x24a>
			default:
				MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_LOW);
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	4808      	ldr	r0, [pc, #32]	; (8002978 <main+0x25c>)
 8002956:	f7ff f9cb 	bl	8001cf0 <MCAL_GPIO_WritePin>
				MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_LOW);
 800295a:	2200      	movs	r2, #0
 800295c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002960:	4805      	ldr	r0, [pc, #20]	; (8002978 <main+0x25c>)
 8002962:	f7ff f9c5 	bl	8001cf0 <MCAL_GPIO_WritePin>
		}

		delay(25, U_ms, clk);
 8002966:	4a0d      	ldr	r2, [pc, #52]	; (800299c <main+0x280>)
 8002968:	2100      	movs	r1, #0
 800296a:	2019      	movs	r0, #25
 800296c:	f7ff fa3c 	bl	8001de8 <delay>
		triggerUltraSonic(&usRear, clk);
 8002970:	e75b      	b.n	800282a <main+0x10e>
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000
 8002978:	40010c00 	.word	0x40010c00
 800297c:	08004530 	.word	0x08004530
 8002980:	40010800 	.word	0x40010800
 8002984:	08002459 	.word	0x08002459
 8002988:	0800453c 	.word	0x0800453c
 800298c:	08002539 	.word	0x08002539
 8002990:	08004548 	.word	0x08004548
 8002994:	08002619 	.word	0x08002619
 8002998:	40004400 	.word	0x40004400
 800299c:	007a1200 	.word	0x007a1200
 80029a0:	20000270 	.word	0x20000270
 80029a4:	20000274 	.word	0x20000274
 80029a8:	2000027c 	.word	0x2000027c
 80029ac:	48435000 	.word	0x48435000
 80029b0:	20000018 	.word	0x20000018
 80029b4:	20000008 	.word	0x20000008
 80029b8:	20000278 	.word	0x20000278
 80029bc:	20000228 	.word	0x20000228
 80029c0:	20000010 	.word	0x20000010

080029c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029cc:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <_sbrk+0x5c>)
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <_sbrk+0x60>)
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029d8:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <_sbrk+0x64>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <_sbrk+0x64>)
 80029e2:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <_sbrk+0x68>)
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <_sbrk+0x64>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d207      	bcs.n	8002a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029f4:	f000 f846 	bl	8002a84 <__errno>
 80029f8:	4602      	mov	r2, r0
 80029fa:	230c      	movs	r3, #12
 80029fc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80029fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002a02:	e009      	b.n	8002a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <_sbrk+0x64>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a0a:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <_sbrk+0x64>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <_sbrk+0x64>)
 8002a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a16:	68fb      	ldr	r3, [r7, #12]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20005000 	.word	0x20005000
 8002a24:	00000400 	.word	0x00000400
 8002a28:	20000280 	.word	0x20000280
 8002a2c:	200002e8 	.word	0x200002e8

08002a30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a30:	480d      	ldr	r0, [pc, #52]	; (8002a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a32:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a38:	480c      	ldr	r0, [pc, #48]	; (8002a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002a3a:	490d      	ldr	r1, [pc, #52]	; (8002a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <LoopForever+0xe>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a40:	e002      	b.n	8002a48 <LoopCopyDataInit>

08002a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a46:	3304      	adds	r3, #4

08002a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a4c:	d3f9      	bcc.n	8002a42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a50:	4c0a      	ldr	r4, [pc, #40]	; (8002a7c <LoopForever+0x16>)
  movs r3, #0
 8002a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a54:	e001      	b.n	8002a5a <LoopFillZerobss>

08002a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a58:	3204      	adds	r2, #4

08002a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a5c:	d3fb      	bcc.n	8002a56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a5e:	f000 f817 	bl	8002a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a62:	f7ff fe5b 	bl	800271c <main>

08002a66 <LoopForever>:

LoopForever:
    b LoopForever
 8002a66:	e7fe      	b.n	8002a66 <LoopForever>
  ldr   r0, =_estack
 8002a68:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a70:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002a74:	080047a8 	.word	0x080047a8
  ldr r2, =_sbss
 8002a78:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002a7c:	200002e4 	.word	0x200002e4

08002a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a80:	e7fe      	b.n	8002a80 <ADC1_2_IRQHandler>
	...

08002a84 <__errno>:
 8002a84:	4b01      	ldr	r3, [pc, #4]	; (8002a8c <__errno+0x8>)
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	2000001c 	.word	0x2000001c

08002a90 <__libc_init_array>:
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	2500      	movs	r5, #0
 8002a94:	4e0c      	ldr	r6, [pc, #48]	; (8002ac8 <__libc_init_array+0x38>)
 8002a96:	4c0d      	ldr	r4, [pc, #52]	; (8002acc <__libc_init_array+0x3c>)
 8002a98:	1ba4      	subs	r4, r4, r6
 8002a9a:	10a4      	asrs	r4, r4, #2
 8002a9c:	42a5      	cmp	r5, r4
 8002a9e:	d109      	bne.n	8002ab4 <__libc_init_array+0x24>
 8002aa0:	f001 fd3a 	bl	8004518 <_init>
 8002aa4:	2500      	movs	r5, #0
 8002aa6:	4e0a      	ldr	r6, [pc, #40]	; (8002ad0 <__libc_init_array+0x40>)
 8002aa8:	4c0a      	ldr	r4, [pc, #40]	; (8002ad4 <__libc_init_array+0x44>)
 8002aaa:	1ba4      	subs	r4, r4, r6
 8002aac:	10a4      	asrs	r4, r4, #2
 8002aae:	42a5      	cmp	r5, r4
 8002ab0:	d105      	bne.n	8002abe <__libc_init_array+0x2e>
 8002ab2:	bd70      	pop	{r4, r5, r6, pc}
 8002ab4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ab8:	4798      	blx	r3
 8002aba:	3501      	adds	r5, #1
 8002abc:	e7ee      	b.n	8002a9c <__libc_init_array+0xc>
 8002abe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ac2:	4798      	blx	r3
 8002ac4:	3501      	adds	r5, #1
 8002ac6:	e7f2      	b.n	8002aae <__libc_init_array+0x1e>
 8002ac8:	080047a0 	.word	0x080047a0
 8002acc:	080047a0 	.word	0x080047a0
 8002ad0:	080047a0 	.word	0x080047a0
 8002ad4:	080047a4 	.word	0x080047a4

08002ad8 <memset>:
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4402      	add	r2, r0
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d100      	bne.n	8002ae2 <memset+0xa>
 8002ae0:	4770      	bx	lr
 8002ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ae6:	e7f9      	b.n	8002adc <memset+0x4>

08002ae8 <__cvt>:
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aee:	461e      	mov	r6, r3
 8002af0:	bfbb      	ittet	lt
 8002af2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002af6:	461e      	movlt	r6, r3
 8002af8:	2300      	movge	r3, #0
 8002afa:	232d      	movlt	r3, #45	; 0x2d
 8002afc:	b088      	sub	sp, #32
 8002afe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002b00:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002b04:	f027 0720 	bic.w	r7, r7, #32
 8002b08:	2f46      	cmp	r7, #70	; 0x46
 8002b0a:	4614      	mov	r4, r2
 8002b0c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002b0e:	700b      	strb	r3, [r1, #0]
 8002b10:	d004      	beq.n	8002b1c <__cvt+0x34>
 8002b12:	2f45      	cmp	r7, #69	; 0x45
 8002b14:	d100      	bne.n	8002b18 <__cvt+0x30>
 8002b16:	3501      	adds	r5, #1
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e000      	b.n	8002b1e <__cvt+0x36>
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	aa07      	add	r2, sp, #28
 8002b20:	9204      	str	r2, [sp, #16]
 8002b22:	aa06      	add	r2, sp, #24
 8002b24:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002b28:	e9cd 3500 	strd	r3, r5, [sp]
 8002b2c:	4622      	mov	r2, r4
 8002b2e:	4633      	mov	r3, r6
 8002b30:	f000 fba6 	bl	8003280 <_dtoa_r>
 8002b34:	2f47      	cmp	r7, #71	; 0x47
 8002b36:	4680      	mov	r8, r0
 8002b38:	d102      	bne.n	8002b40 <__cvt+0x58>
 8002b3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b3c:	07db      	lsls	r3, r3, #31
 8002b3e:	d526      	bpl.n	8002b8e <__cvt+0xa6>
 8002b40:	2f46      	cmp	r7, #70	; 0x46
 8002b42:	eb08 0905 	add.w	r9, r8, r5
 8002b46:	d111      	bne.n	8002b6c <__cvt+0x84>
 8002b48:	f898 3000 	ldrb.w	r3, [r8]
 8002b4c:	2b30      	cmp	r3, #48	; 0x30
 8002b4e:	d10a      	bne.n	8002b66 <__cvt+0x7e>
 8002b50:	2200      	movs	r2, #0
 8002b52:	2300      	movs	r3, #0
 8002b54:	4620      	mov	r0, r4
 8002b56:	4631      	mov	r1, r6
 8002b58:	f7fd ff36 	bl	80009c8 <__aeabi_dcmpeq>
 8002b5c:	b918      	cbnz	r0, 8002b66 <__cvt+0x7e>
 8002b5e:	f1c5 0501 	rsb	r5, r5, #1
 8002b62:	f8ca 5000 	str.w	r5, [sl]
 8002b66:	f8da 3000 	ldr.w	r3, [sl]
 8002b6a:	4499      	add	r9, r3
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2300      	movs	r3, #0
 8002b70:	4620      	mov	r0, r4
 8002b72:	4631      	mov	r1, r6
 8002b74:	f7fd ff28 	bl	80009c8 <__aeabi_dcmpeq>
 8002b78:	b938      	cbnz	r0, 8002b8a <__cvt+0xa2>
 8002b7a:	2230      	movs	r2, #48	; 0x30
 8002b7c:	9b07      	ldr	r3, [sp, #28]
 8002b7e:	454b      	cmp	r3, r9
 8002b80:	d205      	bcs.n	8002b8e <__cvt+0xa6>
 8002b82:	1c59      	adds	r1, r3, #1
 8002b84:	9107      	str	r1, [sp, #28]
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e7f8      	b.n	8002b7c <__cvt+0x94>
 8002b8a:	f8cd 901c 	str.w	r9, [sp, #28]
 8002b8e:	4640      	mov	r0, r8
 8002b90:	9b07      	ldr	r3, [sp, #28]
 8002b92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002b94:	eba3 0308 	sub.w	r3, r3, r8
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	b008      	add	sp, #32
 8002b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002ba0 <__exponent>:
 8002ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ba2:	2900      	cmp	r1, #0
 8002ba4:	bfb4      	ite	lt
 8002ba6:	232d      	movlt	r3, #45	; 0x2d
 8002ba8:	232b      	movge	r3, #43	; 0x2b
 8002baa:	4604      	mov	r4, r0
 8002bac:	bfb8      	it	lt
 8002bae:	4249      	neglt	r1, r1
 8002bb0:	2909      	cmp	r1, #9
 8002bb2:	f804 2b02 	strb.w	r2, [r4], #2
 8002bb6:	7043      	strb	r3, [r0, #1]
 8002bb8:	dd21      	ble.n	8002bfe <__exponent+0x5e>
 8002bba:	f10d 0307 	add.w	r3, sp, #7
 8002bbe:	461f      	mov	r7, r3
 8002bc0:	260a      	movs	r6, #10
 8002bc2:	fb91 f5f6 	sdiv	r5, r1, r6
 8002bc6:	fb06 1115 	mls	r1, r6, r5, r1
 8002bca:	2d09      	cmp	r5, #9
 8002bcc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002bd0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002bd4:	f103 32ff 	add.w	r2, r3, #4294967295
 8002bd8:	4629      	mov	r1, r5
 8002bda:	dc09      	bgt.n	8002bf0 <__exponent+0x50>
 8002bdc:	3130      	adds	r1, #48	; 0x30
 8002bde:	3b02      	subs	r3, #2
 8002be0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002be4:	42bb      	cmp	r3, r7
 8002be6:	4622      	mov	r2, r4
 8002be8:	d304      	bcc.n	8002bf4 <__exponent+0x54>
 8002bea:	1a10      	subs	r0, r2, r0
 8002bec:	b003      	add	sp, #12
 8002bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	e7e6      	b.n	8002bc2 <__exponent+0x22>
 8002bf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bf8:	f804 2b01 	strb.w	r2, [r4], #1
 8002bfc:	e7f2      	b.n	8002be4 <__exponent+0x44>
 8002bfe:	2330      	movs	r3, #48	; 0x30
 8002c00:	4419      	add	r1, r3
 8002c02:	7083      	strb	r3, [r0, #2]
 8002c04:	1d02      	adds	r2, r0, #4
 8002c06:	70c1      	strb	r1, [r0, #3]
 8002c08:	e7ef      	b.n	8002bea <__exponent+0x4a>
	...

08002c0c <_printf_float>:
 8002c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c10:	b091      	sub	sp, #68	; 0x44
 8002c12:	460c      	mov	r4, r1
 8002c14:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002c16:	4693      	mov	fp, r2
 8002c18:	461e      	mov	r6, r3
 8002c1a:	4605      	mov	r5, r0
 8002c1c:	f001 f8e4 	bl	8003de8 <_localeconv_r>
 8002c20:	6803      	ldr	r3, [r0, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	9309      	str	r3, [sp, #36]	; 0x24
 8002c26:	f7fd faa3 	bl	8000170 <strlen>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	930e      	str	r3, [sp, #56]	; 0x38
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	900a      	str	r0, [sp, #40]	; 0x28
 8002c32:	3307      	adds	r3, #7
 8002c34:	f023 0307 	bic.w	r3, r3, #7
 8002c38:	f103 0208 	add.w	r2, r3, #8
 8002c3c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002c40:	f8d4 a000 	ldr.w	sl, [r4]
 8002c44:	603a      	str	r2, [r7, #0]
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002c4e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002c52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5c:	4ba6      	ldr	r3, [pc, #664]	; (8002ef8 <_printf_float+0x2ec>)
 8002c5e:	4638      	mov	r0, r7
 8002c60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c62:	f7fd fee3 	bl	8000a2c <__aeabi_dcmpun>
 8002c66:	bb68      	cbnz	r0, 8002cc4 <_printf_float+0xb8>
 8002c68:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6c:	4ba2      	ldr	r3, [pc, #648]	; (8002ef8 <_printf_float+0x2ec>)
 8002c6e:	4638      	mov	r0, r7
 8002c70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c72:	f7fd febd 	bl	80009f0 <__aeabi_dcmple>
 8002c76:	bb28      	cbnz	r0, 8002cc4 <_printf_float+0xb8>
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	4638      	mov	r0, r7
 8002c7e:	4649      	mov	r1, r9
 8002c80:	f7fd feac 	bl	80009dc <__aeabi_dcmplt>
 8002c84:	b110      	cbz	r0, 8002c8c <_printf_float+0x80>
 8002c86:	232d      	movs	r3, #45	; 0x2d
 8002c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c8c:	4f9b      	ldr	r7, [pc, #620]	; (8002efc <_printf_float+0x2f0>)
 8002c8e:	4b9c      	ldr	r3, [pc, #624]	; (8002f00 <_printf_float+0x2f4>)
 8002c90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002c94:	bf98      	it	ls
 8002c96:	461f      	movls	r7, r3
 8002c98:	2303      	movs	r3, #3
 8002c9a:	f04f 0900 	mov.w	r9, #0
 8002c9e:	6123      	str	r3, [r4, #16]
 8002ca0:	f02a 0304 	bic.w	r3, sl, #4
 8002ca4:	6023      	str	r3, [r4, #0]
 8002ca6:	9600      	str	r6, [sp, #0]
 8002ca8:	465b      	mov	r3, fp
 8002caa:	aa0f      	add	r2, sp, #60	; 0x3c
 8002cac:	4621      	mov	r1, r4
 8002cae:	4628      	mov	r0, r5
 8002cb0:	f000 f9e2 	bl	8003078 <_printf_common>
 8002cb4:	3001      	adds	r0, #1
 8002cb6:	f040 8090 	bne.w	8002dda <_printf_float+0x1ce>
 8002cba:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbe:	b011      	add	sp, #68	; 0x44
 8002cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cc4:	463a      	mov	r2, r7
 8002cc6:	464b      	mov	r3, r9
 8002cc8:	4638      	mov	r0, r7
 8002cca:	4649      	mov	r1, r9
 8002ccc:	f7fd feae 	bl	8000a2c <__aeabi_dcmpun>
 8002cd0:	b110      	cbz	r0, 8002cd8 <_printf_float+0xcc>
 8002cd2:	4f8c      	ldr	r7, [pc, #560]	; (8002f04 <_printf_float+0x2f8>)
 8002cd4:	4b8c      	ldr	r3, [pc, #560]	; (8002f08 <_printf_float+0x2fc>)
 8002cd6:	e7db      	b.n	8002c90 <_printf_float+0x84>
 8002cd8:	6863      	ldr	r3, [r4, #4]
 8002cda:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002cde:	1c59      	adds	r1, r3, #1
 8002ce0:	a80d      	add	r0, sp, #52	; 0x34
 8002ce2:	a90e      	add	r1, sp, #56	; 0x38
 8002ce4:	d140      	bne.n	8002d68 <_printf_float+0x15c>
 8002ce6:	2306      	movs	r3, #6
 8002ce8:	6063      	str	r3, [r4, #4]
 8002cea:	f04f 0c00 	mov.w	ip, #0
 8002cee:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002cf2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002cf6:	6863      	ldr	r3, [r4, #4]
 8002cf8:	6022      	str	r2, [r4, #0]
 8002cfa:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	463a      	mov	r2, r7
 8002d02:	464b      	mov	r3, r9
 8002d04:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002d08:	4628      	mov	r0, r5
 8002d0a:	f7ff feed 	bl	8002ae8 <__cvt>
 8002d0e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002d12:	2b47      	cmp	r3, #71	; 0x47
 8002d14:	4607      	mov	r7, r0
 8002d16:	d109      	bne.n	8002d2c <_printf_float+0x120>
 8002d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d1a:	1cd8      	adds	r0, r3, #3
 8002d1c:	db02      	blt.n	8002d24 <_printf_float+0x118>
 8002d1e:	6862      	ldr	r2, [r4, #4]
 8002d20:	4293      	cmp	r3, r2
 8002d22:	dd47      	ble.n	8002db4 <_printf_float+0x1a8>
 8002d24:	f1a8 0802 	sub.w	r8, r8, #2
 8002d28:	fa5f f888 	uxtb.w	r8, r8
 8002d2c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002d30:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002d32:	d824      	bhi.n	8002d7e <_printf_float+0x172>
 8002d34:	3901      	subs	r1, #1
 8002d36:	4642      	mov	r2, r8
 8002d38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002d3c:	910d      	str	r1, [sp, #52]	; 0x34
 8002d3e:	f7ff ff2f 	bl	8002ba0 <__exponent>
 8002d42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d44:	4681      	mov	r9, r0
 8002d46:	1813      	adds	r3, r2, r0
 8002d48:	2a01      	cmp	r2, #1
 8002d4a:	6123      	str	r3, [r4, #16]
 8002d4c:	dc02      	bgt.n	8002d54 <_printf_float+0x148>
 8002d4e:	6822      	ldr	r2, [r4, #0]
 8002d50:	07d1      	lsls	r1, r2, #31
 8002d52:	d501      	bpl.n	8002d58 <_printf_float+0x14c>
 8002d54:	3301      	adds	r3, #1
 8002d56:	6123      	str	r3, [r4, #16]
 8002d58:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0a2      	beq.n	8002ca6 <_printf_float+0x9a>
 8002d60:	232d      	movs	r3, #45	; 0x2d
 8002d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d66:	e79e      	b.n	8002ca6 <_printf_float+0x9a>
 8002d68:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002d6c:	f000 816e 	beq.w	800304c <_printf_float+0x440>
 8002d70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002d74:	d1b9      	bne.n	8002cea <_printf_float+0xde>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1b7      	bne.n	8002cea <_printf_float+0xde>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e7b4      	b.n	8002ce8 <_printf_float+0xdc>
 8002d7e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002d82:	d119      	bne.n	8002db8 <_printf_float+0x1ac>
 8002d84:	2900      	cmp	r1, #0
 8002d86:	6863      	ldr	r3, [r4, #4]
 8002d88:	dd0c      	ble.n	8002da4 <_printf_float+0x198>
 8002d8a:	6121      	str	r1, [r4, #16]
 8002d8c:	b913      	cbnz	r3, 8002d94 <_printf_float+0x188>
 8002d8e:	6822      	ldr	r2, [r4, #0]
 8002d90:	07d2      	lsls	r2, r2, #31
 8002d92:	d502      	bpl.n	8002d9a <_printf_float+0x18e>
 8002d94:	3301      	adds	r3, #1
 8002d96:	440b      	add	r3, r1
 8002d98:	6123      	str	r3, [r4, #16]
 8002d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d9c:	f04f 0900 	mov.w	r9, #0
 8002da0:	65a3      	str	r3, [r4, #88]	; 0x58
 8002da2:	e7d9      	b.n	8002d58 <_printf_float+0x14c>
 8002da4:	b913      	cbnz	r3, 8002dac <_printf_float+0x1a0>
 8002da6:	6822      	ldr	r2, [r4, #0]
 8002da8:	07d0      	lsls	r0, r2, #31
 8002daa:	d501      	bpl.n	8002db0 <_printf_float+0x1a4>
 8002dac:	3302      	adds	r3, #2
 8002dae:	e7f3      	b.n	8002d98 <_printf_float+0x18c>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e7f1      	b.n	8002d98 <_printf_float+0x18c>
 8002db4:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002db8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	db05      	blt.n	8002dcc <_printf_float+0x1c0>
 8002dc0:	6822      	ldr	r2, [r4, #0]
 8002dc2:	6123      	str	r3, [r4, #16]
 8002dc4:	07d1      	lsls	r1, r2, #31
 8002dc6:	d5e8      	bpl.n	8002d9a <_printf_float+0x18e>
 8002dc8:	3301      	adds	r3, #1
 8002dca:	e7e5      	b.n	8002d98 <_printf_float+0x18c>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bfcc      	ite	gt
 8002dd0:	2301      	movgt	r3, #1
 8002dd2:	f1c3 0302 	rsble	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	e7de      	b.n	8002d98 <_printf_float+0x18c>
 8002dda:	6823      	ldr	r3, [r4, #0]
 8002ddc:	055a      	lsls	r2, r3, #21
 8002dde:	d407      	bmi.n	8002df0 <_printf_float+0x1e4>
 8002de0:	6923      	ldr	r3, [r4, #16]
 8002de2:	463a      	mov	r2, r7
 8002de4:	4659      	mov	r1, fp
 8002de6:	4628      	mov	r0, r5
 8002de8:	47b0      	blx	r6
 8002dea:	3001      	adds	r0, #1
 8002dec:	d129      	bne.n	8002e42 <_printf_float+0x236>
 8002dee:	e764      	b.n	8002cba <_printf_float+0xae>
 8002df0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002df4:	f240 80d7 	bls.w	8002fa6 <_printf_float+0x39a>
 8002df8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f7fd fde2 	bl	80009c8 <__aeabi_dcmpeq>
 8002e04:	b388      	cbz	r0, 8002e6a <_printf_float+0x25e>
 8002e06:	2301      	movs	r3, #1
 8002e08:	4a40      	ldr	r2, [pc, #256]	; (8002f0c <_printf_float+0x300>)
 8002e0a:	4659      	mov	r1, fp
 8002e0c:	4628      	mov	r0, r5
 8002e0e:	47b0      	blx	r6
 8002e10:	3001      	adds	r0, #1
 8002e12:	f43f af52 	beq.w	8002cba <_printf_float+0xae>
 8002e16:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	db02      	blt.n	8002e24 <_printf_float+0x218>
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	07d8      	lsls	r0, r3, #31
 8002e22:	d50e      	bpl.n	8002e42 <_printf_float+0x236>
 8002e24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e28:	4659      	mov	r1, fp
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	47b0      	blx	r6
 8002e2e:	3001      	adds	r0, #1
 8002e30:	f43f af43 	beq.w	8002cba <_printf_float+0xae>
 8002e34:	2700      	movs	r7, #0
 8002e36:	f104 081a 	add.w	r8, r4, #26
 8002e3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	42bb      	cmp	r3, r7
 8002e40:	dc09      	bgt.n	8002e56 <_printf_float+0x24a>
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	079f      	lsls	r7, r3, #30
 8002e46:	f100 80fd 	bmi.w	8003044 <_printf_float+0x438>
 8002e4a:	68e0      	ldr	r0, [r4, #12]
 8002e4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e4e:	4298      	cmp	r0, r3
 8002e50:	bfb8      	it	lt
 8002e52:	4618      	movlt	r0, r3
 8002e54:	e733      	b.n	8002cbe <_printf_float+0xb2>
 8002e56:	2301      	movs	r3, #1
 8002e58:	4642      	mov	r2, r8
 8002e5a:	4659      	mov	r1, fp
 8002e5c:	4628      	mov	r0, r5
 8002e5e:	47b0      	blx	r6
 8002e60:	3001      	adds	r0, #1
 8002e62:	f43f af2a 	beq.w	8002cba <_printf_float+0xae>
 8002e66:	3701      	adds	r7, #1
 8002e68:	e7e7      	b.n	8002e3a <_printf_float+0x22e>
 8002e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	dc2b      	bgt.n	8002ec8 <_printf_float+0x2bc>
 8002e70:	2301      	movs	r3, #1
 8002e72:	4a26      	ldr	r2, [pc, #152]	; (8002f0c <_printf_float+0x300>)
 8002e74:	4659      	mov	r1, fp
 8002e76:	4628      	mov	r0, r5
 8002e78:	47b0      	blx	r6
 8002e7a:	3001      	adds	r0, #1
 8002e7c:	f43f af1d 	beq.w	8002cba <_printf_float+0xae>
 8002e80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e82:	b923      	cbnz	r3, 8002e8e <_printf_float+0x282>
 8002e84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e86:	b913      	cbnz	r3, 8002e8e <_printf_float+0x282>
 8002e88:	6823      	ldr	r3, [r4, #0]
 8002e8a:	07d9      	lsls	r1, r3, #31
 8002e8c:	d5d9      	bpl.n	8002e42 <_printf_float+0x236>
 8002e8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e92:	4659      	mov	r1, fp
 8002e94:	4628      	mov	r0, r5
 8002e96:	47b0      	blx	r6
 8002e98:	3001      	adds	r0, #1
 8002e9a:	f43f af0e 	beq.w	8002cba <_printf_float+0xae>
 8002e9e:	f04f 0800 	mov.w	r8, #0
 8002ea2:	f104 091a 	add.w	r9, r4, #26
 8002ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ea8:	425b      	negs	r3, r3
 8002eaa:	4543      	cmp	r3, r8
 8002eac:	dc01      	bgt.n	8002eb2 <_printf_float+0x2a6>
 8002eae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002eb0:	e797      	b.n	8002de2 <_printf_float+0x1d6>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	464a      	mov	r2, r9
 8002eb6:	4659      	mov	r1, fp
 8002eb8:	4628      	mov	r0, r5
 8002eba:	47b0      	blx	r6
 8002ebc:	3001      	adds	r0, #1
 8002ebe:	f43f aefc 	beq.w	8002cba <_printf_float+0xae>
 8002ec2:	f108 0801 	add.w	r8, r8, #1
 8002ec6:	e7ee      	b.n	8002ea6 <_printf_float+0x29a>
 8002ec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002eca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	bfa8      	it	ge
 8002ed0:	461a      	movge	r2, r3
 8002ed2:	2a00      	cmp	r2, #0
 8002ed4:	4690      	mov	r8, r2
 8002ed6:	dd07      	ble.n	8002ee8 <_printf_float+0x2dc>
 8002ed8:	4613      	mov	r3, r2
 8002eda:	4659      	mov	r1, fp
 8002edc:	463a      	mov	r2, r7
 8002ede:	4628      	mov	r0, r5
 8002ee0:	47b0      	blx	r6
 8002ee2:	3001      	adds	r0, #1
 8002ee4:	f43f aee9 	beq.w	8002cba <_printf_float+0xae>
 8002ee8:	f104 031a 	add.w	r3, r4, #26
 8002eec:	f04f 0a00 	mov.w	sl, #0
 8002ef0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002ef4:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ef6:	e015      	b.n	8002f24 <_printf_float+0x318>
 8002ef8:	7fefffff 	.word	0x7fefffff
 8002efc:	08004571 	.word	0x08004571
 8002f00:	0800456d 	.word	0x0800456d
 8002f04:	08004579 	.word	0x08004579
 8002f08:	08004575 	.word	0x08004575
 8002f0c:	0800457d 	.word	0x0800457d
 8002f10:	2301      	movs	r3, #1
 8002f12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f14:	4659      	mov	r1, fp
 8002f16:	4628      	mov	r0, r5
 8002f18:	47b0      	blx	r6
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	f43f aecd 	beq.w	8002cba <_printf_float+0xae>
 8002f20:	f10a 0a01 	add.w	sl, sl, #1
 8002f24:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002f28:	eba9 0308 	sub.w	r3, r9, r8
 8002f2c:	4553      	cmp	r3, sl
 8002f2e:	dcef      	bgt.n	8002f10 <_printf_float+0x304>
 8002f30:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f34:	429a      	cmp	r2, r3
 8002f36:	444f      	add	r7, r9
 8002f38:	db14      	blt.n	8002f64 <_printf_float+0x358>
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	07da      	lsls	r2, r3, #31
 8002f3e:	d411      	bmi.n	8002f64 <_printf_float+0x358>
 8002f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f42:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002f44:	eba3 0209 	sub.w	r2, r3, r9
 8002f48:	eba3 0901 	sub.w	r9, r3, r1
 8002f4c:	4591      	cmp	r9, r2
 8002f4e:	bfa8      	it	ge
 8002f50:	4691      	movge	r9, r2
 8002f52:	f1b9 0f00 	cmp.w	r9, #0
 8002f56:	dc0d      	bgt.n	8002f74 <_printf_float+0x368>
 8002f58:	2700      	movs	r7, #0
 8002f5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f5e:	f104 081a 	add.w	r8, r4, #26
 8002f62:	e018      	b.n	8002f96 <_printf_float+0x38a>
 8002f64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f68:	4659      	mov	r1, fp
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	47b0      	blx	r6
 8002f6e:	3001      	adds	r0, #1
 8002f70:	d1e6      	bne.n	8002f40 <_printf_float+0x334>
 8002f72:	e6a2      	b.n	8002cba <_printf_float+0xae>
 8002f74:	464b      	mov	r3, r9
 8002f76:	463a      	mov	r2, r7
 8002f78:	4659      	mov	r1, fp
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	47b0      	blx	r6
 8002f7e:	3001      	adds	r0, #1
 8002f80:	d1ea      	bne.n	8002f58 <_printf_float+0x34c>
 8002f82:	e69a      	b.n	8002cba <_printf_float+0xae>
 8002f84:	2301      	movs	r3, #1
 8002f86:	4642      	mov	r2, r8
 8002f88:	4659      	mov	r1, fp
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	47b0      	blx	r6
 8002f8e:	3001      	adds	r0, #1
 8002f90:	f43f ae93 	beq.w	8002cba <_printf_float+0xae>
 8002f94:	3701      	adds	r7, #1
 8002f96:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	eba3 0309 	sub.w	r3, r3, r9
 8002fa0:	42bb      	cmp	r3, r7
 8002fa2:	dcef      	bgt.n	8002f84 <_printf_float+0x378>
 8002fa4:	e74d      	b.n	8002e42 <_printf_float+0x236>
 8002fa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fa8:	2a01      	cmp	r2, #1
 8002faa:	dc01      	bgt.n	8002fb0 <_printf_float+0x3a4>
 8002fac:	07db      	lsls	r3, r3, #31
 8002fae:	d538      	bpl.n	8003022 <_printf_float+0x416>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	463a      	mov	r2, r7
 8002fb4:	4659      	mov	r1, fp
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	47b0      	blx	r6
 8002fba:	3001      	adds	r0, #1
 8002fbc:	f43f ae7d 	beq.w	8002cba <_printf_float+0xae>
 8002fc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002fc4:	4659      	mov	r1, fp
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	47b0      	blx	r6
 8002fca:	3001      	adds	r0, #1
 8002fcc:	f107 0701 	add.w	r7, r7, #1
 8002fd0:	f43f ae73 	beq.w	8002cba <_printf_float+0xae>
 8002fd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f103 38ff 	add.w	r8, r3, #4294967295
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f7fd fcf1 	bl	80009c8 <__aeabi_dcmpeq>
 8002fe6:	b9c0      	cbnz	r0, 800301a <_printf_float+0x40e>
 8002fe8:	4643      	mov	r3, r8
 8002fea:	463a      	mov	r2, r7
 8002fec:	4659      	mov	r1, fp
 8002fee:	4628      	mov	r0, r5
 8002ff0:	47b0      	blx	r6
 8002ff2:	3001      	adds	r0, #1
 8002ff4:	d10d      	bne.n	8003012 <_printf_float+0x406>
 8002ff6:	e660      	b.n	8002cba <_printf_float+0xae>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	4642      	mov	r2, r8
 8002ffc:	4659      	mov	r1, fp
 8002ffe:	4628      	mov	r0, r5
 8003000:	47b0      	blx	r6
 8003002:	3001      	adds	r0, #1
 8003004:	f43f ae59 	beq.w	8002cba <_printf_float+0xae>
 8003008:	3701      	adds	r7, #1
 800300a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800300c:	3b01      	subs	r3, #1
 800300e:	42bb      	cmp	r3, r7
 8003010:	dcf2      	bgt.n	8002ff8 <_printf_float+0x3ec>
 8003012:	464b      	mov	r3, r9
 8003014:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003018:	e6e4      	b.n	8002de4 <_printf_float+0x1d8>
 800301a:	2700      	movs	r7, #0
 800301c:	f104 081a 	add.w	r8, r4, #26
 8003020:	e7f3      	b.n	800300a <_printf_float+0x3fe>
 8003022:	2301      	movs	r3, #1
 8003024:	e7e1      	b.n	8002fea <_printf_float+0x3de>
 8003026:	2301      	movs	r3, #1
 8003028:	4642      	mov	r2, r8
 800302a:	4659      	mov	r1, fp
 800302c:	4628      	mov	r0, r5
 800302e:	47b0      	blx	r6
 8003030:	3001      	adds	r0, #1
 8003032:	f43f ae42 	beq.w	8002cba <_printf_float+0xae>
 8003036:	3701      	adds	r7, #1
 8003038:	68e3      	ldr	r3, [r4, #12]
 800303a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	42bb      	cmp	r3, r7
 8003040:	dcf1      	bgt.n	8003026 <_printf_float+0x41a>
 8003042:	e702      	b.n	8002e4a <_printf_float+0x23e>
 8003044:	2700      	movs	r7, #0
 8003046:	f104 0819 	add.w	r8, r4, #25
 800304a:	e7f5      	b.n	8003038 <_printf_float+0x42c>
 800304c:	2b00      	cmp	r3, #0
 800304e:	f43f ae94 	beq.w	8002d7a <_printf_float+0x16e>
 8003052:	f04f 0c00 	mov.w	ip, #0
 8003056:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800305a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800305e:	6022      	str	r2, [r4, #0]
 8003060:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003064:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	463a      	mov	r2, r7
 800306c:	464b      	mov	r3, r9
 800306e:	4628      	mov	r0, r5
 8003070:	f7ff fd3a 	bl	8002ae8 <__cvt>
 8003074:	4607      	mov	r7, r0
 8003076:	e64f      	b.n	8002d18 <_printf_float+0x10c>

08003078 <_printf_common>:
 8003078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800307c:	4691      	mov	r9, r2
 800307e:	461f      	mov	r7, r3
 8003080:	688a      	ldr	r2, [r1, #8]
 8003082:	690b      	ldr	r3, [r1, #16]
 8003084:	4606      	mov	r6, r0
 8003086:	4293      	cmp	r3, r2
 8003088:	bfb8      	it	lt
 800308a:	4613      	movlt	r3, r2
 800308c:	f8c9 3000 	str.w	r3, [r9]
 8003090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003094:	460c      	mov	r4, r1
 8003096:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800309a:	b112      	cbz	r2, 80030a2 <_printf_common+0x2a>
 800309c:	3301      	adds	r3, #1
 800309e:	f8c9 3000 	str.w	r3, [r9]
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	0699      	lsls	r1, r3, #26
 80030a6:	bf42      	ittt	mi
 80030a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80030ac:	3302      	addmi	r3, #2
 80030ae:	f8c9 3000 	strmi.w	r3, [r9]
 80030b2:	6825      	ldr	r5, [r4, #0]
 80030b4:	f015 0506 	ands.w	r5, r5, #6
 80030b8:	d107      	bne.n	80030ca <_printf_common+0x52>
 80030ba:	f104 0a19 	add.w	sl, r4, #25
 80030be:	68e3      	ldr	r3, [r4, #12]
 80030c0:	f8d9 2000 	ldr.w	r2, [r9]
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	42ab      	cmp	r3, r5
 80030c8:	dc29      	bgt.n	800311e <_printf_common+0xa6>
 80030ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80030ce:	6822      	ldr	r2, [r4, #0]
 80030d0:	3300      	adds	r3, #0
 80030d2:	bf18      	it	ne
 80030d4:	2301      	movne	r3, #1
 80030d6:	0692      	lsls	r2, r2, #26
 80030d8:	d42e      	bmi.n	8003138 <_printf_common+0xc0>
 80030da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030de:	4639      	mov	r1, r7
 80030e0:	4630      	mov	r0, r6
 80030e2:	47c0      	blx	r8
 80030e4:	3001      	adds	r0, #1
 80030e6:	d021      	beq.n	800312c <_printf_common+0xb4>
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	68e5      	ldr	r5, [r4, #12]
 80030ec:	f003 0306 	and.w	r3, r3, #6
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	bf18      	it	ne
 80030f4:	2500      	movne	r5, #0
 80030f6:	f8d9 2000 	ldr.w	r2, [r9]
 80030fa:	f04f 0900 	mov.w	r9, #0
 80030fe:	bf08      	it	eq
 8003100:	1aad      	subeq	r5, r5, r2
 8003102:	68a3      	ldr	r3, [r4, #8]
 8003104:	6922      	ldr	r2, [r4, #16]
 8003106:	bf08      	it	eq
 8003108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800310c:	4293      	cmp	r3, r2
 800310e:	bfc4      	itt	gt
 8003110:	1a9b      	subgt	r3, r3, r2
 8003112:	18ed      	addgt	r5, r5, r3
 8003114:	341a      	adds	r4, #26
 8003116:	454d      	cmp	r5, r9
 8003118:	d11a      	bne.n	8003150 <_printf_common+0xd8>
 800311a:	2000      	movs	r0, #0
 800311c:	e008      	b.n	8003130 <_printf_common+0xb8>
 800311e:	2301      	movs	r3, #1
 8003120:	4652      	mov	r2, sl
 8003122:	4639      	mov	r1, r7
 8003124:	4630      	mov	r0, r6
 8003126:	47c0      	blx	r8
 8003128:	3001      	adds	r0, #1
 800312a:	d103      	bne.n	8003134 <_printf_common+0xbc>
 800312c:	f04f 30ff 	mov.w	r0, #4294967295
 8003130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003134:	3501      	adds	r5, #1
 8003136:	e7c2      	b.n	80030be <_printf_common+0x46>
 8003138:	2030      	movs	r0, #48	; 0x30
 800313a:	18e1      	adds	r1, r4, r3
 800313c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003146:	4422      	add	r2, r4
 8003148:	3302      	adds	r3, #2
 800314a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800314e:	e7c4      	b.n	80030da <_printf_common+0x62>
 8003150:	2301      	movs	r3, #1
 8003152:	4622      	mov	r2, r4
 8003154:	4639      	mov	r1, r7
 8003156:	4630      	mov	r0, r6
 8003158:	47c0      	blx	r8
 800315a:	3001      	adds	r0, #1
 800315c:	d0e6      	beq.n	800312c <_printf_common+0xb4>
 800315e:	f109 0901 	add.w	r9, r9, #1
 8003162:	e7d8      	b.n	8003116 <_printf_common+0x9e>

08003164 <quorem>:
 8003164:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003168:	6903      	ldr	r3, [r0, #16]
 800316a:	690c      	ldr	r4, [r1, #16]
 800316c:	4680      	mov	r8, r0
 800316e:	42a3      	cmp	r3, r4
 8003170:	f2c0 8084 	blt.w	800327c <quorem+0x118>
 8003174:	3c01      	subs	r4, #1
 8003176:	f101 0714 	add.w	r7, r1, #20
 800317a:	f100 0614 	add.w	r6, r0, #20
 800317e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003182:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003186:	3501      	adds	r5, #1
 8003188:	fbb0 f5f5 	udiv	r5, r0, r5
 800318c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003190:	eb06 030c 	add.w	r3, r6, ip
 8003194:	eb07 090c 	add.w	r9, r7, ip
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	b39d      	cbz	r5, 8003204 <quorem+0xa0>
 800319c:	f04f 0a00 	mov.w	sl, #0
 80031a0:	4638      	mov	r0, r7
 80031a2:	46b6      	mov	lr, r6
 80031a4:	46d3      	mov	fp, sl
 80031a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80031aa:	b293      	uxth	r3, r2
 80031ac:	fb05 a303 	mla	r3, r5, r3, sl
 80031b0:	0c12      	lsrs	r2, r2, #16
 80031b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80031b6:	fb05 a202 	mla	r2, r5, r2, sl
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	ebab 0303 	sub.w	r3, fp, r3
 80031c0:	f8de b000 	ldr.w	fp, [lr]
 80031c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80031c8:	fa1f fb8b 	uxth.w	fp, fp
 80031cc:	445b      	add	r3, fp
 80031ce:	fa1f fb82 	uxth.w	fp, r2
 80031d2:	f8de 2000 	ldr.w	r2, [lr]
 80031d6:	4581      	cmp	r9, r0
 80031d8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80031dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031e6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80031ea:	f84e 3b04 	str.w	r3, [lr], #4
 80031ee:	d2da      	bcs.n	80031a6 <quorem+0x42>
 80031f0:	f856 300c 	ldr.w	r3, [r6, ip]
 80031f4:	b933      	cbnz	r3, 8003204 <quorem+0xa0>
 80031f6:	9b01      	ldr	r3, [sp, #4]
 80031f8:	3b04      	subs	r3, #4
 80031fa:	429e      	cmp	r6, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	d331      	bcc.n	8003264 <quorem+0x100>
 8003200:	f8c8 4010 	str.w	r4, [r8, #16]
 8003204:	4640      	mov	r0, r8
 8003206:	f001 f825 	bl	8004254 <__mcmp>
 800320a:	2800      	cmp	r0, #0
 800320c:	db26      	blt.n	800325c <quorem+0xf8>
 800320e:	4630      	mov	r0, r6
 8003210:	f04f 0c00 	mov.w	ip, #0
 8003214:	3501      	adds	r5, #1
 8003216:	f857 1b04 	ldr.w	r1, [r7], #4
 800321a:	f8d0 e000 	ldr.w	lr, [r0]
 800321e:	b28b      	uxth	r3, r1
 8003220:	ebac 0303 	sub.w	r3, ip, r3
 8003224:	fa1f f28e 	uxth.w	r2, lr
 8003228:	4413      	add	r3, r2
 800322a:	0c0a      	lsrs	r2, r1, #16
 800322c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003234:	b29b      	uxth	r3, r3
 8003236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800323a:	45b9      	cmp	r9, r7
 800323c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003240:	f840 3b04 	str.w	r3, [r0], #4
 8003244:	d2e7      	bcs.n	8003216 <quorem+0xb2>
 8003246:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800324a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800324e:	b92a      	cbnz	r2, 800325c <quorem+0xf8>
 8003250:	3b04      	subs	r3, #4
 8003252:	429e      	cmp	r6, r3
 8003254:	461a      	mov	r2, r3
 8003256:	d30b      	bcc.n	8003270 <quorem+0x10c>
 8003258:	f8c8 4010 	str.w	r4, [r8, #16]
 800325c:	4628      	mov	r0, r5
 800325e:	b003      	add	sp, #12
 8003260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	3b04      	subs	r3, #4
 8003268:	2a00      	cmp	r2, #0
 800326a:	d1c9      	bne.n	8003200 <quorem+0x9c>
 800326c:	3c01      	subs	r4, #1
 800326e:	e7c4      	b.n	80031fa <quorem+0x96>
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	3b04      	subs	r3, #4
 8003274:	2a00      	cmp	r2, #0
 8003276:	d1ef      	bne.n	8003258 <quorem+0xf4>
 8003278:	3c01      	subs	r4, #1
 800327a:	e7ea      	b.n	8003252 <quorem+0xee>
 800327c:	2000      	movs	r0, #0
 800327e:	e7ee      	b.n	800325e <quorem+0xfa>

08003280 <_dtoa_r>:
 8003280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003284:	4616      	mov	r6, r2
 8003286:	461f      	mov	r7, r3
 8003288:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800328a:	b095      	sub	sp, #84	; 0x54
 800328c:	4604      	mov	r4, r0
 800328e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003292:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003296:	b93d      	cbnz	r5, 80032a8 <_dtoa_r+0x28>
 8003298:	2010      	movs	r0, #16
 800329a:	f000 fdb3 	bl	8003e04 <malloc>
 800329e:	6260      	str	r0, [r4, #36]	; 0x24
 80032a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80032a4:	6005      	str	r5, [r0, #0]
 80032a6:	60c5      	str	r5, [r0, #12]
 80032a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032aa:	6819      	ldr	r1, [r3, #0]
 80032ac:	b151      	cbz	r1, 80032c4 <_dtoa_r+0x44>
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	2301      	movs	r3, #1
 80032b2:	4093      	lsls	r3, r2
 80032b4:	604a      	str	r2, [r1, #4]
 80032b6:	608b      	str	r3, [r1, #8]
 80032b8:	4620      	mov	r0, r4
 80032ba:	f000 fdea 	bl	8003e92 <_Bfree>
 80032be:	2200      	movs	r2, #0
 80032c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	1e3b      	subs	r3, r7, #0
 80032c6:	bfaf      	iteee	ge
 80032c8:	2300      	movge	r3, #0
 80032ca:	2201      	movlt	r2, #1
 80032cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80032d0:	9303      	strlt	r3, [sp, #12]
 80032d2:	bfac      	ite	ge
 80032d4:	f8c8 3000 	strge.w	r3, [r8]
 80032d8:	f8c8 2000 	strlt.w	r2, [r8]
 80032dc:	4bae      	ldr	r3, [pc, #696]	; (8003598 <_dtoa_r+0x318>)
 80032de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80032e2:	ea33 0308 	bics.w	r3, r3, r8
 80032e6:	d11b      	bne.n	8003320 <_dtoa_r+0xa0>
 80032e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80032ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	9b02      	ldr	r3, [sp, #8]
 80032f2:	b923      	cbnz	r3, 80032fe <_dtoa_r+0x7e>
 80032f4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80032f8:	2800      	cmp	r0, #0
 80032fa:	f000 8545 	beq.w	8003d88 <_dtoa_r+0xb08>
 80032fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003300:	b953      	cbnz	r3, 8003318 <_dtoa_r+0x98>
 8003302:	4ba6      	ldr	r3, [pc, #664]	; (800359c <_dtoa_r+0x31c>)
 8003304:	e021      	b.n	800334a <_dtoa_r+0xca>
 8003306:	4ba6      	ldr	r3, [pc, #664]	; (80035a0 <_dtoa_r+0x320>)
 8003308:	9306      	str	r3, [sp, #24]
 800330a:	3308      	adds	r3, #8
 800330c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	9806      	ldr	r0, [sp, #24]
 8003312:	b015      	add	sp, #84	; 0x54
 8003314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003318:	4ba0      	ldr	r3, [pc, #640]	; (800359c <_dtoa_r+0x31c>)
 800331a:	9306      	str	r3, [sp, #24]
 800331c:	3303      	adds	r3, #3
 800331e:	e7f5      	b.n	800330c <_dtoa_r+0x8c>
 8003320:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003324:	2200      	movs	r2, #0
 8003326:	2300      	movs	r3, #0
 8003328:	4630      	mov	r0, r6
 800332a:	4639      	mov	r1, r7
 800332c:	f7fd fb4c 	bl	80009c8 <__aeabi_dcmpeq>
 8003330:	4682      	mov	sl, r0
 8003332:	b160      	cbz	r0, 800334e <_dtoa_r+0xce>
 8003334:	2301      	movs	r3, #1
 8003336:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8520 	beq.w	8003d82 <_dtoa_r+0xb02>
 8003342:	4b98      	ldr	r3, [pc, #608]	; (80035a4 <_dtoa_r+0x324>)
 8003344:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	3b01      	subs	r3, #1
 800334a:	9306      	str	r3, [sp, #24]
 800334c:	e7e0      	b.n	8003310 <_dtoa_r+0x90>
 800334e:	ab12      	add	r3, sp, #72	; 0x48
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	ab13      	add	r3, sp, #76	; 0x4c
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	4632      	mov	r2, r6
 8003358:	463b      	mov	r3, r7
 800335a:	4620      	mov	r0, r4
 800335c:	f000 fff2 	bl	8004344 <__d2b>
 8003360:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003364:	4683      	mov	fp, r0
 8003366:	2d00      	cmp	r5, #0
 8003368:	d07d      	beq.n	8003466 <_dtoa_r+0x1e6>
 800336a:	46b0      	mov	r8, r6
 800336c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003370:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003374:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003378:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800337c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003380:	2200      	movs	r2, #0
 8003382:	4b89      	ldr	r3, [pc, #548]	; (80035a8 <_dtoa_r+0x328>)
 8003384:	4640      	mov	r0, r8
 8003386:	4649      	mov	r1, r9
 8003388:	f7fc fefe 	bl	8000188 <__aeabi_dsub>
 800338c:	a37c      	add	r3, pc, #496	; (adr r3, 8003580 <_dtoa_r+0x300>)
 800338e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003392:	f7fd f8b1 	bl	80004f8 <__aeabi_dmul>
 8003396:	a37c      	add	r3, pc, #496	; (adr r3, 8003588 <_dtoa_r+0x308>)
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	f7fc fef6 	bl	800018c <__adddf3>
 80033a0:	4606      	mov	r6, r0
 80033a2:	4628      	mov	r0, r5
 80033a4:	460f      	mov	r7, r1
 80033a6:	f7fd f83d 	bl	8000424 <__aeabi_i2d>
 80033aa:	a379      	add	r3, pc, #484	; (adr r3, 8003590 <_dtoa_r+0x310>)
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f7fd f8a2 	bl	80004f8 <__aeabi_dmul>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4630      	mov	r0, r6
 80033ba:	4639      	mov	r1, r7
 80033bc:	f7fc fee6 	bl	800018c <__adddf3>
 80033c0:	4606      	mov	r6, r0
 80033c2:	460f      	mov	r7, r1
 80033c4:	f7fd fb48 	bl	8000a58 <__aeabi_d2iz>
 80033c8:	2200      	movs	r2, #0
 80033ca:	4682      	mov	sl, r0
 80033cc:	2300      	movs	r3, #0
 80033ce:	4630      	mov	r0, r6
 80033d0:	4639      	mov	r1, r7
 80033d2:	f7fd fb03 	bl	80009dc <__aeabi_dcmplt>
 80033d6:	b148      	cbz	r0, 80033ec <_dtoa_r+0x16c>
 80033d8:	4650      	mov	r0, sl
 80033da:	f7fd f823 	bl	8000424 <__aeabi_i2d>
 80033de:	4632      	mov	r2, r6
 80033e0:	463b      	mov	r3, r7
 80033e2:	f7fd faf1 	bl	80009c8 <__aeabi_dcmpeq>
 80033e6:	b908      	cbnz	r0, 80033ec <_dtoa_r+0x16c>
 80033e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80033ec:	f1ba 0f16 	cmp.w	sl, #22
 80033f0:	d85a      	bhi.n	80034a8 <_dtoa_r+0x228>
 80033f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80033f6:	496d      	ldr	r1, [pc, #436]	; (80035ac <_dtoa_r+0x32c>)
 80033f8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80033fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003400:	f7fd fb0a 	bl	8000a18 <__aeabi_dcmpgt>
 8003404:	2800      	cmp	r0, #0
 8003406:	d051      	beq.n	80034ac <_dtoa_r+0x22c>
 8003408:	2300      	movs	r3, #0
 800340a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800340e:	930d      	str	r3, [sp, #52]	; 0x34
 8003410:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003412:	1b5d      	subs	r5, r3, r5
 8003414:	1e6b      	subs	r3, r5, #1
 8003416:	9307      	str	r3, [sp, #28]
 8003418:	bf43      	ittte	mi
 800341a:	2300      	movmi	r3, #0
 800341c:	f1c5 0901 	rsbmi	r9, r5, #1
 8003420:	9307      	strmi	r3, [sp, #28]
 8003422:	f04f 0900 	movpl.w	r9, #0
 8003426:	f1ba 0f00 	cmp.w	sl, #0
 800342a:	db41      	blt.n	80034b0 <_dtoa_r+0x230>
 800342c:	9b07      	ldr	r3, [sp, #28]
 800342e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003432:	4453      	add	r3, sl
 8003434:	9307      	str	r3, [sp, #28]
 8003436:	2300      	movs	r3, #0
 8003438:	9308      	str	r3, [sp, #32]
 800343a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800343c:	2b09      	cmp	r3, #9
 800343e:	f200 808f 	bhi.w	8003560 <_dtoa_r+0x2e0>
 8003442:	2b05      	cmp	r3, #5
 8003444:	bfc4      	itt	gt
 8003446:	3b04      	subgt	r3, #4
 8003448:	931e      	strgt	r3, [sp, #120]	; 0x78
 800344a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800344c:	bfc8      	it	gt
 800344e:	2500      	movgt	r5, #0
 8003450:	f1a3 0302 	sub.w	r3, r3, #2
 8003454:	bfd8      	it	le
 8003456:	2501      	movle	r5, #1
 8003458:	2b03      	cmp	r3, #3
 800345a:	f200 808d 	bhi.w	8003578 <_dtoa_r+0x2f8>
 800345e:	e8df f003 	tbb	[pc, r3]
 8003462:	7d7b      	.short	0x7d7b
 8003464:	6f2f      	.short	0x6f2f
 8003466:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800346a:	441d      	add	r5, r3
 800346c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003470:	2820      	cmp	r0, #32
 8003472:	dd13      	ble.n	800349c <_dtoa_r+0x21c>
 8003474:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003478:	9b02      	ldr	r3, [sp, #8]
 800347a:	fa08 f800 	lsl.w	r8, r8, r0
 800347e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003482:	fa23 f000 	lsr.w	r0, r3, r0
 8003486:	ea48 0000 	orr.w	r0, r8, r0
 800348a:	f7fc ffbb 	bl	8000404 <__aeabi_ui2d>
 800348e:	2301      	movs	r3, #1
 8003490:	4680      	mov	r8, r0
 8003492:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8003496:	3d01      	subs	r5, #1
 8003498:	9310      	str	r3, [sp, #64]	; 0x40
 800349a:	e771      	b.n	8003380 <_dtoa_r+0x100>
 800349c:	9b02      	ldr	r3, [sp, #8]
 800349e:	f1c0 0020 	rsb	r0, r0, #32
 80034a2:	fa03 f000 	lsl.w	r0, r3, r0
 80034a6:	e7f0      	b.n	800348a <_dtoa_r+0x20a>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e7b0      	b.n	800340e <_dtoa_r+0x18e>
 80034ac:	900d      	str	r0, [sp, #52]	; 0x34
 80034ae:	e7af      	b.n	8003410 <_dtoa_r+0x190>
 80034b0:	f1ca 0300 	rsb	r3, sl, #0
 80034b4:	9308      	str	r3, [sp, #32]
 80034b6:	2300      	movs	r3, #0
 80034b8:	eba9 090a 	sub.w	r9, r9, sl
 80034bc:	930c      	str	r3, [sp, #48]	; 0x30
 80034be:	e7bc      	b.n	800343a <_dtoa_r+0x1ba>
 80034c0:	2301      	movs	r3, #1
 80034c2:	9309      	str	r3, [sp, #36]	; 0x24
 80034c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	dd74      	ble.n	80035b4 <_dtoa_r+0x334>
 80034ca:	4698      	mov	r8, r3
 80034cc:	9304      	str	r3, [sp, #16]
 80034ce:	2200      	movs	r2, #0
 80034d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80034d2:	6072      	str	r2, [r6, #4]
 80034d4:	2204      	movs	r2, #4
 80034d6:	f102 0014 	add.w	r0, r2, #20
 80034da:	4298      	cmp	r0, r3
 80034dc:	6871      	ldr	r1, [r6, #4]
 80034de:	d96e      	bls.n	80035be <_dtoa_r+0x33e>
 80034e0:	4620      	mov	r0, r4
 80034e2:	f000 fca2 	bl	8003e2a <_Balloc>
 80034e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034e8:	6030      	str	r0, [r6, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f1b8 0f0e 	cmp.w	r8, #14
 80034f0:	9306      	str	r3, [sp, #24]
 80034f2:	f200 80ed 	bhi.w	80036d0 <_dtoa_r+0x450>
 80034f6:	2d00      	cmp	r5, #0
 80034f8:	f000 80ea 	beq.w	80036d0 <_dtoa_r+0x450>
 80034fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003500:	f1ba 0f00 	cmp.w	sl, #0
 8003504:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003508:	dd77      	ble.n	80035fa <_dtoa_r+0x37a>
 800350a:	4a28      	ldr	r2, [pc, #160]	; (80035ac <_dtoa_r+0x32c>)
 800350c:	f00a 030f 	and.w	r3, sl, #15
 8003510:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003514:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003518:	06f0      	lsls	r0, r6, #27
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003522:	d568      	bpl.n	80035f6 <_dtoa_r+0x376>
 8003524:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003528:	4b21      	ldr	r3, [pc, #132]	; (80035b0 <_dtoa_r+0x330>)
 800352a:	2503      	movs	r5, #3
 800352c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003530:	f7fd f90c 	bl	800074c <__aeabi_ddiv>
 8003534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003538:	f006 060f 	and.w	r6, r6, #15
 800353c:	4f1c      	ldr	r7, [pc, #112]	; (80035b0 <_dtoa_r+0x330>)
 800353e:	e04f      	b.n	80035e0 <_dtoa_r+0x360>
 8003540:	2301      	movs	r3, #1
 8003542:	9309      	str	r3, [sp, #36]	; 0x24
 8003544:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003546:	4453      	add	r3, sl
 8003548:	f103 0801 	add.w	r8, r3, #1
 800354c:	9304      	str	r3, [sp, #16]
 800354e:	4643      	mov	r3, r8
 8003550:	2b01      	cmp	r3, #1
 8003552:	bfb8      	it	lt
 8003554:	2301      	movlt	r3, #1
 8003556:	e7ba      	b.n	80034ce <_dtoa_r+0x24e>
 8003558:	2300      	movs	r3, #0
 800355a:	e7b2      	b.n	80034c2 <_dtoa_r+0x242>
 800355c:	2300      	movs	r3, #0
 800355e:	e7f0      	b.n	8003542 <_dtoa_r+0x2c2>
 8003560:	2501      	movs	r5, #1
 8003562:	2300      	movs	r3, #0
 8003564:	9509      	str	r5, [sp, #36]	; 0x24
 8003566:	931e      	str	r3, [sp, #120]	; 0x78
 8003568:	f04f 33ff 	mov.w	r3, #4294967295
 800356c:	2200      	movs	r2, #0
 800356e:	9304      	str	r3, [sp, #16]
 8003570:	4698      	mov	r8, r3
 8003572:	2312      	movs	r3, #18
 8003574:	921f      	str	r2, [sp, #124]	; 0x7c
 8003576:	e7aa      	b.n	80034ce <_dtoa_r+0x24e>
 8003578:	2301      	movs	r3, #1
 800357a:	9309      	str	r3, [sp, #36]	; 0x24
 800357c:	e7f4      	b.n	8003568 <_dtoa_r+0x2e8>
 800357e:	bf00      	nop
 8003580:	636f4361 	.word	0x636f4361
 8003584:	3fd287a7 	.word	0x3fd287a7
 8003588:	8b60c8b3 	.word	0x8b60c8b3
 800358c:	3fc68a28 	.word	0x3fc68a28
 8003590:	509f79fb 	.word	0x509f79fb
 8003594:	3fd34413 	.word	0x3fd34413
 8003598:	7ff00000 	.word	0x7ff00000
 800359c:	08004588 	.word	0x08004588
 80035a0:	0800457f 	.word	0x0800457f
 80035a4:	0800457e 	.word	0x0800457e
 80035a8:	3ff80000 	.word	0x3ff80000
 80035ac:	080045b8 	.word	0x080045b8
 80035b0:	08004590 	.word	0x08004590
 80035b4:	2301      	movs	r3, #1
 80035b6:	9304      	str	r3, [sp, #16]
 80035b8:	4698      	mov	r8, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	e7da      	b.n	8003574 <_dtoa_r+0x2f4>
 80035be:	3101      	adds	r1, #1
 80035c0:	6071      	str	r1, [r6, #4]
 80035c2:	0052      	lsls	r2, r2, #1
 80035c4:	e787      	b.n	80034d6 <_dtoa_r+0x256>
 80035c6:	07f1      	lsls	r1, r6, #31
 80035c8:	d508      	bpl.n	80035dc <_dtoa_r+0x35c>
 80035ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80035ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035d2:	f7fc ff91 	bl	80004f8 <__aeabi_dmul>
 80035d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80035da:	3501      	adds	r5, #1
 80035dc:	1076      	asrs	r6, r6, #1
 80035de:	3708      	adds	r7, #8
 80035e0:	2e00      	cmp	r6, #0
 80035e2:	d1f0      	bne.n	80035c6 <_dtoa_r+0x346>
 80035e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80035e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035ec:	f7fd f8ae 	bl	800074c <__aeabi_ddiv>
 80035f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035f4:	e01b      	b.n	800362e <_dtoa_r+0x3ae>
 80035f6:	2502      	movs	r5, #2
 80035f8:	e7a0      	b.n	800353c <_dtoa_r+0x2bc>
 80035fa:	f000 80a4 	beq.w	8003746 <_dtoa_r+0x4c6>
 80035fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003602:	f1ca 0600 	rsb	r6, sl, #0
 8003606:	4ba0      	ldr	r3, [pc, #640]	; (8003888 <_dtoa_r+0x608>)
 8003608:	f006 020f 	and.w	r2, r6, #15
 800360c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f7fc ff70 	bl	80004f8 <__aeabi_dmul>
 8003618:	2502      	movs	r5, #2
 800361a:	2300      	movs	r3, #0
 800361c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003620:	4f9a      	ldr	r7, [pc, #616]	; (800388c <_dtoa_r+0x60c>)
 8003622:	1136      	asrs	r6, r6, #4
 8003624:	2e00      	cmp	r6, #0
 8003626:	f040 8083 	bne.w	8003730 <_dtoa_r+0x4b0>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e0      	bne.n	80035f0 <_dtoa_r+0x370>
 800362e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 808a 	beq.w	800374a <_dtoa_r+0x4ca>
 8003636:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800363a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800363e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003642:	2200      	movs	r2, #0
 8003644:	4b92      	ldr	r3, [pc, #584]	; (8003890 <_dtoa_r+0x610>)
 8003646:	f7fd f9c9 	bl	80009dc <__aeabi_dcmplt>
 800364a:	2800      	cmp	r0, #0
 800364c:	d07d      	beq.n	800374a <_dtoa_r+0x4ca>
 800364e:	f1b8 0f00 	cmp.w	r8, #0
 8003652:	d07a      	beq.n	800374a <_dtoa_r+0x4ca>
 8003654:	9b04      	ldr	r3, [sp, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	dd36      	ble.n	80036c8 <_dtoa_r+0x448>
 800365a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800365e:	2200      	movs	r2, #0
 8003660:	4b8c      	ldr	r3, [pc, #560]	; (8003894 <_dtoa_r+0x614>)
 8003662:	f7fc ff49 	bl	80004f8 <__aeabi_dmul>
 8003666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800366a:	9e04      	ldr	r6, [sp, #16]
 800366c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8003670:	3501      	adds	r5, #1
 8003672:	4628      	mov	r0, r5
 8003674:	f7fc fed6 	bl	8000424 <__aeabi_i2d>
 8003678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800367c:	f7fc ff3c 	bl	80004f8 <__aeabi_dmul>
 8003680:	2200      	movs	r2, #0
 8003682:	4b85      	ldr	r3, [pc, #532]	; (8003898 <_dtoa_r+0x618>)
 8003684:	f7fc fd82 	bl	800018c <__adddf3>
 8003688:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800368c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003690:	950b      	str	r5, [sp, #44]	; 0x2c
 8003692:	2e00      	cmp	r6, #0
 8003694:	d15c      	bne.n	8003750 <_dtoa_r+0x4d0>
 8003696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800369a:	2200      	movs	r2, #0
 800369c:	4b7f      	ldr	r3, [pc, #508]	; (800389c <_dtoa_r+0x61c>)
 800369e:	f7fc fd73 	bl	8000188 <__aeabi_dsub>
 80036a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036a4:	462b      	mov	r3, r5
 80036a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036aa:	f7fd f9b5 	bl	8000a18 <__aeabi_dcmpgt>
 80036ae:	2800      	cmp	r0, #0
 80036b0:	f040 8281 	bne.w	8003bb6 <_dtoa_r+0x936>
 80036b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036ba:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80036be:	f7fd f98d 	bl	80009dc <__aeabi_dcmplt>
 80036c2:	2800      	cmp	r0, #0
 80036c4:	f040 8275 	bne.w	8003bb2 <_dtoa_r+0x932>
 80036c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80036cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f2c0 814b 	blt.w	800396e <_dtoa_r+0x6ee>
 80036d8:	f1ba 0f0e 	cmp.w	sl, #14
 80036dc:	f300 8147 	bgt.w	800396e <_dtoa_r+0x6ee>
 80036e0:	4b69      	ldr	r3, [pc, #420]	; (8003888 <_dtoa_r+0x608>)
 80036e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80036ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f280 80d7 	bge.w	80038a4 <_dtoa_r+0x624>
 80036f6:	f1b8 0f00 	cmp.w	r8, #0
 80036fa:	f300 80d3 	bgt.w	80038a4 <_dtoa_r+0x624>
 80036fe:	f040 8257 	bne.w	8003bb0 <_dtoa_r+0x930>
 8003702:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003706:	2200      	movs	r2, #0
 8003708:	4b64      	ldr	r3, [pc, #400]	; (800389c <_dtoa_r+0x61c>)
 800370a:	f7fc fef5 	bl	80004f8 <__aeabi_dmul>
 800370e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003712:	f7fd f977 	bl	8000a04 <__aeabi_dcmpge>
 8003716:	4646      	mov	r6, r8
 8003718:	4647      	mov	r7, r8
 800371a:	2800      	cmp	r0, #0
 800371c:	f040 822d 	bne.w	8003b7a <_dtoa_r+0x8fa>
 8003720:	9b06      	ldr	r3, [sp, #24]
 8003722:	9a06      	ldr	r2, [sp, #24]
 8003724:	1c5d      	adds	r5, r3, #1
 8003726:	2331      	movs	r3, #49	; 0x31
 8003728:	f10a 0a01 	add.w	sl, sl, #1
 800372c:	7013      	strb	r3, [r2, #0]
 800372e:	e228      	b.n	8003b82 <_dtoa_r+0x902>
 8003730:	07f2      	lsls	r2, r6, #31
 8003732:	d505      	bpl.n	8003740 <_dtoa_r+0x4c0>
 8003734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003738:	f7fc fede 	bl	80004f8 <__aeabi_dmul>
 800373c:	2301      	movs	r3, #1
 800373e:	3501      	adds	r5, #1
 8003740:	1076      	asrs	r6, r6, #1
 8003742:	3708      	adds	r7, #8
 8003744:	e76e      	b.n	8003624 <_dtoa_r+0x3a4>
 8003746:	2502      	movs	r5, #2
 8003748:	e771      	b.n	800362e <_dtoa_r+0x3ae>
 800374a:	4657      	mov	r7, sl
 800374c:	4646      	mov	r6, r8
 800374e:	e790      	b.n	8003672 <_dtoa_r+0x3f2>
 8003750:	4b4d      	ldr	r3, [pc, #308]	; (8003888 <_dtoa_r+0x608>)
 8003752:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003756:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800375a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800375c:	2b00      	cmp	r3, #0
 800375e:	d048      	beq.n	80037f2 <_dtoa_r+0x572>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	2000      	movs	r0, #0
 8003766:	494e      	ldr	r1, [pc, #312]	; (80038a0 <_dtoa_r+0x620>)
 8003768:	f7fc fff0 	bl	800074c <__aeabi_ddiv>
 800376c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003770:	f7fc fd0a 	bl	8000188 <__aeabi_dsub>
 8003774:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003778:	9d06      	ldr	r5, [sp, #24]
 800377a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800377e:	f7fd f96b 	bl	8000a58 <__aeabi_d2iz>
 8003782:	9011      	str	r0, [sp, #68]	; 0x44
 8003784:	f7fc fe4e 	bl	8000424 <__aeabi_i2d>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003790:	f7fc fcfa 	bl	8000188 <__aeabi_dsub>
 8003794:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003796:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800379a:	3330      	adds	r3, #48	; 0x30
 800379c:	f805 3b01 	strb.w	r3, [r5], #1
 80037a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80037a4:	f7fd f91a 	bl	80009dc <__aeabi_dcmplt>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d163      	bne.n	8003874 <_dtoa_r+0x5f4>
 80037ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80037b0:	2000      	movs	r0, #0
 80037b2:	4937      	ldr	r1, [pc, #220]	; (8003890 <_dtoa_r+0x610>)
 80037b4:	f7fc fce8 	bl	8000188 <__aeabi_dsub>
 80037b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80037bc:	f7fd f90e 	bl	80009dc <__aeabi_dcmplt>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	f040 80b5 	bne.w	8003930 <_dtoa_r+0x6b0>
 80037c6:	9b06      	ldr	r3, [sp, #24]
 80037c8:	1aeb      	subs	r3, r5, r3
 80037ca:	429e      	cmp	r6, r3
 80037cc:	f77f af7c 	ble.w	80036c8 <_dtoa_r+0x448>
 80037d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80037d4:	2200      	movs	r2, #0
 80037d6:	4b2f      	ldr	r3, [pc, #188]	; (8003894 <_dtoa_r+0x614>)
 80037d8:	f7fc fe8e 	bl	80004f8 <__aeabi_dmul>
 80037dc:	2200      	movs	r2, #0
 80037de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80037e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037e6:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <_dtoa_r+0x614>)
 80037e8:	f7fc fe86 	bl	80004f8 <__aeabi_dmul>
 80037ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037f0:	e7c3      	b.n	800377a <_dtoa_r+0x4fa>
 80037f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80037f6:	f7fc fe7f 	bl	80004f8 <__aeabi_dmul>
 80037fa:	9b06      	ldr	r3, [sp, #24]
 80037fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003800:	199d      	adds	r5, r3, r6
 8003802:	461e      	mov	r6, r3
 8003804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003808:	f7fd f926 	bl	8000a58 <__aeabi_d2iz>
 800380c:	9011      	str	r0, [sp, #68]	; 0x44
 800380e:	f7fc fe09 	bl	8000424 <__aeabi_i2d>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800381a:	f7fc fcb5 	bl	8000188 <__aeabi_dsub>
 800381e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003824:	3330      	adds	r3, #48	; 0x30
 8003826:	f806 3b01 	strb.w	r3, [r6], #1
 800382a:	42ae      	cmp	r6, r5
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	d124      	bne.n	800387c <_dtoa_r+0x5fc>
 8003832:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003836:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <_dtoa_r+0x620>)
 8003838:	f7fc fca8 	bl	800018c <__adddf3>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003844:	f7fd f8e8 	bl	8000a18 <__aeabi_dcmpgt>
 8003848:	2800      	cmp	r0, #0
 800384a:	d171      	bne.n	8003930 <_dtoa_r+0x6b0>
 800384c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003850:	2000      	movs	r0, #0
 8003852:	4913      	ldr	r1, [pc, #76]	; (80038a0 <_dtoa_r+0x620>)
 8003854:	f7fc fc98 	bl	8000188 <__aeabi_dsub>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003860:	f7fd f8bc 	bl	80009dc <__aeabi_dcmplt>
 8003864:	2800      	cmp	r0, #0
 8003866:	f43f af2f 	beq.w	80036c8 <_dtoa_r+0x448>
 800386a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800386e:	1e6a      	subs	r2, r5, #1
 8003870:	2b30      	cmp	r3, #48	; 0x30
 8003872:	d001      	beq.n	8003878 <_dtoa_r+0x5f8>
 8003874:	46ba      	mov	sl, r7
 8003876:	e04a      	b.n	800390e <_dtoa_r+0x68e>
 8003878:	4615      	mov	r5, r2
 800387a:	e7f6      	b.n	800386a <_dtoa_r+0x5ea>
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <_dtoa_r+0x614>)
 800387e:	f7fc fe3b 	bl	80004f8 <__aeabi_dmul>
 8003882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003886:	e7bd      	b.n	8003804 <_dtoa_r+0x584>
 8003888:	080045b8 	.word	0x080045b8
 800388c:	08004590 	.word	0x08004590
 8003890:	3ff00000 	.word	0x3ff00000
 8003894:	40240000 	.word	0x40240000
 8003898:	401c0000 	.word	0x401c0000
 800389c:	40140000 	.word	0x40140000
 80038a0:	3fe00000 	.word	0x3fe00000
 80038a4:	9d06      	ldr	r5, [sp, #24]
 80038a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80038aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038ae:	4630      	mov	r0, r6
 80038b0:	4639      	mov	r1, r7
 80038b2:	f7fc ff4b 	bl	800074c <__aeabi_ddiv>
 80038b6:	f7fd f8cf 	bl	8000a58 <__aeabi_d2iz>
 80038ba:	4681      	mov	r9, r0
 80038bc:	f7fc fdb2 	bl	8000424 <__aeabi_i2d>
 80038c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038c4:	f7fc fe18 	bl	80004f8 <__aeabi_dmul>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4630      	mov	r0, r6
 80038ce:	4639      	mov	r1, r7
 80038d0:	f7fc fc5a 	bl	8000188 <__aeabi_dsub>
 80038d4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80038d8:	f805 6b01 	strb.w	r6, [r5], #1
 80038dc:	9e06      	ldr	r6, [sp, #24]
 80038de:	4602      	mov	r2, r0
 80038e0:	1bae      	subs	r6, r5, r6
 80038e2:	45b0      	cmp	r8, r6
 80038e4:	460b      	mov	r3, r1
 80038e6:	d135      	bne.n	8003954 <_dtoa_r+0x6d4>
 80038e8:	f7fc fc50 	bl	800018c <__adddf3>
 80038ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038f0:	4606      	mov	r6, r0
 80038f2:	460f      	mov	r7, r1
 80038f4:	f7fd f890 	bl	8000a18 <__aeabi_dcmpgt>
 80038f8:	b9c8      	cbnz	r0, 800392e <_dtoa_r+0x6ae>
 80038fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038fe:	4630      	mov	r0, r6
 8003900:	4639      	mov	r1, r7
 8003902:	f7fd f861 	bl	80009c8 <__aeabi_dcmpeq>
 8003906:	b110      	cbz	r0, 800390e <_dtoa_r+0x68e>
 8003908:	f019 0f01 	tst.w	r9, #1
 800390c:	d10f      	bne.n	800392e <_dtoa_r+0x6ae>
 800390e:	4659      	mov	r1, fp
 8003910:	4620      	mov	r0, r4
 8003912:	f000 fabe 	bl	8003e92 <_Bfree>
 8003916:	2300      	movs	r3, #0
 8003918:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800391a:	702b      	strb	r3, [r5, #0]
 800391c:	f10a 0301 	add.w	r3, sl, #1
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003924:	2b00      	cmp	r3, #0
 8003926:	f43f acf3 	beq.w	8003310 <_dtoa_r+0x90>
 800392a:	601d      	str	r5, [r3, #0]
 800392c:	e4f0      	b.n	8003310 <_dtoa_r+0x90>
 800392e:	4657      	mov	r7, sl
 8003930:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003934:	1e6b      	subs	r3, r5, #1
 8003936:	2a39      	cmp	r2, #57	; 0x39
 8003938:	d106      	bne.n	8003948 <_dtoa_r+0x6c8>
 800393a:	9a06      	ldr	r2, [sp, #24]
 800393c:	429a      	cmp	r2, r3
 800393e:	d107      	bne.n	8003950 <_dtoa_r+0x6d0>
 8003940:	2330      	movs	r3, #48	; 0x30
 8003942:	7013      	strb	r3, [r2, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	3701      	adds	r7, #1
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	3201      	adds	r2, #1
 800394c:	701a      	strb	r2, [r3, #0]
 800394e:	e791      	b.n	8003874 <_dtoa_r+0x5f4>
 8003950:	461d      	mov	r5, r3
 8003952:	e7ed      	b.n	8003930 <_dtoa_r+0x6b0>
 8003954:	2200      	movs	r2, #0
 8003956:	4b99      	ldr	r3, [pc, #612]	; (8003bbc <_dtoa_r+0x93c>)
 8003958:	f7fc fdce 	bl	80004f8 <__aeabi_dmul>
 800395c:	2200      	movs	r2, #0
 800395e:	2300      	movs	r3, #0
 8003960:	4606      	mov	r6, r0
 8003962:	460f      	mov	r7, r1
 8003964:	f7fd f830 	bl	80009c8 <__aeabi_dcmpeq>
 8003968:	2800      	cmp	r0, #0
 800396a:	d09e      	beq.n	80038aa <_dtoa_r+0x62a>
 800396c:	e7cf      	b.n	800390e <_dtoa_r+0x68e>
 800396e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003970:	2a00      	cmp	r2, #0
 8003972:	f000 8088 	beq.w	8003a86 <_dtoa_r+0x806>
 8003976:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003978:	2a01      	cmp	r2, #1
 800397a:	dc6d      	bgt.n	8003a58 <_dtoa_r+0x7d8>
 800397c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800397e:	2a00      	cmp	r2, #0
 8003980:	d066      	beq.n	8003a50 <_dtoa_r+0x7d0>
 8003982:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003986:	464d      	mov	r5, r9
 8003988:	9e08      	ldr	r6, [sp, #32]
 800398a:	9a07      	ldr	r2, [sp, #28]
 800398c:	2101      	movs	r1, #1
 800398e:	441a      	add	r2, r3
 8003990:	4620      	mov	r0, r4
 8003992:	4499      	add	r9, r3
 8003994:	9207      	str	r2, [sp, #28]
 8003996:	f000 fb1c 	bl	8003fd2 <__i2b>
 800399a:	4607      	mov	r7, r0
 800399c:	2d00      	cmp	r5, #0
 800399e:	dd0b      	ble.n	80039b8 <_dtoa_r+0x738>
 80039a0:	9b07      	ldr	r3, [sp, #28]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	dd08      	ble.n	80039b8 <_dtoa_r+0x738>
 80039a6:	42ab      	cmp	r3, r5
 80039a8:	bfa8      	it	ge
 80039aa:	462b      	movge	r3, r5
 80039ac:	9a07      	ldr	r2, [sp, #28]
 80039ae:	eba9 0903 	sub.w	r9, r9, r3
 80039b2:	1aed      	subs	r5, r5, r3
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	9307      	str	r3, [sp, #28]
 80039b8:	9b08      	ldr	r3, [sp, #32]
 80039ba:	b1eb      	cbz	r3, 80039f8 <_dtoa_r+0x778>
 80039bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d065      	beq.n	8003a8e <_dtoa_r+0x80e>
 80039c2:	b18e      	cbz	r6, 80039e8 <_dtoa_r+0x768>
 80039c4:	4639      	mov	r1, r7
 80039c6:	4632      	mov	r2, r6
 80039c8:	4620      	mov	r0, r4
 80039ca:	f000 fba1 	bl	8004110 <__pow5mult>
 80039ce:	465a      	mov	r2, fp
 80039d0:	4601      	mov	r1, r0
 80039d2:	4607      	mov	r7, r0
 80039d4:	4620      	mov	r0, r4
 80039d6:	f000 fb05 	bl	8003fe4 <__multiply>
 80039da:	4659      	mov	r1, fp
 80039dc:	900a      	str	r0, [sp, #40]	; 0x28
 80039de:	4620      	mov	r0, r4
 80039e0:	f000 fa57 	bl	8003e92 <_Bfree>
 80039e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039e6:	469b      	mov	fp, r3
 80039e8:	9b08      	ldr	r3, [sp, #32]
 80039ea:	1b9a      	subs	r2, r3, r6
 80039ec:	d004      	beq.n	80039f8 <_dtoa_r+0x778>
 80039ee:	4659      	mov	r1, fp
 80039f0:	4620      	mov	r0, r4
 80039f2:	f000 fb8d 	bl	8004110 <__pow5mult>
 80039f6:	4683      	mov	fp, r0
 80039f8:	2101      	movs	r1, #1
 80039fa:	4620      	mov	r0, r4
 80039fc:	f000 fae9 	bl	8003fd2 <__i2b>
 8003a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a02:	4606      	mov	r6, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 81c6 	beq.w	8003d96 <_dtoa_r+0xb16>
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4601      	mov	r1, r0
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f000 fb7e 	bl	8004110 <__pow5mult>
 8003a14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003a16:	4606      	mov	r6, r0
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	dc3e      	bgt.n	8003a9a <_dtoa_r+0x81a>
 8003a1c:	9b02      	ldr	r3, [sp, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d137      	bne.n	8003a92 <_dtoa_r+0x812>
 8003a22:	9b03      	ldr	r3, [sp, #12]
 8003a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d134      	bne.n	8003a96 <_dtoa_r+0x816>
 8003a2c:	9b03      	ldr	r3, [sp, #12]
 8003a2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a32:	0d1b      	lsrs	r3, r3, #20
 8003a34:	051b      	lsls	r3, r3, #20
 8003a36:	b12b      	cbz	r3, 8003a44 <_dtoa_r+0x7c4>
 8003a38:	9b07      	ldr	r3, [sp, #28]
 8003a3a:	f109 0901 	add.w	r9, r9, #1
 8003a3e:	3301      	adds	r3, #1
 8003a40:	9307      	str	r3, [sp, #28]
 8003a42:	2301      	movs	r3, #1
 8003a44:	9308      	str	r3, [sp, #32]
 8003a46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d128      	bne.n	8003a9e <_dtoa_r+0x81e>
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	e02e      	b.n	8003aae <_dtoa_r+0x82e>
 8003a50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a52:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003a56:	e796      	b.n	8003986 <_dtoa_r+0x706>
 8003a58:	9b08      	ldr	r3, [sp, #32]
 8003a5a:	f108 36ff 	add.w	r6, r8, #4294967295
 8003a5e:	42b3      	cmp	r3, r6
 8003a60:	bfb7      	itett	lt
 8003a62:	9b08      	ldrlt	r3, [sp, #32]
 8003a64:	1b9e      	subge	r6, r3, r6
 8003a66:	1af2      	sublt	r2, r6, r3
 8003a68:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003a6a:	bfbf      	itttt	lt
 8003a6c:	9608      	strlt	r6, [sp, #32]
 8003a6e:	189b      	addlt	r3, r3, r2
 8003a70:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003a72:	2600      	movlt	r6, #0
 8003a74:	f1b8 0f00 	cmp.w	r8, #0
 8003a78:	bfb9      	ittee	lt
 8003a7a:	eba9 0508 	sublt.w	r5, r9, r8
 8003a7e:	2300      	movlt	r3, #0
 8003a80:	464d      	movge	r5, r9
 8003a82:	4643      	movge	r3, r8
 8003a84:	e781      	b.n	800398a <_dtoa_r+0x70a>
 8003a86:	9e08      	ldr	r6, [sp, #32]
 8003a88:	464d      	mov	r5, r9
 8003a8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003a8c:	e786      	b.n	800399c <_dtoa_r+0x71c>
 8003a8e:	9a08      	ldr	r2, [sp, #32]
 8003a90:	e7ad      	b.n	80039ee <_dtoa_r+0x76e>
 8003a92:	2300      	movs	r3, #0
 8003a94:	e7d6      	b.n	8003a44 <_dtoa_r+0x7c4>
 8003a96:	9b02      	ldr	r3, [sp, #8]
 8003a98:	e7d4      	b.n	8003a44 <_dtoa_r+0x7c4>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	9308      	str	r3, [sp, #32]
 8003a9e:	6933      	ldr	r3, [r6, #16]
 8003aa0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003aa4:	6918      	ldr	r0, [r3, #16]
 8003aa6:	f000 fa46 	bl	8003f36 <__hi0bits>
 8003aaa:	f1c0 0020 	rsb	r0, r0, #32
 8003aae:	9b07      	ldr	r3, [sp, #28]
 8003ab0:	4418      	add	r0, r3
 8003ab2:	f010 001f 	ands.w	r0, r0, #31
 8003ab6:	d047      	beq.n	8003b48 <_dtoa_r+0x8c8>
 8003ab8:	f1c0 0320 	rsb	r3, r0, #32
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	dd3b      	ble.n	8003b38 <_dtoa_r+0x8b8>
 8003ac0:	9b07      	ldr	r3, [sp, #28]
 8003ac2:	f1c0 001c 	rsb	r0, r0, #28
 8003ac6:	4481      	add	r9, r0
 8003ac8:	4405      	add	r5, r0
 8003aca:	4403      	add	r3, r0
 8003acc:	9307      	str	r3, [sp, #28]
 8003ace:	f1b9 0f00 	cmp.w	r9, #0
 8003ad2:	dd05      	ble.n	8003ae0 <_dtoa_r+0x860>
 8003ad4:	4659      	mov	r1, fp
 8003ad6:	464a      	mov	r2, r9
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f000 fb67 	bl	80041ac <__lshift>
 8003ade:	4683      	mov	fp, r0
 8003ae0:	9b07      	ldr	r3, [sp, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	dd05      	ble.n	8003af2 <_dtoa_r+0x872>
 8003ae6:	4631      	mov	r1, r6
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4620      	mov	r0, r4
 8003aec:	f000 fb5e 	bl	80041ac <__lshift>
 8003af0:	4606      	mov	r6, r0
 8003af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003af4:	b353      	cbz	r3, 8003b4c <_dtoa_r+0x8cc>
 8003af6:	4631      	mov	r1, r6
 8003af8:	4658      	mov	r0, fp
 8003afa:	f000 fbab 	bl	8004254 <__mcmp>
 8003afe:	2800      	cmp	r0, #0
 8003b00:	da24      	bge.n	8003b4c <_dtoa_r+0x8cc>
 8003b02:	2300      	movs	r3, #0
 8003b04:	4659      	mov	r1, fp
 8003b06:	220a      	movs	r2, #10
 8003b08:	4620      	mov	r0, r4
 8003b0a:	f000 f9d9 	bl	8003ec0 <__multadd>
 8003b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b14:	4683      	mov	fp, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 8144 	beq.w	8003da4 <_dtoa_r+0xb24>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4639      	mov	r1, r7
 8003b20:	220a      	movs	r2, #10
 8003b22:	4620      	mov	r0, r4
 8003b24:	f000 f9cc 	bl	8003ec0 <__multadd>
 8003b28:	9b04      	ldr	r3, [sp, #16]
 8003b2a:	4607      	mov	r7, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	dc4d      	bgt.n	8003bcc <_dtoa_r+0x94c>
 8003b30:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	dd4a      	ble.n	8003bcc <_dtoa_r+0x94c>
 8003b36:	e011      	b.n	8003b5c <_dtoa_r+0x8dc>
 8003b38:	d0c9      	beq.n	8003ace <_dtoa_r+0x84e>
 8003b3a:	9a07      	ldr	r2, [sp, #28]
 8003b3c:	331c      	adds	r3, #28
 8003b3e:	441a      	add	r2, r3
 8003b40:	4499      	add	r9, r3
 8003b42:	441d      	add	r5, r3
 8003b44:	4613      	mov	r3, r2
 8003b46:	e7c1      	b.n	8003acc <_dtoa_r+0x84c>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	e7f6      	b.n	8003b3a <_dtoa_r+0x8ba>
 8003b4c:	f1b8 0f00 	cmp.w	r8, #0
 8003b50:	dc36      	bgt.n	8003bc0 <_dtoa_r+0x940>
 8003b52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	dd33      	ble.n	8003bc0 <_dtoa_r+0x940>
 8003b58:	f8cd 8010 	str.w	r8, [sp, #16]
 8003b5c:	9b04      	ldr	r3, [sp, #16]
 8003b5e:	b963      	cbnz	r3, 8003b7a <_dtoa_r+0x8fa>
 8003b60:	4631      	mov	r1, r6
 8003b62:	2205      	movs	r2, #5
 8003b64:	4620      	mov	r0, r4
 8003b66:	f000 f9ab 	bl	8003ec0 <__multadd>
 8003b6a:	4601      	mov	r1, r0
 8003b6c:	4606      	mov	r6, r0
 8003b6e:	4658      	mov	r0, fp
 8003b70:	f000 fb70 	bl	8004254 <__mcmp>
 8003b74:	2800      	cmp	r0, #0
 8003b76:	f73f add3 	bgt.w	8003720 <_dtoa_r+0x4a0>
 8003b7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003b7c:	9d06      	ldr	r5, [sp, #24]
 8003b7e:	ea6f 0a03 	mvn.w	sl, r3
 8003b82:	f04f 0900 	mov.w	r9, #0
 8003b86:	4631      	mov	r1, r6
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f000 f982 	bl	8003e92 <_Bfree>
 8003b8e:	2f00      	cmp	r7, #0
 8003b90:	f43f aebd 	beq.w	800390e <_dtoa_r+0x68e>
 8003b94:	f1b9 0f00 	cmp.w	r9, #0
 8003b98:	d005      	beq.n	8003ba6 <_dtoa_r+0x926>
 8003b9a:	45b9      	cmp	r9, r7
 8003b9c:	d003      	beq.n	8003ba6 <_dtoa_r+0x926>
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f000 f976 	bl	8003e92 <_Bfree>
 8003ba6:	4639      	mov	r1, r7
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f000 f972 	bl	8003e92 <_Bfree>
 8003bae:	e6ae      	b.n	800390e <_dtoa_r+0x68e>
 8003bb0:	2600      	movs	r6, #0
 8003bb2:	4637      	mov	r7, r6
 8003bb4:	e7e1      	b.n	8003b7a <_dtoa_r+0x8fa>
 8003bb6:	46ba      	mov	sl, r7
 8003bb8:	4637      	mov	r7, r6
 8003bba:	e5b1      	b.n	8003720 <_dtoa_r+0x4a0>
 8003bbc:	40240000 	.word	0x40240000
 8003bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bc2:	f8cd 8010 	str.w	r8, [sp, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80f3 	beq.w	8003db2 <_dtoa_r+0xb32>
 8003bcc:	2d00      	cmp	r5, #0
 8003bce:	dd05      	ble.n	8003bdc <_dtoa_r+0x95c>
 8003bd0:	4639      	mov	r1, r7
 8003bd2:	462a      	mov	r2, r5
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f000 fae9 	bl	80041ac <__lshift>
 8003bda:	4607      	mov	r7, r0
 8003bdc:	9b08      	ldr	r3, [sp, #32]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d04c      	beq.n	8003c7c <_dtoa_r+0x9fc>
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4620      	mov	r0, r4
 8003be6:	f000 f920 	bl	8003e2a <_Balloc>
 8003bea:	4605      	mov	r5, r0
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	f107 010c 	add.w	r1, r7, #12
 8003bf2:	3202      	adds	r2, #2
 8003bf4:	0092      	lsls	r2, r2, #2
 8003bf6:	300c      	adds	r0, #12
 8003bf8:	f000 f90c 	bl	8003e14 <memcpy>
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	4629      	mov	r1, r5
 8003c00:	4620      	mov	r0, r4
 8003c02:	f000 fad3 	bl	80041ac <__lshift>
 8003c06:	46b9      	mov	r9, r7
 8003c08:	4607      	mov	r7, r0
 8003c0a:	9b06      	ldr	r3, [sp, #24]
 8003c0c:	9307      	str	r3, [sp, #28]
 8003c0e:	9b02      	ldr	r3, [sp, #8]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	9308      	str	r3, [sp, #32]
 8003c16:	4631      	mov	r1, r6
 8003c18:	4658      	mov	r0, fp
 8003c1a:	f7ff faa3 	bl	8003164 <quorem>
 8003c1e:	4649      	mov	r1, r9
 8003c20:	4605      	mov	r5, r0
 8003c22:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003c26:	4658      	mov	r0, fp
 8003c28:	f000 fb14 	bl	8004254 <__mcmp>
 8003c2c:	463a      	mov	r2, r7
 8003c2e:	9002      	str	r0, [sp, #8]
 8003c30:	4631      	mov	r1, r6
 8003c32:	4620      	mov	r0, r4
 8003c34:	f000 fb28 	bl	8004288 <__mdiff>
 8003c38:	68c3      	ldr	r3, [r0, #12]
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	bb03      	cbnz	r3, 8003c80 <_dtoa_r+0xa00>
 8003c3e:	4601      	mov	r1, r0
 8003c40:	9009      	str	r0, [sp, #36]	; 0x24
 8003c42:	4658      	mov	r0, fp
 8003c44:	f000 fb06 	bl	8004254 <__mcmp>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4620      	mov	r0, r4
 8003c50:	9309      	str	r3, [sp, #36]	; 0x24
 8003c52:	f000 f91e 	bl	8003e92 <_Bfree>
 8003c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c58:	b9a3      	cbnz	r3, 8003c84 <_dtoa_r+0xa04>
 8003c5a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003c5c:	b992      	cbnz	r2, 8003c84 <_dtoa_r+0xa04>
 8003c5e:	9a08      	ldr	r2, [sp, #32]
 8003c60:	b982      	cbnz	r2, 8003c84 <_dtoa_r+0xa04>
 8003c62:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003c66:	d029      	beq.n	8003cbc <_dtoa_r+0xa3c>
 8003c68:	9b02      	ldr	r3, [sp, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	dd01      	ble.n	8003c72 <_dtoa_r+0x9f2>
 8003c6e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003c72:	9b07      	ldr	r3, [sp, #28]
 8003c74:	1c5d      	adds	r5, r3, #1
 8003c76:	f883 8000 	strb.w	r8, [r3]
 8003c7a:	e784      	b.n	8003b86 <_dtoa_r+0x906>
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	e7c2      	b.n	8003c06 <_dtoa_r+0x986>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e7e3      	b.n	8003c4c <_dtoa_r+0x9cc>
 8003c84:	9a02      	ldr	r2, [sp, #8]
 8003c86:	2a00      	cmp	r2, #0
 8003c88:	db04      	blt.n	8003c94 <_dtoa_r+0xa14>
 8003c8a:	d123      	bne.n	8003cd4 <_dtoa_r+0xa54>
 8003c8c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003c8e:	bb0a      	cbnz	r2, 8003cd4 <_dtoa_r+0xa54>
 8003c90:	9a08      	ldr	r2, [sp, #32]
 8003c92:	b9fa      	cbnz	r2, 8003cd4 <_dtoa_r+0xa54>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	ddec      	ble.n	8003c72 <_dtoa_r+0x9f2>
 8003c98:	4659      	mov	r1, fp
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f000 fa85 	bl	80041ac <__lshift>
 8003ca2:	4631      	mov	r1, r6
 8003ca4:	4683      	mov	fp, r0
 8003ca6:	f000 fad5 	bl	8004254 <__mcmp>
 8003caa:	2800      	cmp	r0, #0
 8003cac:	dc03      	bgt.n	8003cb6 <_dtoa_r+0xa36>
 8003cae:	d1e0      	bne.n	8003c72 <_dtoa_r+0x9f2>
 8003cb0:	f018 0f01 	tst.w	r8, #1
 8003cb4:	d0dd      	beq.n	8003c72 <_dtoa_r+0x9f2>
 8003cb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003cba:	d1d8      	bne.n	8003c6e <_dtoa_r+0x9ee>
 8003cbc:	9b07      	ldr	r3, [sp, #28]
 8003cbe:	9a07      	ldr	r2, [sp, #28]
 8003cc0:	1c5d      	adds	r5, r3, #1
 8003cc2:	2339      	movs	r3, #57	; 0x39
 8003cc4:	7013      	strb	r3, [r2, #0]
 8003cc6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003cca:	1e6a      	subs	r2, r5, #1
 8003ccc:	2b39      	cmp	r3, #57	; 0x39
 8003cce:	d04d      	beq.n	8003d6c <_dtoa_r+0xaec>
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	e052      	b.n	8003d7a <_dtoa_r+0xafa>
 8003cd4:	9a07      	ldr	r2, [sp, #28]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f102 0501 	add.w	r5, r2, #1
 8003cdc:	dd06      	ble.n	8003cec <_dtoa_r+0xa6c>
 8003cde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003ce2:	d0eb      	beq.n	8003cbc <_dtoa_r+0xa3c>
 8003ce4:	f108 0801 	add.w	r8, r8, #1
 8003ce8:	9b07      	ldr	r3, [sp, #28]
 8003cea:	e7c4      	b.n	8003c76 <_dtoa_r+0x9f6>
 8003cec:	9b06      	ldr	r3, [sp, #24]
 8003cee:	9a04      	ldr	r2, [sp, #16]
 8003cf0:	1aeb      	subs	r3, r5, r3
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003cf8:	d021      	beq.n	8003d3e <_dtoa_r+0xabe>
 8003cfa:	4659      	mov	r1, fp
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	220a      	movs	r2, #10
 8003d00:	4620      	mov	r0, r4
 8003d02:	f000 f8dd 	bl	8003ec0 <__multadd>
 8003d06:	45b9      	cmp	r9, r7
 8003d08:	4683      	mov	fp, r0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	f04f 020a 	mov.w	r2, #10
 8003d12:	4649      	mov	r1, r9
 8003d14:	4620      	mov	r0, r4
 8003d16:	d105      	bne.n	8003d24 <_dtoa_r+0xaa4>
 8003d18:	f000 f8d2 	bl	8003ec0 <__multadd>
 8003d1c:	4681      	mov	r9, r0
 8003d1e:	4607      	mov	r7, r0
 8003d20:	9507      	str	r5, [sp, #28]
 8003d22:	e778      	b.n	8003c16 <_dtoa_r+0x996>
 8003d24:	f000 f8cc 	bl	8003ec0 <__multadd>
 8003d28:	4639      	mov	r1, r7
 8003d2a:	4681      	mov	r9, r0
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	220a      	movs	r2, #10
 8003d30:	4620      	mov	r0, r4
 8003d32:	f000 f8c5 	bl	8003ec0 <__multadd>
 8003d36:	4607      	mov	r7, r0
 8003d38:	e7f2      	b.n	8003d20 <_dtoa_r+0xaa0>
 8003d3a:	f04f 0900 	mov.w	r9, #0
 8003d3e:	4659      	mov	r1, fp
 8003d40:	2201      	movs	r2, #1
 8003d42:	4620      	mov	r0, r4
 8003d44:	f000 fa32 	bl	80041ac <__lshift>
 8003d48:	4631      	mov	r1, r6
 8003d4a:	4683      	mov	fp, r0
 8003d4c:	f000 fa82 	bl	8004254 <__mcmp>
 8003d50:	2800      	cmp	r0, #0
 8003d52:	dcb8      	bgt.n	8003cc6 <_dtoa_r+0xa46>
 8003d54:	d102      	bne.n	8003d5c <_dtoa_r+0xadc>
 8003d56:	f018 0f01 	tst.w	r8, #1
 8003d5a:	d1b4      	bne.n	8003cc6 <_dtoa_r+0xa46>
 8003d5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003d60:	1e6a      	subs	r2, r5, #1
 8003d62:	2b30      	cmp	r3, #48	; 0x30
 8003d64:	f47f af0f 	bne.w	8003b86 <_dtoa_r+0x906>
 8003d68:	4615      	mov	r5, r2
 8003d6a:	e7f7      	b.n	8003d5c <_dtoa_r+0xadc>
 8003d6c:	9b06      	ldr	r3, [sp, #24]
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d105      	bne.n	8003d7e <_dtoa_r+0xafe>
 8003d72:	2331      	movs	r3, #49	; 0x31
 8003d74:	9a06      	ldr	r2, [sp, #24]
 8003d76:	f10a 0a01 	add.w	sl, sl, #1
 8003d7a:	7013      	strb	r3, [r2, #0]
 8003d7c:	e703      	b.n	8003b86 <_dtoa_r+0x906>
 8003d7e:	4615      	mov	r5, r2
 8003d80:	e7a1      	b.n	8003cc6 <_dtoa_r+0xa46>
 8003d82:	4b17      	ldr	r3, [pc, #92]	; (8003de0 <_dtoa_r+0xb60>)
 8003d84:	f7ff bae1 	b.w	800334a <_dtoa_r+0xca>
 8003d88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f47f aabb 	bne.w	8003306 <_dtoa_r+0x86>
 8003d90:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <_dtoa_r+0xb64>)
 8003d92:	f7ff bada 	b.w	800334a <_dtoa_r+0xca>
 8003d96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	f77f ae3f 	ble.w	8003a1c <_dtoa_r+0x79c>
 8003d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003da0:	9308      	str	r3, [sp, #32]
 8003da2:	e653      	b.n	8003a4c <_dtoa_r+0x7cc>
 8003da4:	9b04      	ldr	r3, [sp, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	dc03      	bgt.n	8003db2 <_dtoa_r+0xb32>
 8003daa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	f73f aed5 	bgt.w	8003b5c <_dtoa_r+0x8dc>
 8003db2:	9d06      	ldr	r5, [sp, #24]
 8003db4:	4631      	mov	r1, r6
 8003db6:	4658      	mov	r0, fp
 8003db8:	f7ff f9d4 	bl	8003164 <quorem>
 8003dbc:	9b06      	ldr	r3, [sp, #24]
 8003dbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003dc2:	f805 8b01 	strb.w	r8, [r5], #1
 8003dc6:	9a04      	ldr	r2, [sp, #16]
 8003dc8:	1aeb      	subs	r3, r5, r3
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	ddb5      	ble.n	8003d3a <_dtoa_r+0xaba>
 8003dce:	4659      	mov	r1, fp
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	220a      	movs	r2, #10
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f000 f873 	bl	8003ec0 <__multadd>
 8003dda:	4683      	mov	fp, r0
 8003ddc:	e7ea      	b.n	8003db4 <_dtoa_r+0xb34>
 8003dde:	bf00      	nop
 8003de0:	0800457d 	.word	0x0800457d
 8003de4:	0800457f 	.word	0x0800457f

08003de8 <_localeconv_r>:
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <_localeconv_r+0x14>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6a18      	ldr	r0, [r3, #32]
 8003dee:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <_localeconv_r+0x18>)
 8003df0:	2800      	cmp	r0, #0
 8003df2:	bf08      	it	eq
 8003df4:	4618      	moveq	r0, r3
 8003df6:	30f0      	adds	r0, #240	; 0xf0
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	2000001c 	.word	0x2000001c
 8003e00:	20000080 	.word	0x20000080

08003e04 <malloc>:
 8003e04:	4b02      	ldr	r3, [pc, #8]	; (8003e10 <malloc+0xc>)
 8003e06:	4601      	mov	r1, r0
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	f000 baf9 	b.w	8004400 <_malloc_r>
 8003e0e:	bf00      	nop
 8003e10:	2000001c 	.word	0x2000001c

08003e14 <memcpy>:
 8003e14:	b510      	push	{r4, lr}
 8003e16:	1e43      	subs	r3, r0, #1
 8003e18:	440a      	add	r2, r1
 8003e1a:	4291      	cmp	r1, r2
 8003e1c:	d100      	bne.n	8003e20 <memcpy+0xc>
 8003e1e:	bd10      	pop	{r4, pc}
 8003e20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e28:	e7f7      	b.n	8003e1a <memcpy+0x6>

08003e2a <_Balloc>:
 8003e2a:	b570      	push	{r4, r5, r6, lr}
 8003e2c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003e2e:	4604      	mov	r4, r0
 8003e30:	460e      	mov	r6, r1
 8003e32:	b93d      	cbnz	r5, 8003e44 <_Balloc+0x1a>
 8003e34:	2010      	movs	r0, #16
 8003e36:	f7ff ffe5 	bl	8003e04 <malloc>
 8003e3a:	6260      	str	r0, [r4, #36]	; 0x24
 8003e3c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003e40:	6005      	str	r5, [r0, #0]
 8003e42:	60c5      	str	r5, [r0, #12]
 8003e44:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003e46:	68eb      	ldr	r3, [r5, #12]
 8003e48:	b183      	cbz	r3, 8003e6c <_Balloc+0x42>
 8003e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003e52:	b9b8      	cbnz	r0, 8003e84 <_Balloc+0x5a>
 8003e54:	2101      	movs	r1, #1
 8003e56:	fa01 f506 	lsl.w	r5, r1, r6
 8003e5a:	1d6a      	adds	r2, r5, #5
 8003e5c:	0092      	lsls	r2, r2, #2
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f000 fabf 	bl	80043e2 <_calloc_r>
 8003e64:	b160      	cbz	r0, 8003e80 <_Balloc+0x56>
 8003e66:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003e6a:	e00e      	b.n	8003e8a <_Balloc+0x60>
 8003e6c:	2221      	movs	r2, #33	; 0x21
 8003e6e:	2104      	movs	r1, #4
 8003e70:	4620      	mov	r0, r4
 8003e72:	f000 fab6 	bl	80043e2 <_calloc_r>
 8003e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e78:	60e8      	str	r0, [r5, #12]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e4      	bne.n	8003e4a <_Balloc+0x20>
 8003e80:	2000      	movs	r0, #0
 8003e82:	bd70      	pop	{r4, r5, r6, pc}
 8003e84:	6802      	ldr	r2, [r0, #0]
 8003e86:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003e90:	e7f7      	b.n	8003e82 <_Balloc+0x58>

08003e92 <_Bfree>:
 8003e92:	b570      	push	{r4, r5, r6, lr}
 8003e94:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003e96:	4606      	mov	r6, r0
 8003e98:	460d      	mov	r5, r1
 8003e9a:	b93c      	cbnz	r4, 8003eac <_Bfree+0x1a>
 8003e9c:	2010      	movs	r0, #16
 8003e9e:	f7ff ffb1 	bl	8003e04 <malloc>
 8003ea2:	6270      	str	r0, [r6, #36]	; 0x24
 8003ea4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ea8:	6004      	str	r4, [r0, #0]
 8003eaa:	60c4      	str	r4, [r0, #12]
 8003eac:	b13d      	cbz	r5, 8003ebe <_Bfree+0x2c>
 8003eae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003eb0:	686a      	ldr	r2, [r5, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003eb8:	6029      	str	r1, [r5, #0]
 8003eba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}

08003ec0 <__multadd>:
 8003ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec4:	461f      	mov	r7, r3
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	460c      	mov	r4, r1
 8003eca:	2300      	movs	r3, #0
 8003ecc:	690d      	ldr	r5, [r1, #16]
 8003ece:	f101 0c14 	add.w	ip, r1, #20
 8003ed2:	f8dc 0000 	ldr.w	r0, [ip]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	b281      	uxth	r1, r0
 8003eda:	fb02 7101 	mla	r1, r2, r1, r7
 8003ede:	0c00      	lsrs	r0, r0, #16
 8003ee0:	0c0f      	lsrs	r7, r1, #16
 8003ee2:	fb02 7000 	mla	r0, r2, r0, r7
 8003ee6:	b289      	uxth	r1, r1
 8003ee8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003eec:	429d      	cmp	r5, r3
 8003eee:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003ef2:	f84c 1b04 	str.w	r1, [ip], #4
 8003ef6:	dcec      	bgt.n	8003ed2 <__multadd+0x12>
 8003ef8:	b1d7      	cbz	r7, 8003f30 <__multadd+0x70>
 8003efa:	68a3      	ldr	r3, [r4, #8]
 8003efc:	42ab      	cmp	r3, r5
 8003efe:	dc12      	bgt.n	8003f26 <__multadd+0x66>
 8003f00:	6861      	ldr	r1, [r4, #4]
 8003f02:	4630      	mov	r0, r6
 8003f04:	3101      	adds	r1, #1
 8003f06:	f7ff ff90 	bl	8003e2a <_Balloc>
 8003f0a:	4680      	mov	r8, r0
 8003f0c:	6922      	ldr	r2, [r4, #16]
 8003f0e:	f104 010c 	add.w	r1, r4, #12
 8003f12:	3202      	adds	r2, #2
 8003f14:	0092      	lsls	r2, r2, #2
 8003f16:	300c      	adds	r0, #12
 8003f18:	f7ff ff7c 	bl	8003e14 <memcpy>
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	4630      	mov	r0, r6
 8003f20:	f7ff ffb7 	bl	8003e92 <_Bfree>
 8003f24:	4644      	mov	r4, r8
 8003f26:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003f2a:	3501      	adds	r5, #1
 8003f2c:	615f      	str	r7, [r3, #20]
 8003f2e:	6125      	str	r5, [r4, #16]
 8003f30:	4620      	mov	r0, r4
 8003f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003f36 <__hi0bits>:
 8003f36:	0c02      	lsrs	r2, r0, #16
 8003f38:	0412      	lsls	r2, r2, #16
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	b9b2      	cbnz	r2, 8003f6c <__hi0bits+0x36>
 8003f3e:	0403      	lsls	r3, r0, #16
 8003f40:	2010      	movs	r0, #16
 8003f42:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003f46:	bf04      	itt	eq
 8003f48:	021b      	lsleq	r3, r3, #8
 8003f4a:	3008      	addeq	r0, #8
 8003f4c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003f50:	bf04      	itt	eq
 8003f52:	011b      	lsleq	r3, r3, #4
 8003f54:	3004      	addeq	r0, #4
 8003f56:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003f5a:	bf04      	itt	eq
 8003f5c:	009b      	lsleq	r3, r3, #2
 8003f5e:	3002      	addeq	r0, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	db06      	blt.n	8003f72 <__hi0bits+0x3c>
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	d503      	bpl.n	8003f70 <__hi0bits+0x3a>
 8003f68:	3001      	adds	r0, #1
 8003f6a:	4770      	bx	lr
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	e7e8      	b.n	8003f42 <__hi0bits+0xc>
 8003f70:	2020      	movs	r0, #32
 8003f72:	4770      	bx	lr

08003f74 <__lo0bits>:
 8003f74:	6803      	ldr	r3, [r0, #0]
 8003f76:	4601      	mov	r1, r0
 8003f78:	f013 0207 	ands.w	r2, r3, #7
 8003f7c:	d00b      	beq.n	8003f96 <__lo0bits+0x22>
 8003f7e:	07da      	lsls	r2, r3, #31
 8003f80:	d423      	bmi.n	8003fca <__lo0bits+0x56>
 8003f82:	0798      	lsls	r0, r3, #30
 8003f84:	bf49      	itett	mi
 8003f86:	085b      	lsrmi	r3, r3, #1
 8003f88:	089b      	lsrpl	r3, r3, #2
 8003f8a:	2001      	movmi	r0, #1
 8003f8c:	600b      	strmi	r3, [r1, #0]
 8003f8e:	bf5c      	itt	pl
 8003f90:	600b      	strpl	r3, [r1, #0]
 8003f92:	2002      	movpl	r0, #2
 8003f94:	4770      	bx	lr
 8003f96:	b298      	uxth	r0, r3
 8003f98:	b9a8      	cbnz	r0, 8003fc6 <__lo0bits+0x52>
 8003f9a:	2010      	movs	r0, #16
 8003f9c:	0c1b      	lsrs	r3, r3, #16
 8003f9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003fa2:	bf04      	itt	eq
 8003fa4:	0a1b      	lsreq	r3, r3, #8
 8003fa6:	3008      	addeq	r0, #8
 8003fa8:	071a      	lsls	r2, r3, #28
 8003faa:	bf04      	itt	eq
 8003fac:	091b      	lsreq	r3, r3, #4
 8003fae:	3004      	addeq	r0, #4
 8003fb0:	079a      	lsls	r2, r3, #30
 8003fb2:	bf04      	itt	eq
 8003fb4:	089b      	lsreq	r3, r3, #2
 8003fb6:	3002      	addeq	r0, #2
 8003fb8:	07da      	lsls	r2, r3, #31
 8003fba:	d402      	bmi.n	8003fc2 <__lo0bits+0x4e>
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	d006      	beq.n	8003fce <__lo0bits+0x5a>
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	600b      	str	r3, [r1, #0]
 8003fc4:	4770      	bx	lr
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	e7e9      	b.n	8003f9e <__lo0bits+0x2a>
 8003fca:	2000      	movs	r0, #0
 8003fcc:	4770      	bx	lr
 8003fce:	2020      	movs	r0, #32
 8003fd0:	4770      	bx	lr

08003fd2 <__i2b>:
 8003fd2:	b510      	push	{r4, lr}
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	f7ff ff27 	bl	8003e2a <_Balloc>
 8003fdc:	2201      	movs	r2, #1
 8003fde:	6144      	str	r4, [r0, #20]
 8003fe0:	6102      	str	r2, [r0, #16]
 8003fe2:	bd10      	pop	{r4, pc}

08003fe4 <__multiply>:
 8003fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe8:	4614      	mov	r4, r2
 8003fea:	690a      	ldr	r2, [r1, #16]
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	4688      	mov	r8, r1
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	bfbe      	ittt	lt
 8003ff4:	460b      	movlt	r3, r1
 8003ff6:	46a0      	movlt	r8, r4
 8003ff8:	461c      	movlt	r4, r3
 8003ffa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003ffe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004002:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004006:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800400a:	eb07 0609 	add.w	r6, r7, r9
 800400e:	42b3      	cmp	r3, r6
 8004010:	bfb8      	it	lt
 8004012:	3101      	addlt	r1, #1
 8004014:	f7ff ff09 	bl	8003e2a <_Balloc>
 8004018:	f100 0514 	add.w	r5, r0, #20
 800401c:	462b      	mov	r3, r5
 800401e:	2200      	movs	r2, #0
 8004020:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004024:	4573      	cmp	r3, lr
 8004026:	d316      	bcc.n	8004056 <__multiply+0x72>
 8004028:	f104 0214 	add.w	r2, r4, #20
 800402c:	f108 0114 	add.w	r1, r8, #20
 8004030:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004034:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	9b00      	ldr	r3, [sp, #0]
 800403c:	9201      	str	r2, [sp, #4]
 800403e:	4293      	cmp	r3, r2
 8004040:	d80c      	bhi.n	800405c <__multiply+0x78>
 8004042:	2e00      	cmp	r6, #0
 8004044:	dd03      	ble.n	800404e <__multiply+0x6a>
 8004046:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800404a:	2b00      	cmp	r3, #0
 800404c:	d05d      	beq.n	800410a <__multiply+0x126>
 800404e:	6106      	str	r6, [r0, #16]
 8004050:	b003      	add	sp, #12
 8004052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004056:	f843 2b04 	str.w	r2, [r3], #4
 800405a:	e7e3      	b.n	8004024 <__multiply+0x40>
 800405c:	f8b2 b000 	ldrh.w	fp, [r2]
 8004060:	f1bb 0f00 	cmp.w	fp, #0
 8004064:	d023      	beq.n	80040ae <__multiply+0xca>
 8004066:	4689      	mov	r9, r1
 8004068:	46ac      	mov	ip, r5
 800406a:	f04f 0800 	mov.w	r8, #0
 800406e:	f859 4b04 	ldr.w	r4, [r9], #4
 8004072:	f8dc a000 	ldr.w	sl, [ip]
 8004076:	b2a3      	uxth	r3, r4
 8004078:	fa1f fa8a 	uxth.w	sl, sl
 800407c:	fb0b a303 	mla	r3, fp, r3, sl
 8004080:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004084:	f8dc 4000 	ldr.w	r4, [ip]
 8004088:	4443      	add	r3, r8
 800408a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800408e:	fb0b 840a 	mla	r4, fp, sl, r8
 8004092:	46e2      	mov	sl, ip
 8004094:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004098:	b29b      	uxth	r3, r3
 800409a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800409e:	454f      	cmp	r7, r9
 80040a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80040a4:	f84a 3b04 	str.w	r3, [sl], #4
 80040a8:	d82b      	bhi.n	8004102 <__multiply+0x11e>
 80040aa:	f8cc 8004 	str.w	r8, [ip, #4]
 80040ae:	9b01      	ldr	r3, [sp, #4]
 80040b0:	3204      	adds	r2, #4
 80040b2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80040b6:	f1ba 0f00 	cmp.w	sl, #0
 80040ba:	d020      	beq.n	80040fe <__multiply+0x11a>
 80040bc:	4689      	mov	r9, r1
 80040be:	46a8      	mov	r8, r5
 80040c0:	f04f 0b00 	mov.w	fp, #0
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	f8b9 c000 	ldrh.w	ip, [r9]
 80040ca:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	fb0a 440c 	mla	r4, sl, ip, r4
 80040d4:	46c4      	mov	ip, r8
 80040d6:	445c      	add	r4, fp
 80040d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80040dc:	f84c 3b04 	str.w	r3, [ip], #4
 80040e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80040e4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80040e8:	0c1b      	lsrs	r3, r3, #16
 80040ea:	fb0a b303 	mla	r3, sl, r3, fp
 80040ee:	454f      	cmp	r7, r9
 80040f0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80040f4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80040f8:	d805      	bhi.n	8004106 <__multiply+0x122>
 80040fa:	f8c8 3004 	str.w	r3, [r8, #4]
 80040fe:	3504      	adds	r5, #4
 8004100:	e79b      	b.n	800403a <__multiply+0x56>
 8004102:	46d4      	mov	ip, sl
 8004104:	e7b3      	b.n	800406e <__multiply+0x8a>
 8004106:	46e0      	mov	r8, ip
 8004108:	e7dd      	b.n	80040c6 <__multiply+0xe2>
 800410a:	3e01      	subs	r6, #1
 800410c:	e799      	b.n	8004042 <__multiply+0x5e>
	...

08004110 <__pow5mult>:
 8004110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004114:	4615      	mov	r5, r2
 8004116:	f012 0203 	ands.w	r2, r2, #3
 800411a:	4606      	mov	r6, r0
 800411c:	460f      	mov	r7, r1
 800411e:	d007      	beq.n	8004130 <__pow5mult+0x20>
 8004120:	4c21      	ldr	r4, [pc, #132]	; (80041a8 <__pow5mult+0x98>)
 8004122:	3a01      	subs	r2, #1
 8004124:	2300      	movs	r3, #0
 8004126:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800412a:	f7ff fec9 	bl	8003ec0 <__multadd>
 800412e:	4607      	mov	r7, r0
 8004130:	10ad      	asrs	r5, r5, #2
 8004132:	d035      	beq.n	80041a0 <__pow5mult+0x90>
 8004134:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004136:	b93c      	cbnz	r4, 8004148 <__pow5mult+0x38>
 8004138:	2010      	movs	r0, #16
 800413a:	f7ff fe63 	bl	8003e04 <malloc>
 800413e:	6270      	str	r0, [r6, #36]	; 0x24
 8004140:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004144:	6004      	str	r4, [r0, #0]
 8004146:	60c4      	str	r4, [r0, #12]
 8004148:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800414c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004150:	b94c      	cbnz	r4, 8004166 <__pow5mult+0x56>
 8004152:	f240 2171 	movw	r1, #625	; 0x271
 8004156:	4630      	mov	r0, r6
 8004158:	f7ff ff3b 	bl	8003fd2 <__i2b>
 800415c:	2300      	movs	r3, #0
 800415e:	4604      	mov	r4, r0
 8004160:	f8c8 0008 	str.w	r0, [r8, #8]
 8004164:	6003      	str	r3, [r0, #0]
 8004166:	f04f 0800 	mov.w	r8, #0
 800416a:	07eb      	lsls	r3, r5, #31
 800416c:	d50a      	bpl.n	8004184 <__pow5mult+0x74>
 800416e:	4639      	mov	r1, r7
 8004170:	4622      	mov	r2, r4
 8004172:	4630      	mov	r0, r6
 8004174:	f7ff ff36 	bl	8003fe4 <__multiply>
 8004178:	4681      	mov	r9, r0
 800417a:	4639      	mov	r1, r7
 800417c:	4630      	mov	r0, r6
 800417e:	f7ff fe88 	bl	8003e92 <_Bfree>
 8004182:	464f      	mov	r7, r9
 8004184:	106d      	asrs	r5, r5, #1
 8004186:	d00b      	beq.n	80041a0 <__pow5mult+0x90>
 8004188:	6820      	ldr	r0, [r4, #0]
 800418a:	b938      	cbnz	r0, 800419c <__pow5mult+0x8c>
 800418c:	4622      	mov	r2, r4
 800418e:	4621      	mov	r1, r4
 8004190:	4630      	mov	r0, r6
 8004192:	f7ff ff27 	bl	8003fe4 <__multiply>
 8004196:	6020      	str	r0, [r4, #0]
 8004198:	f8c0 8000 	str.w	r8, [r0]
 800419c:	4604      	mov	r4, r0
 800419e:	e7e4      	b.n	800416a <__pow5mult+0x5a>
 80041a0:	4638      	mov	r0, r7
 80041a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041a6:	bf00      	nop
 80041a8:	08004680 	.word	0x08004680

080041ac <__lshift>:
 80041ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b0:	460c      	mov	r4, r1
 80041b2:	4607      	mov	r7, r0
 80041b4:	4616      	mov	r6, r2
 80041b6:	6923      	ldr	r3, [r4, #16]
 80041b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80041bc:	eb0a 0903 	add.w	r9, sl, r3
 80041c0:	6849      	ldr	r1, [r1, #4]
 80041c2:	68a3      	ldr	r3, [r4, #8]
 80041c4:	f109 0501 	add.w	r5, r9, #1
 80041c8:	42ab      	cmp	r3, r5
 80041ca:	db32      	blt.n	8004232 <__lshift+0x86>
 80041cc:	4638      	mov	r0, r7
 80041ce:	f7ff fe2c 	bl	8003e2a <_Balloc>
 80041d2:	2300      	movs	r3, #0
 80041d4:	4680      	mov	r8, r0
 80041d6:	461a      	mov	r2, r3
 80041d8:	f100 0114 	add.w	r1, r0, #20
 80041dc:	4553      	cmp	r3, sl
 80041de:	db2b      	blt.n	8004238 <__lshift+0x8c>
 80041e0:	6920      	ldr	r0, [r4, #16]
 80041e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80041e6:	f104 0314 	add.w	r3, r4, #20
 80041ea:	f016 021f 	ands.w	r2, r6, #31
 80041ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80041f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80041f6:	d025      	beq.n	8004244 <__lshift+0x98>
 80041f8:	2000      	movs	r0, #0
 80041fa:	f1c2 0e20 	rsb	lr, r2, #32
 80041fe:	468a      	mov	sl, r1
 8004200:	681e      	ldr	r6, [r3, #0]
 8004202:	4096      	lsls	r6, r2
 8004204:	4330      	orrs	r0, r6
 8004206:	f84a 0b04 	str.w	r0, [sl], #4
 800420a:	f853 0b04 	ldr.w	r0, [r3], #4
 800420e:	459c      	cmp	ip, r3
 8004210:	fa20 f00e 	lsr.w	r0, r0, lr
 8004214:	d814      	bhi.n	8004240 <__lshift+0x94>
 8004216:	6048      	str	r0, [r1, #4]
 8004218:	b108      	cbz	r0, 800421e <__lshift+0x72>
 800421a:	f109 0502 	add.w	r5, r9, #2
 800421e:	3d01      	subs	r5, #1
 8004220:	4638      	mov	r0, r7
 8004222:	f8c8 5010 	str.w	r5, [r8, #16]
 8004226:	4621      	mov	r1, r4
 8004228:	f7ff fe33 	bl	8003e92 <_Bfree>
 800422c:	4640      	mov	r0, r8
 800422e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004232:	3101      	adds	r1, #1
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	e7c7      	b.n	80041c8 <__lshift+0x1c>
 8004238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800423c:	3301      	adds	r3, #1
 800423e:	e7cd      	b.n	80041dc <__lshift+0x30>
 8004240:	4651      	mov	r1, sl
 8004242:	e7dc      	b.n	80041fe <__lshift+0x52>
 8004244:	3904      	subs	r1, #4
 8004246:	f853 2b04 	ldr.w	r2, [r3], #4
 800424a:	459c      	cmp	ip, r3
 800424c:	f841 2f04 	str.w	r2, [r1, #4]!
 8004250:	d8f9      	bhi.n	8004246 <__lshift+0x9a>
 8004252:	e7e4      	b.n	800421e <__lshift+0x72>

08004254 <__mcmp>:
 8004254:	6903      	ldr	r3, [r0, #16]
 8004256:	690a      	ldr	r2, [r1, #16]
 8004258:	b530      	push	{r4, r5, lr}
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	d10c      	bne.n	8004278 <__mcmp+0x24>
 800425e:	0092      	lsls	r2, r2, #2
 8004260:	3014      	adds	r0, #20
 8004262:	3114      	adds	r1, #20
 8004264:	1884      	adds	r4, r0, r2
 8004266:	4411      	add	r1, r2
 8004268:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800426c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004270:	4295      	cmp	r5, r2
 8004272:	d003      	beq.n	800427c <__mcmp+0x28>
 8004274:	d305      	bcc.n	8004282 <__mcmp+0x2e>
 8004276:	2301      	movs	r3, #1
 8004278:	4618      	mov	r0, r3
 800427a:	bd30      	pop	{r4, r5, pc}
 800427c:	42a0      	cmp	r0, r4
 800427e:	d3f3      	bcc.n	8004268 <__mcmp+0x14>
 8004280:	e7fa      	b.n	8004278 <__mcmp+0x24>
 8004282:	f04f 33ff 	mov.w	r3, #4294967295
 8004286:	e7f7      	b.n	8004278 <__mcmp+0x24>

08004288 <__mdiff>:
 8004288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	460d      	mov	r5, r1
 800428e:	4607      	mov	r7, r0
 8004290:	4611      	mov	r1, r2
 8004292:	4628      	mov	r0, r5
 8004294:	4614      	mov	r4, r2
 8004296:	f7ff ffdd 	bl	8004254 <__mcmp>
 800429a:	1e06      	subs	r6, r0, #0
 800429c:	d108      	bne.n	80042b0 <__mdiff+0x28>
 800429e:	4631      	mov	r1, r6
 80042a0:	4638      	mov	r0, r7
 80042a2:	f7ff fdc2 	bl	8003e2a <_Balloc>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80042ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b0:	bfa4      	itt	ge
 80042b2:	4623      	movge	r3, r4
 80042b4:	462c      	movge	r4, r5
 80042b6:	4638      	mov	r0, r7
 80042b8:	6861      	ldr	r1, [r4, #4]
 80042ba:	bfa6      	itte	ge
 80042bc:	461d      	movge	r5, r3
 80042be:	2600      	movge	r6, #0
 80042c0:	2601      	movlt	r6, #1
 80042c2:	f7ff fdb2 	bl	8003e2a <_Balloc>
 80042c6:	f04f 0e00 	mov.w	lr, #0
 80042ca:	60c6      	str	r6, [r0, #12]
 80042cc:	692b      	ldr	r3, [r5, #16]
 80042ce:	6926      	ldr	r6, [r4, #16]
 80042d0:	f104 0214 	add.w	r2, r4, #20
 80042d4:	f105 0914 	add.w	r9, r5, #20
 80042d8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80042dc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80042e0:	f100 0114 	add.w	r1, r0, #20
 80042e4:	f852 ab04 	ldr.w	sl, [r2], #4
 80042e8:	f859 5b04 	ldr.w	r5, [r9], #4
 80042ec:	fa1f f38a 	uxth.w	r3, sl
 80042f0:	4473      	add	r3, lr
 80042f2:	b2ac      	uxth	r4, r5
 80042f4:	1b1b      	subs	r3, r3, r4
 80042f6:	0c2c      	lsrs	r4, r5, #16
 80042f8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80042fc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004300:	b29b      	uxth	r3, r3
 8004302:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004306:	45c8      	cmp	r8, r9
 8004308:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800430c:	4694      	mov	ip, r2
 800430e:	f841 4b04 	str.w	r4, [r1], #4
 8004312:	d8e7      	bhi.n	80042e4 <__mdiff+0x5c>
 8004314:	45bc      	cmp	ip, r7
 8004316:	d304      	bcc.n	8004322 <__mdiff+0x9a>
 8004318:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800431c:	b183      	cbz	r3, 8004340 <__mdiff+0xb8>
 800431e:	6106      	str	r6, [r0, #16]
 8004320:	e7c4      	b.n	80042ac <__mdiff+0x24>
 8004322:	f85c 4b04 	ldr.w	r4, [ip], #4
 8004326:	b2a2      	uxth	r2, r4
 8004328:	4472      	add	r2, lr
 800432a:	1413      	asrs	r3, r2, #16
 800432c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004330:	b292      	uxth	r2, r2
 8004332:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004336:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800433a:	f841 2b04 	str.w	r2, [r1], #4
 800433e:	e7e9      	b.n	8004314 <__mdiff+0x8c>
 8004340:	3e01      	subs	r6, #1
 8004342:	e7e9      	b.n	8004318 <__mdiff+0x90>

08004344 <__d2b>:
 8004344:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004348:	461c      	mov	r4, r3
 800434a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800434e:	2101      	movs	r1, #1
 8004350:	4690      	mov	r8, r2
 8004352:	f7ff fd6a 	bl	8003e2a <_Balloc>
 8004356:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800435a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800435e:	4607      	mov	r7, r0
 8004360:	bb34      	cbnz	r4, 80043b0 <__d2b+0x6c>
 8004362:	9201      	str	r2, [sp, #4]
 8004364:	f1b8 0200 	subs.w	r2, r8, #0
 8004368:	d027      	beq.n	80043ba <__d2b+0x76>
 800436a:	a802      	add	r0, sp, #8
 800436c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004370:	f7ff fe00 	bl	8003f74 <__lo0bits>
 8004374:	9900      	ldr	r1, [sp, #0]
 8004376:	b1f0      	cbz	r0, 80043b6 <__d2b+0x72>
 8004378:	9a01      	ldr	r2, [sp, #4]
 800437a:	f1c0 0320 	rsb	r3, r0, #32
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	430b      	orrs	r3, r1
 8004384:	40c2      	lsrs	r2, r0
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	9201      	str	r2, [sp, #4]
 800438a:	9b01      	ldr	r3, [sp, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	bf14      	ite	ne
 8004390:	2102      	movne	r1, #2
 8004392:	2101      	moveq	r1, #1
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	6139      	str	r1, [r7, #16]
 8004398:	b1c4      	cbz	r4, 80043cc <__d2b+0x88>
 800439a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800439e:	4404      	add	r4, r0
 80043a0:	6034      	str	r4, [r6, #0]
 80043a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80043a6:	6028      	str	r0, [r5, #0]
 80043a8:	4638      	mov	r0, r7
 80043aa:	b002      	add	sp, #8
 80043ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80043b4:	e7d5      	b.n	8004362 <__d2b+0x1e>
 80043b6:	6179      	str	r1, [r7, #20]
 80043b8:	e7e7      	b.n	800438a <__d2b+0x46>
 80043ba:	a801      	add	r0, sp, #4
 80043bc:	f7ff fdda 	bl	8003f74 <__lo0bits>
 80043c0:	2101      	movs	r1, #1
 80043c2:	9b01      	ldr	r3, [sp, #4]
 80043c4:	6139      	str	r1, [r7, #16]
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	3020      	adds	r0, #32
 80043ca:	e7e5      	b.n	8004398 <__d2b+0x54>
 80043cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80043d0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80043d4:	6030      	str	r0, [r6, #0]
 80043d6:	6918      	ldr	r0, [r3, #16]
 80043d8:	f7ff fdad 	bl	8003f36 <__hi0bits>
 80043dc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80043e0:	e7e1      	b.n	80043a6 <__d2b+0x62>

080043e2 <_calloc_r>:
 80043e2:	b538      	push	{r3, r4, r5, lr}
 80043e4:	fb02 f401 	mul.w	r4, r2, r1
 80043e8:	4621      	mov	r1, r4
 80043ea:	f000 f809 	bl	8004400 <_malloc_r>
 80043ee:	4605      	mov	r5, r0
 80043f0:	b118      	cbz	r0, 80043fa <_calloc_r+0x18>
 80043f2:	4622      	mov	r2, r4
 80043f4:	2100      	movs	r1, #0
 80043f6:	f7fe fb6f 	bl	8002ad8 <memset>
 80043fa:	4628      	mov	r0, r5
 80043fc:	bd38      	pop	{r3, r4, r5, pc}
	...

08004400 <_malloc_r>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	1ccd      	adds	r5, r1, #3
 8004404:	f025 0503 	bic.w	r5, r5, #3
 8004408:	3508      	adds	r5, #8
 800440a:	2d0c      	cmp	r5, #12
 800440c:	bf38      	it	cc
 800440e:	250c      	movcc	r5, #12
 8004410:	2d00      	cmp	r5, #0
 8004412:	4606      	mov	r6, r0
 8004414:	db01      	blt.n	800441a <_malloc_r+0x1a>
 8004416:	42a9      	cmp	r1, r5
 8004418:	d903      	bls.n	8004422 <_malloc_r+0x22>
 800441a:	230c      	movs	r3, #12
 800441c:	6033      	str	r3, [r6, #0]
 800441e:	2000      	movs	r0, #0
 8004420:	bd70      	pop	{r4, r5, r6, pc}
 8004422:	f000 f869 	bl	80044f8 <__malloc_lock>
 8004426:	4a21      	ldr	r2, [pc, #132]	; (80044ac <_malloc_r+0xac>)
 8004428:	6814      	ldr	r4, [r2, #0]
 800442a:	4621      	mov	r1, r4
 800442c:	b991      	cbnz	r1, 8004454 <_malloc_r+0x54>
 800442e:	4c20      	ldr	r4, [pc, #128]	; (80044b0 <_malloc_r+0xb0>)
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	b91b      	cbnz	r3, 800443c <_malloc_r+0x3c>
 8004434:	4630      	mov	r0, r6
 8004436:	f000 f83d 	bl	80044b4 <_sbrk_r>
 800443a:	6020      	str	r0, [r4, #0]
 800443c:	4629      	mov	r1, r5
 800443e:	4630      	mov	r0, r6
 8004440:	f000 f838 	bl	80044b4 <_sbrk_r>
 8004444:	1c43      	adds	r3, r0, #1
 8004446:	d124      	bne.n	8004492 <_malloc_r+0x92>
 8004448:	230c      	movs	r3, #12
 800444a:	4630      	mov	r0, r6
 800444c:	6033      	str	r3, [r6, #0]
 800444e:	f000 f854 	bl	80044fa <__malloc_unlock>
 8004452:	e7e4      	b.n	800441e <_malloc_r+0x1e>
 8004454:	680b      	ldr	r3, [r1, #0]
 8004456:	1b5b      	subs	r3, r3, r5
 8004458:	d418      	bmi.n	800448c <_malloc_r+0x8c>
 800445a:	2b0b      	cmp	r3, #11
 800445c:	d90f      	bls.n	800447e <_malloc_r+0x7e>
 800445e:	600b      	str	r3, [r1, #0]
 8004460:	18cc      	adds	r4, r1, r3
 8004462:	50cd      	str	r5, [r1, r3]
 8004464:	4630      	mov	r0, r6
 8004466:	f000 f848 	bl	80044fa <__malloc_unlock>
 800446a:	f104 000b 	add.w	r0, r4, #11
 800446e:	1d23      	adds	r3, r4, #4
 8004470:	f020 0007 	bic.w	r0, r0, #7
 8004474:	1ac3      	subs	r3, r0, r3
 8004476:	d0d3      	beq.n	8004420 <_malloc_r+0x20>
 8004478:	425a      	negs	r2, r3
 800447a:	50e2      	str	r2, [r4, r3]
 800447c:	e7d0      	b.n	8004420 <_malloc_r+0x20>
 800447e:	684b      	ldr	r3, [r1, #4]
 8004480:	428c      	cmp	r4, r1
 8004482:	bf16      	itet	ne
 8004484:	6063      	strne	r3, [r4, #4]
 8004486:	6013      	streq	r3, [r2, #0]
 8004488:	460c      	movne	r4, r1
 800448a:	e7eb      	b.n	8004464 <_malloc_r+0x64>
 800448c:	460c      	mov	r4, r1
 800448e:	6849      	ldr	r1, [r1, #4]
 8004490:	e7cc      	b.n	800442c <_malloc_r+0x2c>
 8004492:	1cc4      	adds	r4, r0, #3
 8004494:	f024 0403 	bic.w	r4, r4, #3
 8004498:	42a0      	cmp	r0, r4
 800449a:	d005      	beq.n	80044a8 <_malloc_r+0xa8>
 800449c:	1a21      	subs	r1, r4, r0
 800449e:	4630      	mov	r0, r6
 80044a0:	f000 f808 	bl	80044b4 <_sbrk_r>
 80044a4:	3001      	adds	r0, #1
 80044a6:	d0cf      	beq.n	8004448 <_malloc_r+0x48>
 80044a8:	6025      	str	r5, [r4, #0]
 80044aa:	e7db      	b.n	8004464 <_malloc_r+0x64>
 80044ac:	20000284 	.word	0x20000284
 80044b0:	20000288 	.word	0x20000288

080044b4 <_sbrk_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	2300      	movs	r3, #0
 80044b8:	4c05      	ldr	r4, [pc, #20]	; (80044d0 <_sbrk_r+0x1c>)
 80044ba:	4605      	mov	r5, r0
 80044bc:	4608      	mov	r0, r1
 80044be:	6023      	str	r3, [r4, #0]
 80044c0:	f7fe fa80 	bl	80029c4 <_sbrk>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d102      	bne.n	80044ce <_sbrk_r+0x1a>
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	b103      	cbz	r3, 80044ce <_sbrk_r+0x1a>
 80044cc:	602b      	str	r3, [r5, #0]
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	200002e0 	.word	0x200002e0

080044d4 <__ascii_mbtowc>:
 80044d4:	b082      	sub	sp, #8
 80044d6:	b901      	cbnz	r1, 80044da <__ascii_mbtowc+0x6>
 80044d8:	a901      	add	r1, sp, #4
 80044da:	b142      	cbz	r2, 80044ee <__ascii_mbtowc+0x1a>
 80044dc:	b14b      	cbz	r3, 80044f2 <__ascii_mbtowc+0x1e>
 80044de:	7813      	ldrb	r3, [r2, #0]
 80044e0:	600b      	str	r3, [r1, #0]
 80044e2:	7812      	ldrb	r2, [r2, #0]
 80044e4:	1c10      	adds	r0, r2, #0
 80044e6:	bf18      	it	ne
 80044e8:	2001      	movne	r0, #1
 80044ea:	b002      	add	sp, #8
 80044ec:	4770      	bx	lr
 80044ee:	4610      	mov	r0, r2
 80044f0:	e7fb      	b.n	80044ea <__ascii_mbtowc+0x16>
 80044f2:	f06f 0001 	mvn.w	r0, #1
 80044f6:	e7f8      	b.n	80044ea <__ascii_mbtowc+0x16>

080044f8 <__malloc_lock>:
 80044f8:	4770      	bx	lr

080044fa <__malloc_unlock>:
 80044fa:	4770      	bx	lr

080044fc <__ascii_wctomb>:
 80044fc:	b149      	cbz	r1, 8004512 <__ascii_wctomb+0x16>
 80044fe:	2aff      	cmp	r2, #255	; 0xff
 8004500:	bf8b      	itete	hi
 8004502:	238a      	movhi	r3, #138	; 0x8a
 8004504:	700a      	strbls	r2, [r1, #0]
 8004506:	6003      	strhi	r3, [r0, #0]
 8004508:	2001      	movls	r0, #1
 800450a:	bf88      	it	hi
 800450c:	f04f 30ff 	movhi.w	r0, #4294967295
 8004510:	4770      	bx	lr
 8004512:	4608      	mov	r0, r1
 8004514:	4770      	bx	lr
	...

08004518 <_init>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	bf00      	nop
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr

08004524 <_fini>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr
